{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","ref","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","index","type","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","target","returnType","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","initializer","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","internalName","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","exportName","k","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","sourceMap","readString","toText","Error","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","i32","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","I32","_BinaryenConstGetValueI32","I64","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","F32","_BinaryenConstGetValueF32","F64","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","setDebugLocation","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createSignature","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","declaration","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","values","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","mainFunction","resolvedThisExpression","resolvedElementExpression","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryResolveImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","filterDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","BUILTIN","isLibrary","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","staticField","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","global_1","resolveSignature","contextualTypeArguments","reportNotFound","thisType","resolveType","parameterTypeNodes","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","DEFAULT","REST","parameterType","returnTypeNode","Signature","asNullable","typeNode","ENUM","instance","resolveUsingTypeArguments","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","classType","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Element","program","NAMESPACE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","CONST","INLINED","constantFloatValue","Parameter","Local","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","resolveBuiltinTypeArguments","resolvedType","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","debugLocation","debugInfoRef","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","_e","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_f","_g","inheritedMember","partialConstructor","constructorInstance","_h","_j","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","canConversionOverflow","SetLocal","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","Block","last","If","Select","Call","Unreachable","fromSize","toSize","g","eval","e","window","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","isize64","isize32","usize64","usize32","computeSmallIntegerShift","targetType","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","program_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileInlineConstant","compileExpression","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","condPre","incrExpr","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","parentElement","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray"],"mappings":"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K,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is a builtin. */\n  BUILTIN = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 = _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0;\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeFunction(func: FunctionRef): void {\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([name]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    free_memory(this.cachedByValue);\n    free_memory(this.cachedTemporaryName);\n    free_memory(this.cachedPrecomputeName);\n    free_memory(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n      nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n              _BinaryenLoadGetBytes(expr),\n              _BinaryenLoadGetOffset(expr),\n              _BinaryenExpressionGetType(expr),\n              nested1\n            )\n            : _BinaryenLoad(this.ref,\n              _BinaryenLoadGetBytes(expr),\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\n              _BinaryenLoadGetOffset(expr),\n              _BinaryenLoadGetAlign(expr),\n              _BinaryenExpressionGetType(expr),\n              nested1\n            )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() { }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx, (val & 0xff) as u8);\n    store<u8>(idx + 1, ((val >> 8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >> 16) & 0xff) as u8);\n    store<u8>(idx + 3, (val >>> 24) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 | (u >>> 6)) as u8);\n      store<u8>(idx++, (0x80 | (u & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 | (u >>> 12)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | (u & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 | (u >>> 18)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | (u & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 | (u >>> 24)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | (u & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC | (u >>> 30)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | (u & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n    load<u8>(ptr) |\n    (load<u8>(ptr + 1) << 8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeNode,\n  TypeParameterNode,\n  ParameterKind,\n  SignatureNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  AssertionExpression,\n  ElementAccessExpression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  StringLiteralExpression,\n  CallExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** ArrayBufferView prototype reference. */\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference. */\n  mainFunction: FunctionPrototype | null = null;\n\n  /** Target expression of the previously resolved property or element access. */\n  resolvedThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  resolvedElementExpression : Expression | null = null;\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryResolveImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryResolveImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    var globalAliases = options.globalAliases;\n    if (globalAliases) {\n      for (let [alias, name] of globalAliases) {\n        if (!name.length) continue; // explicitly disabled\n        let element = this.elementsLookup.get(name);\n        if (element) this.elementsLookup.set(alias, element);\n        else throw new Error(\"element not found: \" + name);\n      }\n    }\n\n    // register 'Array'\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\n    if (arrayPrototype) {\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\n    }\n\n    // register 'ArrayBufferView'\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\n    if (arrayBufferViewPrototype) {\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\n    }\n\n    // register 'String'\n    var stringPrototype = this.elementsLookup.get(\"String\");\n    if (stringPrototype) {\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\n      if (stringInstance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = stringInstance;\n          this.typesLookup.set(\"string\", stringInstance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = <Element>assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = <Element>this.moduleLevelExports.get(\"main\");\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to resolve an import by traversing exports and queued exports. */\n  private tryResolveImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Processes global options, if present. */\n  private checkGlobalOptions(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\n      }\n    }\n  }\n\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"class member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n      // TBD: no need to mark as MODULE_EXPORT\n    }\n  }\n\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobalOptions(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = identifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = identifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if from a library file\n    if (identifier.range.source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobalOptions(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          if (this.moduleLevelExports.get(simpleName) !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, namespace);\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, global);\n        }\n      }\n      this.checkGlobalOptions(global, declaration);\n    }\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(\n        returnTypeNode,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Type | null {\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\n      if (!signature) return null;\n      return node.isNullable\n        ? signature.type.asNullable()\n        : signature.type;\n    }\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\n\n    var element: Element | null;\n    if (\n      (element = this.elementsLookup.get(localName)) || // file-global\n      (element = this.elementsLookup.get(globalName))   // program-global\n    ) {\n      switch (element.kind) {\n        case ElementKind.ENUM: return Type.i32;\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\n            typeNode.typeArguments,\n            contextualTypeArguments,\n            null\n          ); // reports\n          if (!instance) return null;\n          return node.isNullable\n            ? instance.type.asNullable()\n            : instance.type;\n        }\n      }\n    }\n\n    // check (global) type alias\n    var alias = this.typeAliases.get(simpleName);\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\n\n    // resolve parameters\n    if (typeNode.typeArguments) {\n      let k = typeNode.typeArguments.length;\n      let paramTypes = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let paramType = this.resolveType( // reports\n          typeNode.typeArguments[i],\n          contextualTypeArguments,\n          reportNotFound\n        );\n        if (!paramType) return null;\n        paramTypes[i] = paramType;\n      }\n\n      if (k) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(paramTypes);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    var type: Type | null;\n\n    // check file-global / program-global type\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\n      return type;\n    }\n\n    if (reportNotFound) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        true\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    contextualFunction: Function | null,\n    contextualEnum: Enum | null = null\n  ): Element | null {\n    var name = identifier.text;\n\n    var element: Element | null;\n    var namespace: Element | null;\n\n    // check siblings\n    if (contextualEnum) {\n\n      if (\n        contextualEnum.members &&\n        (element = contextualEnum.members.get(name)) &&\n        element.kind == ElementKind.ENUMVALUE\n      ) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // ENUMVALUE\n      }\n\n    } else if (contextualFunction) {\n\n      // check locals\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // LOCAL\n      }\n\n      // check outer scope locals\n      // let outerScope = contextualFunction.outerScope;\n      // while (outerScope) {\n      //   if (element = outerScope.getScopedLocal(name)) {\n      //     let scopedLocal = <Local>element;\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\n      //     return resolvedElement.set(scopedGlobal);\n      //   }\n      //   outerScope = outerScope.currentFunction.outerScope;\n      // }\n\n      // search contextual parent namespaces if applicable\n      if (namespace = contextualFunction.prototype.parent) {\n        do {\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element; // LOCAL\n          }\n        } while (namespace = namespace.parent);\n      }\n    }\n\n    // search current file\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = this.elementsLookup.get(name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    this.error(\n      DiagnosticCode.Cannot_find_name_0,\n      identifier.range, name\n    );\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            elementAccess.range, (<Class>target).internalName\n          );\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      targetExpression.range\n    );\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.resolvedThisExpression = expression;\n            this.resolvedElementExpression = null;\n            return this.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            targetExpression.range, target.internalName\n          );\n          return null;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return null;\n  }\n\n  // resolveExpressionType(\n  //   expression: Expression,\n  //   contextualFunction: Function\n  // ): Type {\n  //   var element = this.resolveExpression(expression, contextualFunction);\n  //   switch (element.kind) {\n\n  //   }\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    functionTypeArguments: Type[] | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = this.declaration;\n    var isInstance = this.is(CommonFlags.INSTANCE);\n    var classPrototype = this.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = this.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(this.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          functionTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (this.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = this.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      this,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\n    assert(this.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(this.classPrototype);\n\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\n\n    var simpleName = this.simpleName;\n    var partialKey = typesToString(classTypeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      this.declaration,\n      classPrototype,\n      this.decoratorFlags\n    );\n    partialPrototype.flags = this.flags;\n    partialPrototype.operatorKind = this.operatorKind;\n    partialPrototype.classTypeArguments = classTypeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\n        assert(this.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\n  resolveBuiltinTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null\n  ): Type[] | null {\n    assert(this.is(CommonFlags.BUILTIN));\n    var resolvedTypeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let k = typeArgumentNodes.length;\n      resolvedTypeArguments = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let resolvedType = this.program.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          true\n        );\n        if (!resolvedType) return null;\n        resolvedTypeArguments[i] = resolvedType;\n      }\n    }\n    return resolvedTypeArguments;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // inherit contextual type arguments\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    var declaration = this.declaration;\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        this.program.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          declaration.extendsType.range\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        this.program.error(\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n          declaration.extendsType.range, baseClass.internalName\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        this.program.error(\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n          Range.join(declaration.name.range, declaration.extendsType.range)\n        );\n        return null;\n      }\n    }\n\n    // override call specific contextual type arguments if provided\n    var i: i32, k: i32;\n    if (typeArguments) {\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      for (i = 0; i < k; ++i) {\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else if (declaration.typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n\n    var simpleName = this.simpleName;\n    var internalName = this.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      memoryOffset = baseClass.currentMemoryOffset;\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n    }\n\n    // Resolve constructor\n    if (this.constructorPrototype) {\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\n    }\n\n    // Resolve instance members\n    if (this.instanceMembers) {\n      for (let member of this.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!fieldDeclaration.type) {\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\n            }\n            let fieldType = this.program.resolveType( // reports\n              fieldDeclaration.type,\n              instance.contextualTypeArguments\n            );\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: {\n                if (memoryOffset & 1) ++memoryOffset;\n                break;\n              }\n              case 4: {\n                if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\n                break;\n              }\n              case 8: {\n                if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\n                break;\n              }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\n            if (partialPrototype) {\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n              instance.members.set(member.simpleName, partialPrototype);\n            }\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype);\n            let setterPrototype = (<Property>member).setterPrototype;\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              this\n            );\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype.internalName = (\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\n            );\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype.internalName = (\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\n              );\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, prototype] of this.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\n        if (!operatorPartial) continue;\n        operatorInstance = operatorPartial.resolve(); // reports\n      } else {\n        operatorInstance = prototype.resolve(); // reports\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\n    return instance;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    alternativeReportNode: Node | null\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        this.declaration.typeParameters,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        alternativeReportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    } else {\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          ) {\n            ++this.pos;\n          }\n          break;\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        while (--this.tokenPos > posBefore) {\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate as compileBuiltinAllocate,\n  compileAbort as compileBuiltinAbort\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getFunctionBody,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, declare memory as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", options.sharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.program.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration && declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(\n            declaration.initializer,\n            global.type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          );\n        }\n\n        // check if the initializer is constant\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = getExpressionType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              getConstValueI64Low(initExpr),\n              getConstValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            return false;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\n          module.addGlobal(internalName, nativeType, false, initExpr);\n          module.addGlobalExport(internalName, mangleExportName(global));\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\n          module.addGlobal(internalName, nativeType, false, initExpr);\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(\n              <Expression>valueDeclaration.value,\n              Type.i32,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            );\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (getExpressionType(initExpr) == NativeType.I32) {\n              val.constantValue = getConstValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n            module.addGlobalExport(member.internalName, mangleExportName(member));\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\n      if (signature.requiredParameters < signature.parameterTypes.length) {\n        // export the trampoline if the function takes optional parameters\n        instance = this.ensureTrampoline(instance);\n        this.ensureArgcSet();\n      }\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = fileLevelExports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\n            let module = this.module;\n            let name = (<Field>element).simpleName;\n            let type = (<Field>element).type;\n            let nativeType = type.toNativeType();\n            let offset = (<Field>element).memoryOffset;\n            let usizeType = this.options.usizeType;\n            let nativeSizeType = this.options.nativeSizeType;\n\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\n            module.addFunction(\n              getterName,\n              this.ensureFunctionType(null, type, usizeType),\n              null,\n              module.createLoad(\n                type.byteSize,\n                type.is(TypeFlags.SIGNED),\n                module.createGetLocal(0, nativeSizeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(getterName, getterName);\n\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\n            if (element.is(CommonFlags.READONLY)) break;\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\n            module.addFunction(\n              setterName,\n              this.ensureFunctionType([ type ], Type.void, usizeType),\n              null,\n              module.createStore(\n                type.byteSize,\n                module.createGetLocal(0, nativeSizeType),\n                module.createGetLocal(1, nativeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(setterName, setterName);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ], terminated ? NativeType.Unreachable : NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = this.precomputeExpressionRef(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyExpr = this.compileStatement(statement.statement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    var terminated = alwaysTrue && flow.isAny(FlowFlags.ANY_TERMINATING);\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel,\n        module.createBlock(null, repeatBlock, NativeType.None)\n      )\n    );\n\n    return module.createBlock(\n      breakLabel,\n      breakBlock,\n      terminated\n        ? NativeType.Unreachable\n        : NativeType.None\n      );\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileBuiltinAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = program.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.precomputeExpressionRef(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var alwaysReturns = alwaysTrue && flow.is(FlowFlags.RETURNS);\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ], alwaysReturns ? NativeType.Unreachable : NativeType.None);\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = getFunctionBody(funcRef);\n    module.removeTemporaryFunction();\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.program.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var target = program.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prototype = (<Property>target).setterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(); // reports\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (program.resolvedElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.program.resolvedThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = setterPrototype.resolve(); // reports\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.program.resolvedThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.program.resolvedElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = prototype.resolveUsingTypeArguments( // reports\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.program.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments,\n                true\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = prototype.resolve(\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = prototype.resolve(\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.program.resolvedThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var expr = compileBuiltinCall( // reports\n      this,\n      prototype,\n      prototype.resolveBuiltinTypeArguments(\n        expression.typeArguments,\n        this.currentFunction.flow.contextualTypeArguments\n      ),\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"oob\", [\n        module.createSwitch(names, \"oob\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.program.resolveIdentifier( // reports\n      expression,\n      currentFunction,\n      this.currentEnum\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localType = (<Local>target).type;\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = (<FunctionPrototype>target).resolve(\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.program.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      // case LiteralKind.OBJECT:\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    var elementCount = expressions.length;\n    if (elementCount) { // non-empty static or dynamic\n      let nativeElementType = elementType.toNativeType();\n      let values: usize;\n      let byteLength: usize;\n      switch (nativeElementType) {\n        case NativeType.I32: {\n          values = changetype<usize>(new Int32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.I64: {\n          values = changetype<usize>(new Array<I64>(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        case NativeType.F32: {\n          values = changetype<usize>(new Float32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.F64: {\n          values = changetype<usize>(new Float64Array(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        default: {\n          assert(false);\n          return module.createUnreachable();\n        }\n      }\n\n      // precompute value expressions\n      let exprs = new Array<ExpressionRef>(elementCount);\n      let expr: BinaryenExpressionRef;\n      for (let i = 0; i < elementCount; ++i) {\n        exprs[i] = expressions[i]\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n          : elementType.toNativeZero(module);\n        if (isStatic) {\n          expr = this.precomputeExpressionRef(exprs[i]);\n          if (getExpressionId(expr) == ExpressionId.Const) {\n            assert(getExpressionType(expr) == nativeElementType);\n            switch (nativeElementType) {\n              case NativeType.I32: {\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\n                break;\n              }\n              case NativeType.I64: {\n                changetype<I64[]>(values)[i] = i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\n                break;\n              }\n              case NativeType.F64: {\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\n                break;\n              }\n              default: assert(false); // checked above\n            }\n          } else {\n            // TODO: emit a warning if declared 'const'\n            // if (isConst) {\n            //   this.warn(\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n            //     reportNode.range\n            //   );\n            // }\n            isStatic = false;\n          }\n        }\n      }\n\n      let usizeTypeSize = this.options.usizeType.byteSize;\n      if (isStatic) { // non-empty, all elements can be precomputed\n\n        // Create a combined static memory segment composed of:\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\n\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\n        let data = new Uint8Array(arraySize + bufferTotalSize);\n        let segment = this.addMemorySegment(data);\n        let offset = 0;\n\n        // write Array struct\n        if (usizeTypeSize == 8) {\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\n          offset += 8;\n        } else {\n          assert(i64_high(segment.offset) == 0);\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\n          offset += 4;\n        }\n        writeI32(elementCount, data, offset); // length_\n        offset += 4;\n        assert(offset == arraySize);\n\n        // write ArrayBuffer struct\n        writeI32(byteLength, data, offset);\n        offset += bufferHeaderSize; // incl. alignment\n\n        // write ArrayBuffer data\n        switch (nativeElementType) {\n          case NativeType.I32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        assert(offset <= arraySize + bufferTotalSize);\n\n        this.currentType = arrayType;\n        return usizeTypeSize == 8\n          ? module.createI64(\n              i64_low(segment.offset),\n              i64_high(segment.offset)\n            )\n          : module.createI32(\n              i64_low(segment.offset)\n            );\n\n      } else { // non-empty, some elements can't be precomputed\n\n        this.currentType = arrayType;\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n        if (!setter) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            reportNode.range, arrayInstance.internalName\n          );\n          return module.createUnreachable();\n        }\n        let nativeArrayType = arrayType.toNativeType();\n        let currentFunction = this.currentFunction;\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\n        let index = 0;\n        stmts[index++] = module.createSetLocal(tempLocal.index,\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n            module.createI32(0), // this\n            module.createI32(elementCount)\n          ])\n        );\n        for (let i = 0; i < elementCount; ++i) {\n          stmts[index++] = this.makeCallDirect(setter, [\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\n            module.createI32(i),\n            exprs[i]\n          ]);\n        }\n        assert(index + 1 == stmts.length);\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n        currentFunction.freeTempLocal(tempLocal);\n        this.currentType = arrayType;\n        return module.createBlock(null, stmts, nativeArrayType);\n      }\n\n    } else { // empty, TBD: cache this somehow?\n      this.currentType = arrayType;\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(0)\n      ]);\n    }\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.program.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = classPrototype.resolve(\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = classPrototype.resolveUsingTypeArguments( // reports\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the first matching constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance = classInstance.constructorInstance;\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\n      constructorInstance = currentClassInstance.constructorInstance;\n    }\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(program.resolvedThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(null); // reports\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileBuiltinAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\n  switch (element.kind) {\n    case ElementKind.FUNCTION: {\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n        + simpleName\n        : simpleName;\n    }\n    case ElementKind.FIELD: {\n      let parent = assert((<Field>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.ENUMVALUE: {\n      let parent = assert((<EnumValue>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.CLASS: {\n      let parent = (<Class>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n    default: {\n      let parent = element.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n  }\n}\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionExpression,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\n\n    if (tn.skip(Token.PUBLIC)) {\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      if (tn.skip(Token.ABSTRACT)) {\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      } else {\n        flags |= CommonFlags.INSTANCE;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (tn.skip(Token.GET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.GET;\n        isGetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.SET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.SET | CommonFlags.SET;\n        isSetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\n      flags |= CommonFlags.CONSTRUCTOR;\n      isConstructor = true;\n      if (flags & CommonFlags.STATIC) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(staticStart, staticEnd), \"static\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.READONLY) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\n        ); // recoverable\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n\n    if (token == Token.NULL) {\n      return Node.createNullExpression(tn.range());\n    }\n    if (token == Token.TRUE) {\n      return Node.createTrueExpression(tn.range());\n    }\n    if (token == Token.FALSE) {\n      return Node.createFalseExpression(tn.range());\n    }\n\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.INVALID) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    switch (token) {\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = 0\n  ): Expression | null {\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  // skipBlock(tn: Tokenizer): void {\n  //   var depth = 0;\n  //   var token: Token;\n  //   do {\n  //     token = tn.next();\n  //     if (token == Token.OPENBRACE) {\n  //       ++depth;\n  //     } else if (token == Token.CLOSEBRACE) {\n  //       if (depth) --depth;\n  //       if (!depth) break; // done\n  //     }\n  //   } while (token != Token.ENDOFFILE);\n  // }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING,\n  INVALID = -1\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags\n} from \"./program\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    program.info(\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\n      reportNode.range\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function toText() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrint(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrintAsmjs(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n","module.exports = globalScope => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\n    if (!(size >>>= 0)) return 0;\n\n    if (HEAP_OFFSET + size > HEAP.length) {\n      var oldHeap = HEAP;\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n      HEAP.set(oldHeap);\n    }\n\n    var ptr = HEAP_OFFSET;\n    if ((HEAP_OFFSET += size) & 7)\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n\n    return ptr;\n  };\n\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\n    // TODO\n  };\n\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\n    HEAP.copyWithin(dest, src, src + size);\n  };\n\n  globalScope[\"store\"] = function store(ptr, value, offset) {\n    HEAP[ptr + (offset | 0)] = value;\n  };\n\n  globalScope[\"load\"] = function load(ptr, offset) {\n    return HEAP[ptr + (offset | 0)];\n  };\n};\n","module.exports = globalScope => {\n  globalScope[\"JSMath\"] = Math;\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nrequire(\"./portable/math\")(globalScope);\nrequire(\"./portable/memory\")(globalScope);\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"../../../std/portable.d.ts\" />\n/// <reference path=\"../binaryen.d.ts\" />\n\nimport \"../../../std/portable\";\nimport \"./binaryen\";\nimport \"./i64\";\nimport \"./float\";\n"],"sourceRoot":""}
{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromString","str","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","DIV","REM","POW","AND","OR","XOR","EQ","NE","GT","GE","LT","LE","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","length","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","assert","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","IDENTIFIER","flag","decoratorKindToFlag","stringToDecoratorKind","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","is","BUILTIN","isLibrary","SOURCE","globalName","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","OPERATOR","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","decoratorKind","DecoratorKind","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","toString","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","ENUM","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","_b","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","CUSTOM","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","g","eval","e","window","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","cachedNullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","typeRef","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","condExprPrecomp","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","compileAbort","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","argumentExpressions","thisArg","compileCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","ensureArgcVar","numOperands","isCallImport","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","Unreachable","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","explicitSimpleName","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","isI32Const","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray"],"mappings":"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AM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  stringToDecoratorKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n  INDEXED_GET,\r\n  INDEXED_SET,\r\n  UNCHECKED_INDEXED_GET,\r\n  UNCHECKED_INDEXED_SET,\r\n  ADD,\r\n  SUB,\r\n  MUL,\r\n  DIV,\r\n  REM,\r\n  POW,\r\n  AND,\r\n  OR,\r\n  XOR,\r\n  EQ,\r\n  NE,\r\n  GT,\r\n  GE,\r\n  LT,\r\n  LE\r\n}\r\n\r\nfunction operatorKindFromString(str: string): OperatorKind {\r\n  switch (str) {\r\n    case \"[]\" : return OperatorKind.INDEXED_GET;\r\n    case \"[]=\": return OperatorKind.INDEXED_SET;\r\n    case \"{}\" : return OperatorKind.UNCHECKED_INDEXED_GET;\r\n    case \"{}=\": return OperatorKind.UNCHECKED_INDEXED_SET;\r\n    case \"+\"  : return OperatorKind.ADD;\r\n    case \"-\"  : return OperatorKind.SUB;\r\n    case \"*\"  : return OperatorKind.MUL;\r\n    case \"/\"  : return OperatorKind.DIV;\r\n    case \"%\"  : return OperatorKind.REM;\r\n    case \"**\" : return OperatorKind.POW;\r\n    case \"&\"  : return OperatorKind.AND;\r\n    case \"|\"  : return OperatorKind.OR;\r\n    case \"^\"  : return OperatorKind.XOR;\r\n    case \"==\" : return OperatorKind.EQ;\r\n    case \"!=\" : return OperatorKind.NE;\r\n    case \">\"  : return OperatorKind.GT;\r\n    case \">=\" : return OperatorKind.GE;\r\n    case \"<\"  : return OperatorKind.LT;\r\n    case \"<=\" : return OperatorKind.LE;\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\r\n        if (element) this.elementsLookup.set(alias, element);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.name.kind == NodeKind.IDENTIFIER) {\r\n        let name = (<IdentifierExpression>decorator.name).text;\r\n        let kind = stringToDecoratorKind(name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, name\r\n            );\r\n          } else if (presentFlags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, name\r\n            );\r\n          } else {\r\n            presentFlags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.OPERATOR |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              let kind = operatorKindFromString((<StringLiteralExpression>firstArg).value);\r\n              if (kind == OperatorKind.INVALID) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  firstArg.range\r\n                );\r\n              } else {\r\n                let overloads = classPrototype.overloadPrototypes;\r\n                if (overloads.has(kind)) {\r\n                  this.error(\r\n                    DiagnosticCode.Duplicate_function_implementation,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  prototype.operatorKind = kind;\r\n                  overloads.set(kind, prototype);\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      declaration.name.text,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators,\r\n              DecoratorFlags.GLOBAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        let member: Element | null;\r\n        if (members && (member = members.get(propertyName))) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = null;\r\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is an operator overload. */\r\n  OPERATOR = 1 << 1,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 2,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 3,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 4\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR: return DecoratorFlags.OPERATOR;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration,\r\n                instance\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9,\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 10,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 11\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Scoped global variables. */\r\n  // scopedGlobals: Map<Local,Global> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.RETURNS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (this.is(FlowFlags.THROWS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (this.is(FlowFlags.ALLOCATES)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Adds a scoped global for an outer scoped local. */\r\n  // addScopedGlobal(scopedLocal: Local): Global {\r\n  //   var scopedGlobals = this.scopedGlobals;\r\n  //   var scopedGlobal: Global | null;\r\n  //   if (!scopedGlobals) {\r\n  //     this.scopedGlobals = scopedGlobals = new Map();\r\n  //   } else {\r\n  //     scopedGlobal = scopedGlobals.get(scopedLocal);\r\n  //     if (scopedGlobal) return scopedGlobal;\r\n  //   }\r\n  //   scopedGlobal = new Global(\r\n  //     scopedLocal.program,\r\n  //     scopedLocal.simpleName,\r\n  //     this.currentFunction.internalName + INNER_DELIMITER + scopedLocal.internalName,\r\n  //     scopedLocal.type,\r\n  //     assert(scopedLocal.declaration)\r\n  //   );\r\n  //   scopedGlobals.set(scopedLocal, scopedGlobal);\r\n  //   return scopedGlobal;\r\n  // }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr)) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = expression.kind == NodeKind.IDENTIFIER\r\n      ? stringToDecoratorKind((<IdentifierExpression>expression).text)\r\n      : DecoratorKind.CUSTOM;\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE\r\n}\r\n\r\n/** Returns the decorator kind represented by the specified string. */\r\nexport function stringToDecoratorKind(str: string): DecoratorKind {\r\n  switch (str) {\r\n    case \"global\": return DecoratorKind.GLOBAL;\r\n    case \"operator\": return DecoratorKind.OPERATOR;\r\n    case \"unmanaged\": return DecoratorKind.UNMANAGED;\r\n    case \"sealed\": return DecoratorKind.SEALED;\r\n    case \"inline\": return DecoratorKind.INLINE;\r\n    default: return DecoratorKind.CUSTOM;\r\n  }\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let expression = decorators[i].name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType ? \"u32\" : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType ? \"usize\" : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getGenericParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (!source) {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileSource(source);\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              assert(global.declaration).range\r\n            );\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType: Type = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\r\n        flow.set(FlowFlags.RETURNS);\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      if (signature.requiredParameters < signature.parameterTypes.length) {\r\n        // export the trampoline if the function takes optional parameters\r\n        instance = this.ensureTrampoline(instance);\r\n        this.ensureArgcSet();\r\n      }\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        assert(false);\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n    var stmtThrows = flow.is(FlowFlags.THROWS);\r\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\r\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\r\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\r\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint\r\n    if (alwaysReturns || alwaysThrows) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        _BinaryenExpressionGetId(condExprPrecomp) == ExpressionId.Const &&\r\n        _BinaryenExpressionGetType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return _BinaryenConstGetValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = makeIsTrueish(\r\n          this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n          this.currentType,\r\n          module\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\r\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    var ifFalseThrows = false;\r\n    var ifFalseAllocates = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\r\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n\r\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\r\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\r\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // When inlining, break to the end of the inlined function's block\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (statement.value) {\r\n        expression = this.compileExpression(\r\n          statement.value,\r\n          assert(flow.returnType)\r\n        );\r\n      }\r\n      return module.createBreak(assert(flow.returnLabel), 0, expression);\r\n    }\r\n\r\n    // Otherwise return as usual\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        flow.returnType\r\n      );\r\n    }\r\n    return module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\r\n        alwaysThrows = false;\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\r\n        alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          flow.addScopedLocal(type, name, declaration); // reports\r\n        } else {\r\n          currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (init) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        _BinaryenExpressionGetId(condExprPrecomp) == ExpressionId.Const &&\r\n        _BinaryenExpressionGetType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!_BinaryenConstGetValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = makeIsTrueish(\r\n          this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n          this.currentType,\r\n          module\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SHORT) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EQUALS_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EXCLAMATION_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must be wrapped\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.POW);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType == Type.f32) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType\r\n          );\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            left\r\n          );\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64\r\n          );\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.REM);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.AND);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.OR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.XOR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n      // checks and recompiles the argument according to its actual annotated type\r\n      var argumentExpressions: Expression[];\r\n      var thisArg: ExpressionRef = 0;\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(operatorInstance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        thisArg = this.compileExpression(value, (<Class>parent).type);\r\n        argumentExpressions = [];\r\n      } else {\r\n        argumentExpressions = [ value ];\r\n      }\r\n      return this.compileCallDirect(\r\n        operatorInstance,\r\n        argumentExpressions,\r\n        reportNode,\r\n        thisArg,\r\n        operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n      );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // checks and recompiles the arguments according to their actual annotated types\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = this.compileExpression(left, (<Class>parent).type);\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ];\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var elementType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          elementType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>target).type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32\r\n          );\r\n          if (tee) {\r\n            let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n            let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameterTypes;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameterTypes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (_BinaryenExpressionGetId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          _BinaryenGetLocalGetIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\");\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n      if (_BinaryenExpressionGetId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          _BinaryenGetLocalGetIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(parameterTypes[i], signature.getParameterName(i));\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let argumentLocal = flow.addScopedLocal(parameterTypes[i], signature.getParameterName(i));\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index,\r\n          this.compileExpression(\r\n            assert(declaration.signature.parameterTypes[i].initializer),\r\n            parameterTypes[i]\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) { // it's ok to unwrap the block here\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        body.push(this.compileStatement(statements[i]));\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches return\r\n    if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n      if (!isCallImport) { // call the trampoline\r\n        instance = this.ensureTrampoline(instance);\r\n        if (!this.compileFunction(instance)) return module.createUnreachable();\r\n        let nativeReturnType = returnType.toNativeType();\r\n        this.currentType = returnType;\r\n        return module.createBlock(null, [\r\n          module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n          module.createCall(instance.internalName, operands, nativeReturnType)\r\n        ], nativeReturnType);\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return isCallImport\r\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\r\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType());\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type);\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                makeConditionalAllocate(this, <Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          this.currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    var elementCount = expressions.length;\r\n    if (elementCount) { // non-empty static or dynamic\r\n      let nativeElementType = elementType.toNativeType();\r\n      let values: usize;\r\n      let byteLength: usize;\r\n      switch (nativeElementType) {\r\n        case NativeType.I32: {\r\n          values = changetype<usize>(new Int32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          values = changetype<usize>(new Array<I64>(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          values = changetype<usize>(new Float32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          values = changetype<usize>(new Float64Array(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // precompute value expressions\r\n      let exprs = new Array<ExpressionRef>(elementCount);\r\n      let expr: BinaryenExpressionRef;\r\n      for (let i = 0; i < elementCount; ++i) {\r\n        exprs[i] = expressions[i]\r\n          ? this.compileExpression(<Expression>expressions[i], elementType)\r\n          : elementType.toNativeZero(module);\r\n        if (isStatic) {\r\n          expr = this.precomputeExpressionRef(exprs[i]);\r\n          if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n            assert(_BinaryenExpressionGetType(expr) == nativeElementType);\r\n            switch (nativeElementType) {\r\n              case NativeType.I32: {\r\n                changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                changetype<I64[]>(values)[i] = i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false); // checked above\r\n              }\r\n            }\r\n          } else {\r\n            // TODO: emit a warning if declared 'const'\r\n            // if (isConst) {\r\n            //   this.warn(\r\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            //     reportNode.range\r\n            //   );\r\n            // }\r\n            isStatic = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let usizeTypeSize = this.options.usizeType.byteSize;\r\n      if (isStatic) { // non-empty, all elements can be precomputed\r\n\r\n        // Create a combined static memory segment composed of:\r\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n        let data = new Uint8Array(arraySize + bufferTotalSize);\r\n        let segment = this.addMemorySegment(data);\r\n        let offset = 0;\r\n\r\n        // write Array struct\r\n        if (usizeTypeSize == 8) {\r\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n          offset += 8;\r\n        } else {\r\n          assert(i64_high(segment.offset) == 0);\r\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n          offset += 4;\r\n        }\r\n        writeI32(elementCount, data, offset); // length_\r\n        offset += 4;\r\n        assert(offset == arraySize);\r\n\r\n        // write ArrayBuffer struct\r\n        writeI32(byteLength, data, offset);\r\n        offset += bufferHeaderSize; // incl. alignment\r\n\r\n        // write ArrayBuffer data\r\n        switch (nativeElementType) {\r\n          case NativeType.I32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        assert(offset <= arraySize + bufferTotalSize);\r\n\r\n        this.currentType = arrayType;\r\n        return usizeTypeSize == 8\r\n          ? module.createI64(\r\n              i64_low(segment.offset),\r\n              i64_high(segment.offset)\r\n            )\r\n          : module.createI32(\r\n              i64_low(segment.offset)\r\n            );\r\n\r\n      } else { // non-empty, some elements can't be precomputed\r\n\r\n        this.currentType = arrayType;\r\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n        if (!setter) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            reportNode.range, arrayInstance.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let nativeArrayType = arrayType.toNativeType();\r\n        let currentFunction = this.currentFunction;\r\n        let tempLocal = currentFunction.getTempLocal(arrayType);\r\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\r\n        let index = 0;\r\n        stmts[index++] = module.createSetLocal(tempLocal.index,\r\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n            module.createI32(0), // this\r\n            module.createI32(elementCount)\r\n          ])\r\n        );\r\n        for (let i = 0; i < elementCount; ++i) {\r\n          stmts[index++] = this.makeCallDirect(setter, [\r\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n            module.createI32(i),\r\n            exprs[i]\r\n          ]);\r\n        }\r\n        assert(index + 1 == stmts.length);\r\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n        currentFunction.freeTempLocal(tempLocal);\r\n        this.currentType = arrayType;\r\n        return module.createBlock(null, stmts, nativeArrayType);\r\n      }\r\n\r\n    } else { // empty, TBD: cache this somehow?\r\n      this.currentType = arrayType;\r\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(0)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      currentFunction.flow.contextualTypeArguments,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = makeAllocate(this, classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        _BinaryenExpressionGetId(condExprPrecomp) == ExpressionId.Const &&\r\n        _BinaryenExpressionGetType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return _BinaryenConstGetValueI32(condExprPrecomp)\r\n          ? this.compileExpression(ifThen, contextualType)\r\n          : this.compileExpression(ifElse, contextualType);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = makeIsTrueish(\r\n          this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n          this.currentType,\r\n          this.module\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n    var ifThenType: Type;\r\n    var ifElseType: Type;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType);\r\n      ifThenType = this.currentType;\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType);\r\n      ifElseType = this.currentType;\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType);\r\n      ifThenType = this.currentType;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType);\r\n      ifElseType = this.currentType;\r\n    }\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, ConversionKind.IMPLICIT, ifThen);\r\n    ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, ConversionKind.IMPLICIT, ifElse);\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    if (_BinaryenExpressionGetId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, explicitSimpleName: string | null = null): string {\r\n  var simpleName = explicitSimpleName != null\r\n    ? explicitSimpleName\r\n    : element.simpleName;\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n\r\n/** Makes an allocation expression for an instance of the specified class. */\r\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n  var currentFunction = compiler.currentFunction;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n\r\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\r\n\r\n  // allocate the necessary memory\r\n  var initializers = new Array<ExpressionRef>();\r\n  initializers.push(\r\n    module.createSetLocal(tempLocal.index,\r\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n\r\n  // apply field initializers\r\n  if (classInstance.members) {\r\n    for (let member of classInstance.members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        let field = <Field>member;\r\n        let fieldType = field.type;\r\n        let nativeFieldType = fieldType.toNativeType();\r\n        let fieldDeclaration = field.prototype.declaration;\r\n        assert(!field.isAny(CommonFlags.CONST));\r\n        if (fieldDeclaration.initializer) { // use initializer\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        } else { // initialize with zero\r\n          // TODO: might be unnecessary if the ctor initializes the field\r\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter\r\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n              : fieldType.toNativeZero(module),\r\n              nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // return `this`\r\n  initializers.push(\r\n    module.createGetLocal(tempLocal.index, nativeSizeType)\r\n  );\r\n\r\n  currentFunction.freeTempLocal(tempLocal);\r\n  compiler.currentType = classInstance.type;\r\n  return module.createBlock(null, initializers, nativeSizeType);\r\n}\r\n\r\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  // requires that `this` is the first local\r\n  var module = compiler.module;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  compiler.currentType = classInstance.type;\r\n  return module.createIf(\r\n    nativeSizeType == NativeType.I64\r\n      ? module.createBinary(\r\n          BinaryOp.NeI64,\r\n          module.createGetLocal(0, NativeType.I64),\r\n          module.createI64(0)\r\n        )\r\n      : module.createGetLocal(0, NativeType.I32),\r\n    module.createGetLocal(0, nativeSizeType),\r\n    module.createTeeLocal(0,\r\n      makeAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n}\r\n\r\nexport function isI32Const(expr: ExpressionRef): bool {\r\n  return _BinaryenExpressionGetId(expr) == ExpressionId.Const\r\n      && _BinaryenExpressionGetType(expr) == NativeType.I32;\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  File_0_not_found = 6054\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].internalPath == internalPath) return;\r\n    }\r\n    this.seenlog.add(internalPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn, isConstructor);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"public\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"protected\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PROTECTED;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"private\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PRIVATE;\r\n    }\r\n    if (tn.skip(Token.READONLY)) {\r\n      if (!startRange) startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"readonly\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.READONLY;\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  private includePrivate: bool;\r\n  /** Already seen elements. */\r\n  private seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else assert(false);\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n    } else if (element.is(CommonFlags.SET)) {\r\n      sb.push(\"set \");\r\n      sb.push(element.prototype.declaration.name.text);\r\n    } else {\r\n      if (!element.is(CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    /* TBD: the compiler implicitly generates setters if the class is exported\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"get \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(): \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    if (!element.is(CommonFlags.READONLY)) {\r\n      indent(sb, this.indentLevel);\r\n      if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n      if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n      if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n      sb.push(\"set \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\"(\");\r\n      sb.push(element.simpleName);\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(element.type));\r\n      sb.push(\");\\n\");\r\n    }\r\n    */\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags\r\n} from \"./program\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      let type: Type;\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type);\r\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, false);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, false);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0)) return 0;\r\n\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\r\n    HEAP.copyWithin(dest, src, src + size);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, value, offset) {\r\n    HEAP[ptr + (offset | 0)] = value;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr, offset) {\r\n    return HEAP[ptr + (offset | 0)];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}
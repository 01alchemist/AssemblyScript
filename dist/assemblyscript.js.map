{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","Error","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","flag","decoratorKindToFlag","decoratorNameToKind","Duplicate_decorator","toString","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","is","BUILTIN","isLibrary","SOURCE","globalName","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameters","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","localName","ENUM","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","enterBranchOrScope","branch","slice","leaveBranchOrScope","propagate","_b","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","g","eval","e","window","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","features","hasFeature","feature","Feature","ConversionKind","WrapMode","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","count","Nop","blockFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","repeatLabel","alwaysTrue","compileExpressionRetainType","condPre","incrExpr","bodyExpr","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifFalseFlow","ifTrueExpr","ifFalseExpr","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","terminated","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray"],"mappings":"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M,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low\r\n} from \"./module\";\r\nimport { CharCode } from \"./util\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        if (!name.length) continue; // explicitly disabled\r\n        let element = this.elementsLookup.get(name);\r\n        if (element) this.elementsLookup.set(alias, element);\r\n        else throw new Error(\"element not found: \" + name);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      declaration.name.text,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators,\r\n              DecoratorFlags.GLOBAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n    if (\r\n      (element = this.elementsLookup.get(localName)) || // file-global\r\n      (element = this.elementsLookup.get(globalName))   // program-global\r\n    ) {\r\n      switch (element.kind) {\r\n        case ElementKind.ENUM: return Type.i32;\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        let member: Element | null;\r\n        if (members && (member = members.get(propertyName))) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = null;\r\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration,\r\n                instance\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9,\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 10,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 11,\r\n  /** This branch returns a properly wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 12,\r\n\r\n  /** This branch is terminated if any of these flags is set. */\r\n  TERMINATED = FlowFlags.RETURNS | FlowFlags.THROWS | FlowFlags.BREAKS | FlowFlags.CONTINUES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(propagate: bool = true): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate conditionaal flags to parent\r\n    if (propagate) {\r\n      if (this.is(FlowFlags.RETURNS)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n      }\r\n      if (this.is(FlowFlags.THROWS)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n      }\r\n      if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n        parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n      }\r\n      if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n        parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n      }\r\n      if (this.is(FlowFlags.ALLOCATES)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n      }\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. on inner block). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. on then/else branches). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // flags set in both arms\r\n    this.flags |= left.flags & right.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(\r\n      left.wrappedLocals,\r\n      right.wrappedLocals\r\n    );\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possibly combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: {\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // never overflows because globals are wrapped on set\r\n      case ExpressionId.GetGlobal: return false;\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  var fromSize = fromType.byteSize;\r\n  var toSize = toType.byteSize;\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromSize > toSize\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocPtrArray(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0;\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeFunction(func: FunctionRef): void {\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    free_memory(this.cachedByValue);\r\n    free_memory(this.cachedTemporaryName);\r\n    free_memory(this.cachedPrecomputeName);\r\n    free_memory(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let expression = decorators[i].name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\r\n  }\r\n\r\n  skipIdentifierName(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the int type of this type. Defaults to `Type.i32` if this is not an int type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32:\r\n      case TypeKind.I64:\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.U64:\r\n      case TypeKind.USIZE: return this;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType ? \"u32\" : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType ? \"usize\" : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getFunctionBody,\r\n  getGetLocalIndex\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = [];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(\r\n            declaration.initializer,\r\n            global.type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          );\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = getExpressionType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              getConstValueI64Low(initExpr),\r\n              getConstValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(\r\n              <Expression>valueDeclaration.value,\r\n              Type.i32,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            );\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (getExpressionType(initExpr) == NativeType.I32) {\r\n              val.constantValue = getConstValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      if (signature.requiredParameters < signature.parameterTypes.length) {\r\n        // export the trampoline if the function takes optional parameters\r\n        instance = this.ensureTrampoline(instance);\r\n        this.ensureArgcSet();\r\n      }\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    var count = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n        stmts[count++] = stmt;\r\n        if (flow.isAny(FlowFlags.TERMINATED)) break;\r\n      }\r\n    }\r\n    stmts.length = count;\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var blockFlow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = blockFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts, NativeType.None);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = blockFlow.leaveBranchOrScope();\r\n    this.currentFunction.flow = parentFlow;\r\n    parentFlow.inherit(blockFlow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it?\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = true;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = this.precomputeExpressionRef(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyExpr = this.compileStatement(statement.statement);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = flow.leaveBranchOrScope();\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    currentFunction.flow = parentFlow;\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (parentFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel,\r\n        module.createBlock(null, repeatBlock, NativeType.None)\r\n      )\r\n    );\r\n\r\n    var expr = module.createBlock(breakLabel, breakBlock, NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint for Binaryen\r\n    if (flow.isAny(FlowFlags.RETURNS | FlowFlags.THROWS)) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.leaveBranchOrScope();\r\n\r\n    var ifFalseFlow: Flow | null;\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      ifFalseFlow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      let parentFlow = ifFalseFlow.leaveBranchOrScope();\r\n      currentFunction.flow = parentFlow;\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.TERMINATED)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope(false);\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.precomputeExpressionRef(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(getConstValueI32(initExpr), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  getConstValueI64Low(initExpr),\r\n                  getConstValueI64High(initExpr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          flow.isAny(FlowFlags.CONTINUES | FlowFlags.BREAKS | FlowFlags.RETURNS)\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = getFunctionBody(funcRef);\r\n    module.removeTemporaryFunction();\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var elementType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          elementType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.TERMINATED)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.TERMINATED)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer && initializer.kind == NodeKind.LITERAL)) {\r\n          // TODO: other kinds might be constant as well\r\n          // NOTE: if the initializer is missing this is reported in ensureTrampoline below\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    return ret;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.program.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return this.module.createUnreachable();\r\n    return this.module.createI32(type.isAssignableTo(isType, false) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    var elementCount = expressions.length;\r\n    if (elementCount) { // non-empty static or dynamic\r\n      let nativeElementType = elementType.toNativeType();\r\n      let values: usize;\r\n      let byteLength: usize;\r\n      switch (nativeElementType) {\r\n        case NativeType.I32: {\r\n          values = changetype<usize>(new Int32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          values = changetype<usize>(new Array<I64>(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          values = changetype<usize>(new Float32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          values = changetype<usize>(new Float64Array(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // precompute value expressions\r\n      let exprs = new Array<ExpressionRef>(elementCount);\r\n      let expr: BinaryenExpressionRef;\r\n      for (let i = 0; i < elementCount; ++i) {\r\n        exprs[i] = expressions[i]\r\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          : elementType.toNativeZero(module);\r\n        if (isStatic) {\r\n          expr = this.precomputeExpressionRef(exprs[i]);\r\n          if (getExpressionId(expr) == ExpressionId.Const) {\r\n            assert(getExpressionType(expr) == nativeElementType);\r\n            switch (nativeElementType) {\r\n              case NativeType.I32: {\r\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                changetype<I64[]>(values)[i] = i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\r\n                break;\r\n              }\r\n              default: assert(false); // checked above\r\n            }\r\n          } else {\r\n            // TODO: emit a warning if declared 'const'\r\n            // if (isConst) {\r\n            //   this.warn(\r\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            //     reportNode.range\r\n            //   );\r\n            // }\r\n            isStatic = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let usizeTypeSize = this.options.usizeType.byteSize;\r\n      if (isStatic) { // non-empty, all elements can be precomputed\r\n\r\n        // Create a combined static memory segment composed of:\r\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n        let data = new Uint8Array(arraySize + bufferTotalSize);\r\n        let segment = this.addMemorySegment(data);\r\n        let offset = 0;\r\n\r\n        // write Array struct\r\n        if (usizeTypeSize == 8) {\r\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n          offset += 8;\r\n        } else {\r\n          assert(i64_high(segment.offset) == 0);\r\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n          offset += 4;\r\n        }\r\n        writeI32(elementCount, data, offset); // length_\r\n        offset += 4;\r\n        assert(offset == arraySize);\r\n\r\n        // write ArrayBuffer struct\r\n        writeI32(byteLength, data, offset);\r\n        offset += bufferHeaderSize; // incl. alignment\r\n\r\n        // write ArrayBuffer data\r\n        switch (nativeElementType) {\r\n          case NativeType.I32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        assert(offset <= arraySize + bufferTotalSize);\r\n\r\n        this.currentType = arrayType;\r\n        return usizeTypeSize == 8\r\n          ? module.createI64(\r\n              i64_low(segment.offset),\r\n              i64_high(segment.offset)\r\n            )\r\n          : module.createI32(\r\n              i64_low(segment.offset)\r\n            );\r\n\r\n      } else { // non-empty, some elements can't be precomputed\r\n\r\n        this.currentType = arrayType;\r\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n        if (!setter) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            reportNode.range, arrayInstance.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let nativeArrayType = arrayType.toNativeType();\r\n        let currentFunction = this.currentFunction;\r\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\r\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\r\n        let index = 0;\r\n        stmts[index++] = module.createSetLocal(tempLocal.index,\r\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n            module.createI32(0), // this\r\n            module.createI32(elementCount)\r\n          ])\r\n        );\r\n        for (let i = 0; i < elementCount; ++i) {\r\n          stmts[index++] = this.makeCallDirect(setter, [\r\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n            module.createI32(i),\r\n            exprs[i]\r\n          ]);\r\n        }\r\n        assert(index + 1 == stmts.length);\r\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n        currentFunction.freeTempLocal(tempLocal);\r\n        this.currentType = arrayType;\r\n        return module.createBlock(null, stmts, nativeArrayType);\r\n      }\r\n\r\n    } else { // empty, TBD: cache this somehow?\r\n      this.currentType = arrayType;\r\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(0)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      currentFunction.flow.contextualTypeArguments,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = this.makeAllocate(classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n    var ifThenType: Type;\r\n    var ifElseType: Type;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n    }\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        module.createBinary(op,\r\n          getValue,\r\n          nativeOne\r\n        ),\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\r\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      ),\r\n      false\r\n    );\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0x1)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileBuiltinAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifierName()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifierName()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags\r\n} from \"./program\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    program.info(\r\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\r\n      reportNode.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0)) return 0;\r\n\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\r\n    HEAP.copyWithin(dest, src, src + size);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, value, offset) {\r\n    HEAP[ptr + (offset | 0)] = value;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr, offset) {\r\n    return HEAP[ptr + (offset | 0)];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}
{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","sources","__extends","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","k","length","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","resolved","resolveIdentifier","ElementKind","CLASS_PROTOTYPE","A_class_may_only_extend_another_class","basePrototype","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","checkGlobalOptions","parentNode","is","CommonFlags","GLOBAL","source","isLibrary","SOURCE","simpleName","has","Duplicate_identifier_0","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","programLevelInternalName","instance","resolve","type","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnSubtract","fnMultiply","fnDivide","fnFractional","fnBitwiseAnd","fnBitwiseOr","fnBitwiseXor","fnEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","resolvedElement","ResolvedElement","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","resolveExpression","targetType","target","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","withTarget","base","resolveElementAccess","elementAccess","indexedGetName","indexedGet","FUNCTION_PROTOTYPE","Index_signature_is_missing_in_type_0","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","memberOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","apply","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","contextualTypeArguments_1","contextualTypeArguments_1_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","SEALED","Class_0_is_sealed_and_cannot_be_extended","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","partialGetterPrototype","partialSetterPrototype","asClass","_b","baseType","isAssignableTo","current","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","scopedLocal","addScopedLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","normalizedPath","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","g","eval","e","window","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","nullableType","ceil","nonNullableType","computeSmallIntegerShift","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argumentCountRef","files","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","typeRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","entries","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","COMPILED","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","ensureTrampoline","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","operatorName","compileOperatorOverload","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","fmodPrototype","fmodInstance","makeCallDirect","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","operatorPrototype","operatorInstance","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","resolvedIndexedSet","valueExpr","valueWithCorrectType","tee","isInstanceTarget","targetExpr","setterInstance","thisArg","getterInstance","nativeReturnType","setElementName","setElement","elementExpr","tempLocalTarget","tempLocalElement","Index_signature_in_type_0_only_permits_reading","indexArg","compileCall","compileCallDirect","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","numArgumentsInclThis","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","numOperands","isCallImport","ensureArgumentCount","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayPrototype","arrayType","memorySize","elementSize","Int32Array","Float32Array","Float64Array","usizeTypeSize","headerSize","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","makeAllocate","ifThenExpr","ifElseExpr","ifThenAllocates","ifElseAllocates","nativeOne","setValue","getValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClass","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","Unreachable","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","evaluateConstantOffset","NaN","Infinity","Type_0_is_not_generic","stringPrototype","stringInstance","tempLocal0","tempLocal1","fieldName","Type_0_has_no_property_1","abort","compileAbort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","off","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","sqrt","trunc","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray","y"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,QAAA,YAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA2CA,OAtCAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAA1B,GACAqB,OAAAC,eAAAtB,EAAA,cAAiD2B,OAAA,KAIjDlB,EAAAmB,EAAA,SAAA3B,GACA,IAAAkB,EAAAlB,KAAA4B,WACA,WAA2B,OAAA5B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,GAIAzB,IAAA0B,EAAA,i3BC1DA,IAAAC,EAAA3B,EAAA,GAMA4B,EAAA5B,EAAA,GAOA6B,EAAA7B,EAAA,GA8CA8B,EAAA9B,EAAA,GAOaT,EAAAwC,eAAiB,IAEjBxC,EAAAyC,aAAe,KAEfzC,EAAA0C,cAAgB,OAEhB1C,EAAA2C,cAAgB,OAEhB3C,EAAA4C,mBAAqB,IAErB5C,EAAA6C,iBAAmB,IAEnB7C,EAAA8C,cAAgB,QAEhB9C,EAAA+C,eAAiB/C,EAAA8C,cAAgB9C,EAAAwC,eAG9C,IAAAQ,EAAA,WAIA,OAJA,gBAOAC,EAAA,WAKA,OALA,gBAQAC,EAAA,WAGA,OAHA,gBAKMC,EAAa,IAAIC,IAGvBC,EAAA,SAAAC,GAoBE,SAAAD,EAAYE,QAAA,IAAAA,MAAA,MAAZ,IAAAC,EACEF,EAAAxC,KAAAR,KAAMiD,IAAYjD,YAhBpBkD,EAAAC,kBAAyB,EAIzBD,EAAAE,eAAsC,IAAIN,IAE1CI,EAAAG,YAAgCR,EAEhCK,EAAAI,YAAqC,IAAIR,IAEzCI,EAAAK,iBAAwC,IAAIT,IAE5CI,EAAAM,mBAA0C,IAAIV,IAK5CI,EAAKO,aAmyDT,OAzzD6BC,EAAAX,EAAAC,GA0B3BD,EAAArB,UAAAiC,WAAA,SAAWC,GACT5D,KAAK4D,QAAUA,EACf5D,KAAKqD,YAAc,IAAIP,MACpB,KAAMf,EAAA8B,KAAKC,KACX,MAAO/B,EAAA8B,KAAKE,MACZ,MAAOhC,EAAA8B,KAAKG,MACZ,MAAOjC,EAAA8B,KAAKI,MACZ,QAASL,EAAQM,YACjB,KAAMnC,EAAA8B,KAAKM,KACX,MAAOpC,EAAA8B,KAAKO,MACZ,MAAOrC,EAAA8B,KAAKQ,MACZ,MAAOtC,EAAA8B,KAAKS,MACZ,QAASV,EAAQW,YACjB,OAAQxC,EAAA8B,KAAKW,OACb,MAAOzC,EAAA8B,KAAKY,MACZ,MAAO1C,EAAA8B,KAAKa,MACZ,OAAQ3C,EAAA8B,KAAKc,OACb,SAAU5C,EAAA8B,KAAKa,MACf,UAAW3C,EAAA8B,KAAKW,QAQnB,IALA,IAAII,EAAgB,IAAI9B,IACpB+B,EAAgB,IAAIC,MACpBC,EAAuB,IAAID,MAGtBzE,EAAI,EAAG2E,EAAIhF,KAAKyD,QAAQwB,OAAQ5E,EAAI2E,IAAK3E,EAGhD,IAFA,IACI6E,EADSlF,KAAKyD,QAAQpD,GACF6E,WACfC,EAAI,EAAG7E,EAAI4E,EAAWD,OAAQE,EAAI7E,IAAK6E,EAAG,CACjD,IAAIC,EAAYF,EAAWC,GAC3B,OAAQC,EAAUC,MAChB,KAAKrD,EAAAsD,SAASC,iBACZvF,KAAKwF,gBAAkCJ,EAAWL,GAClD,MAEF,KAAK/C,EAAAsD,SAASG,gBACZzF,KAAK0F,eAAgCN,GACrC,MAEF,KAAKpD,EAAAsD,SAASK,OACZ3F,KAAK4F,kBAAmCR,EAAWR,GACnD,MAEF,KAAK5C,EAAAsD,SAASO,oBACZ7F,KAAK8F,mBAAwCV,GAC7C,MAEF,KAAKpD,EAAAsD,SAASS,OACZ/F,KAAKgG,kBAAmCZ,EAAWR,EAAeC,GAClE,MAEF,KAAK7C,EAAAsD,SAASW,qBACZjG,KAAKkG,oBAA0Cd,GAC/C,MAEF,KAAKpD,EAAAsD,SAASa,qBACZnG,KAAKoG,oBAA0ChB,EAAWL,GAC1D,MAEF,KAAK/C,EAAAsD,SAASe,gBACZrG,KAAKsG,oBAAqClB,GAC1C,MAEF,KAAKpD,EAAAsD,SAASiB,SACZvG,KAAKwG,oBAAuCpB,IAQpD,IAAS/E,EAAI,EAAGA,EAAIwE,EAAcI,QAAS,CACzC,IAAIwB,EAAe5B,EAAcxE,IAC7BqG,EAAU1G,KAAK2G,iBAAiBF,EAAaG,eAAgBhC,KAE/D5E,KAAKoD,eAAeyD,IAAIJ,EAAaK,aAAcJ,GACnD7B,EAAckC,OAAO1G,EAAG,KAEpBqG,EAAU1G,KAAK2G,iBAAiBF,EAAaO,kBAAmBpC,KAClE5E,KAAKoD,eAAeyD,IAAIJ,EAAaK,aAAcJ,GACnD7B,EAAckC,OAAO1G,EAAG,KAExBL,KAAKiH,MACHnF,EAAAoF,eAAeC,kCACfV,EAAaW,YAAYC,MACPZ,EAAaW,YAAYE,OAAQC,KAAKlG,MACxDoF,EAAaW,YAAYI,aAAaC,QAEtCpH,OAMR,IAAuC,IAAAqH,EAAAC,EAAA/C,GAAagD,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAA,CAA3C,IAAAE,EAAAC,EAAAJ,EAAAvG,MAAA,GAAC4G,EAAAF,EAAA,GAAYG,EAAAH,EAAA,GAChBI,EAAqCD,EACrCxB,OAAO,EACX,EAAG,CACD,IAAIyB,EAAcC,WAkBX,EAGF1B,EAAU1G,KAAKoD,eAAejC,IAAIgH,EAAcvB,mBAEhDF,EAAU1G,KAAKoD,eAAejC,IAAIgH,EAAcE,OAAOzH,KAAK6G,OAE7DzH,KAAKsI,yBACHL,EACAvB,EACAyB,EAAcE,OAAOb,cAGvBxH,KAAKiH,MACHnF,EAAAoF,eAAeqB,mBACfL,EAAaG,OAAOhB,MAAOa,EAAaG,OAAOzH,KAAK6G,MAGxD,MAnCA,GAAIf,EAAU1G,KAAKuD,iBAAiBpC,IAAIgH,EAAcvB,gBAAiB,CACrE5G,KAAKsI,yBACHL,EACAvB,EACAyB,EAAcE,OAAOb,cAEvB,OAEFW,EAAgBvD,EAAczD,IAAIgH,EAAcvB,kBAE9C5G,KAAKiH,MACHnF,EAAAoF,eAAeC,kCACfe,EAAaG,OAAOb,aAAaH,MACWa,EAAaG,OAAOf,OAAQC,KAAMlG,MAC9E6G,EAAaG,OAAOb,aAAaC,YAuBhCU,qGAIX,IAAS9H,EAAI,EAAG2E,EAAID,EAAqBE,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAC3D,IAAImI,EAAqBzD,EAAqB1E,GAAG+G,YAC7CqB,EAAcC,OAAOF,EAAmBG,aACxCC,EAAW5I,KAAK6I,kBAAkBJ,EAAY7H,KAAM,MACxD,GAAIgI,EAAU,CACZ,GAAIA,EAASlC,QAAQrB,MAAQyD,EAAYC,gBAAiB,CACxD/I,KAAKiH,MACHnF,EAAAoF,eAAe8B,sCACfP,EAAYpB,OAEd,SAEFtC,EAAqB1E,GAAG4I,cACNL,EAASlC,SAM/B,YAAIwC,EAAgBtF,EAAQsF,cAC5B,GAAIA,MACF,IAA0B,IAAAC,EAAAxB,EAAAuB,GAAaE,EAAAD,EAAAtB,QAAAuB,EAAAtB,KAAAsB,EAAAD,EAAAtB,OAAA,CAA9B,IAAAwB,EAAArB,EAAAoB,EAAA/H,MAAA,GAACiI,EAAAD,EAAA,GAAOzI,EAAAyI,EAAA,IACX3C,EAAU1G,KAAKoD,eAAejC,IAAIP,KACzBZ,KAAKoD,eAAeyD,IAAIyC,EAAO5C,uGAM1C3D,EAAArB,UAAAiF,iBAAR,SACEC,EACAhC,GAIA,IAFA,IAAI8B,EACAnD,EAAmBvD,KAAKuD,mBACzB,CACD,GAAImD,EAAUnD,EAAiBpC,IAAIyF,GAAiB,OAAOF,EAC3D,IAAIwB,EAAetD,EAAczD,IAAIyF,GACrC,IAAKsB,EAAc,OAAO,KAC1B,IAAIA,EAAaE,WAIjB,OAAOpI,KAAKoD,eAAejC,IAAI+G,EAAatB,gBAH1CA,EAAiBsB,EAAatB,iBAQ5B7D,EAAArB,UAAA6H,mBAAR,SACE7C,EACAU,GAEA,IAAIoC,EAAapC,EAAYE,OAC7B,GACEZ,EAAQ+C,GAAGC,EAAYC,SAErBvC,EAAYC,MAAMuC,OAAOC,WACzBnD,EAAQ+C,GAAGC,EAAY/D,UAErB+C,OAAOc,GAAYnE,MAAQrD,EAAAsD,SAASwE,QAE5BN,EAAYnE,MAAQrD,EAAAsD,SAASiB,UACnCmC,OAAcc,EAAYlC,QAAQjC,MAAQrD,EAAAsD,SAASwE,QAGzD,CACA,IAAIC,EAAa3C,EAAYxG,KAAK6G,KAC9BzH,KAAKoD,eAAe4G,IAAID,GAC1B/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOX,EAAQI,eAGlCJ,EAAQG,IAAI6C,EAAYC,QACxB3J,KAAKoD,eAAeyD,IAAIkD,EAAYrD,GAChCA,EAAQ+C,GAAGC,EAAYQ,WACzBxD,EAAQI,aAAeiD,MAMvBhH,EAAArB,UAAA8D,gBAAR,SACE4B,EACArC,EACAoF,QAAA,IAAAA,MAAA,MAEA,IAAIrD,EAAeM,EAAYgD,sBAC/B,GAAIpK,KAAKoD,eAAe4G,IAAIlD,GAC1B9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,OAH5B,CAOA,IAAIiD,EAAa3C,EAAYxG,KAAK6G,KAC9B/F,EAAY,IAAI2I,EAClBrK,KACA+J,EACAjD,EACAM,GAEF1F,EAAUyI,UAAYA,EACtBnK,KAAKoD,eAAeyD,IAAIC,EAAcpF,GAEtC,IAAI4I,EAAkBlD,EAAYkD,gBAC9BC,EAAqBD,EAAgBrF,OACzC,GAAIvD,EAAU+H,GAAGC,EAAYc,WACvBF,GAAmBC,GACrBvK,KAAKiH,MACHnF,EAAAoF,eAAeuD,oCACfzI,EAAA0I,MAAMC,KACJvD,EAAYxG,KAAKyG,MACjBiD,EAAgBC,EAAqB,GAAGlD,aAIzC,GAAIkD,EACT,IAAK,IAAIlK,EAAI,EAAGA,EAAIkK,IAAsBlK,EACxCL,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfN,EAAgBjK,GAAGgH,OAWzB,GALID,EAAYuB,aACd5D,EAAqB8F,KAAKnJ,GAIxByI,EAAW,CACb,GAAIA,EAAUW,SACZ,GAAIX,EAAUW,QAAQd,IAAID,GAKxB,YAJA/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5BqD,EAAUW,QAAU,IAAIhI,IAE1BqH,EAAUW,QAAQjE,IAAIkD,EAAYrI,GAC9ByI,EAAUV,GAAGC,EAAYqB,gBACvBrJ,EAAU+H,GAAGC,EAAY/D,SAC3BjE,EAAUmF,IAAI6C,EAAYqB,oBAKzB,GAAIrJ,EAAU+H,GAAGC,EAAY/D,QAAS,CAC3C,GAAI3F,KAAKuD,iBAAiByG,IAAIlD,GAK5B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf5D,EAAYxG,KAAKyG,MAAOP,GAK5B,GADA9G,KAAKuD,iBAAiBsD,IAAIC,EAAcpF,GACpCA,EAAU+H,GAAGC,EAAY/D,SAAWyB,EAAYC,MAAMuC,OAAOqB,QAAS,CACxE,GAAIjL,KAAKwD,mBAAmBwG,IAAIlD,GAK9B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf5D,EAAYxG,KAAKyG,MAAOP,GAI5BpF,EAAUmF,IAAI6C,EAAYqB,eAC1B/K,KAAKwD,mBAAmBqD,IAAIC,EAAcpF,IAM9C,IADA,IAAIwJ,EAAqB9D,EAAY0D,QACrB9F,GAAP3E,EAAI,EAAO6K,EAAmBjG,QAAQ5E,EAAI2E,IAAK3E,EAAG,CACzD,IAAI8K,EAAoBD,EAAmB7K,GAC3C,OAAQ8K,EAAkB9F,MACxB,KAAKrD,EAAAsD,SAAS8F,iBACZpL,KAAKqL,gBAAkCF,EAAmBzJ,GAC1D,MAEF,KAAKM,EAAAsD,SAASgG,kBACRH,EAAkBI,MAAM7B,EAAY8B,IAAM9B,EAAY+B,KACxDzL,KAAK0L,mBAAsCP,EAAmBzJ,GAE9D1B,KAAK2L,iBAAoCR,EAAmBzJ,GAE9D,MAEF,QACE,MAAM,IAAIkK,MAAM,0BAQtB,GAHA5L,KAAKuJ,mBAAmB7H,EAAW0F,GAIjC1F,EAAU+H,GAAGC,EAAYC,SACA,UAAzBvC,EAAYxG,KAAK6G,KAEjB,GAAKzH,KAAKqD,YAAY2G,IAAI,UAIxBhK,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOD,EAAYyE,8BANH,CACnC,IAAIC,EAAWpK,EAAUqK,QAAQ,MAC7BD,GAAU9L,KAAKqD,YAAYwD,IAAI,SAAUiF,EAASE,SAUpDjJ,EAAArB,UAAA2J,gBAAR,SACEjE,EACA6E,GAEA,IAAIrL,EAAOwG,EAAYxG,KAAK6G,KACxBX,EAAeM,EAAYgD,sBAG/B,GAAIhD,EAAYqC,GAAGC,EAAYwC,QAAS,CACtC,GAAIlM,KAAKoD,eAAe4G,IAAIlD,GAK1B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,GAI5B,GAAImF,EAAenB,SACjB,GAAImB,EAAenB,QAAQd,IAAIpJ,GAK7B,YAJAZ,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5BmF,EAAenB,QAAU,IAAIhI,IAE/B,IAAIqJ,EAAc,IAAIC,EACpBpM,KACAY,EACAkG,EACAM,EACArF,EAAA8B,KAAKc,MAEPsH,EAAenB,QAAQjE,IAAIjG,EAAMuL,GACjCnM,KAAKoD,eAAeyD,IAAIC,EAAcqF,OAGjC,CACL,GAAIF,EAAeI,iBACjB,GAAIJ,EAAeI,gBAAgBrC,IAAIpJ,GAKrC,YAJAZ,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5BmF,EAAeI,gBAAkB,IAAIvJ,IAEvC,IAAIwJ,EAAgB,IAAIC,EACtBN,EACArL,EACAkG,EACAM,GAEF6E,EAAeI,gBAAgBxF,IAAIjG,EAAM0L,KAIrCvJ,EAAArB,UAAAiK,iBAAR,SACEvE,EACA6E,GAEA,IAAIlC,EAAa3C,EAAYxG,KAAK6G,KAC9BX,EAAeM,EAAYgD,sBAC3B1I,EAAsC,KAG1C,GAAI0F,EAAYqC,GAAGC,EAAYwC,QAAS,CAGtC,GAFAxD,OAAOtB,EAAYxG,KAAKyE,MAAQrD,EAAAsD,SAASkH,aAErCxM,KAAKoD,eAAe4G,IAAIlD,GAK1B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBAAwB7C,EAAYxG,KAAKyG,MACxDP,GAIJ,GAAImF,EAAenB,SACjB,GAAImB,EAAenB,QAAQd,IAAID,GAK7B,YAJA/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5BmF,EAAenB,QAAU,IAAIhI,IAE/BpB,EAAY,IAAI+K,EACdzM,KACA+J,EACAjD,EACAM,EACA6E,GAEFA,EAAenB,QAAQjE,IAAIkD,EAAYrI,GACvC1B,KAAKoD,eAAeyD,IAAIC,EAAcpF,GAClCuK,EAAexC,GAAGC,EAAYqB,gBAChCrJ,EAAUmF,IAAI6C,EAAYqB,mBAIvB,CACL,GAAIkB,EAAeI,iBACjB,GAAIJ,EAAeI,gBAAgBrC,IAAID,GAKrC,YAJA/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5BmF,EAAeI,gBAAkB,IAAIvJ,IAEvCpB,EAAY,IAAI+K,EACdzM,KACA+J,EACAjD,EACAM,EACA6E,GAKE7E,EAAYxG,KAAKyE,MAAQrD,EAAAsD,SAASkH,YAChCP,EAAeS,qBACjB1M,KAAKiH,MACHnF,EAAAoF,eAAeyF,qDACfvF,EAAYxG,KAAKyG,QAGnB3F,EAAUmF,IAAI6C,EAAY8C,aAC1BP,EAAeS,qBAAuBhL,GAGxCuK,EAAeI,gBAAgBxF,IAAIkD,EAAYrI,GAE7CuK,EAAexC,GAAGC,EAAYqB,gBAChCrJ,EAAUmF,IAAI6C,EAAYqB,eAI9B/K,KAAK4M,eAAexF,EAAYyF,WAAYnL,EAAWuK,IAGjDlJ,EAAArB,UAAAkL,eAAR,SACEC,EACAnL,EACAuK,GAMA,GAAIY,EACF,IAAK,IAAIxM,EAAI,EAAG2E,EAAI6H,EAAW5H,OAAQ5E,EAAI2E,IAAK3E,EAAG,CACjD,IAAIyM,EAAYD,EAAWxM,GAC3B,GAAIyM,EAAUC,eAAiB/K,EAAAgL,cAAcC,SAAU,CACrD,IAAKvL,EAAW,CACd1B,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfkC,EAAUzF,OAEZ,SAEF,IAAI6F,EAAUJ,EAAUK,WAAaL,EAAUK,UAAUlI,QAAU,EACnE,GAAe,GAAXiI,EAAc,CAChB,IAAIE,EAA0BN,EAAUK,UAAW,GACnD,GACEC,EAAS/H,MAAQrD,EAAAsD,SAAS+H,SACND,EAAUE,aAAetL,EAAAuL,YAAYC,OAEzD,OAAkCJ,EAAU/L,OAC1C,IAAK,KACH4K,EAAewB,aAAe/L,EAAUqI,WACxC,MAEF,IAAK,MACHkC,EAAeyB,aAAehM,EAAUqI,WACxC,MAEF,IAAK,IACHkC,EAAe0B,SAAWjM,EAAUqI,WACpC,MAEF,IAAK,IACHkC,EAAe2B,WAAalM,EAAUqI,WACtC,MAEF,IAAK,IACHkC,EAAe4B,WAAanM,EAAUqI,WACtC,MAEF,IAAK,IACHkC,EAAe6B,SAAWpM,EAAUqI,WACpC,MAEF,IAAK,IACHkC,EAAe8B,aAAerM,EAAUqI,WACxC,MAEF,IAAK,IACHkC,EAAe+B,aAAetM,EAAUqI,WACxC,MAEF,IAAK,IACHkC,EAAegC,YAAcvM,EAAUqI,WACvC,MAEF,IAAK,IACHkC,EAAeiC,aAAexM,EAAUqI,WACxC,MAEF,IAAK,KACHkC,EAAekC,SAAWzM,EAAUqI,WACpC,MAEF,QACE/J,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwC,EAAS/F,YAKfrH,KAAKiH,MACHnF,EAAAoF,eAAekH,wBACfhB,EAAS/F,YAIbrH,KAAKiH,MACHnF,EAAAoF,eAAemH,+BACfvB,EAAUzF,MAAO,IAAK6F,EAAQoB,SAAS,SAGlCxB,EAAUC,eAAiB/K,EAAAgL,cAAcuB,QAElDvO,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfkC,EAAUzF,SAOZtE,EAAArB,UAAAgK,mBAAR,SACEtE,EACA6E,GAEA,IAAIlC,EAAa3C,EAAYxG,KAAK6G,KAC9B+G,EAAuBpH,EAAYgD,sBACnCqE,EAAkBzO,KAAKoD,eAAejC,IAAIqN,GAC1CE,EAAWtH,EAAYqC,GAAGC,EAAY8B,KACtCmD,GAAQ,EACZ,GAAIF,GACF,GACEA,EAAgBpJ,MAAQyD,EAAY8F,UAI/B,OAHJF,EACcD,EAAiBI,gBACjBJ,EAAiBK,iBAOhC,YAJA9O,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOmH,QAK5BC,EAAkB,IAAIM,EACpB/O,KACA+J,EACAyE,EACAvC,GAEF0C,GAAQ,EAGV,IAAIK,GAAYN,EAAWhP,EAAA0C,cAAgB1C,EAAA2C,eAAiB0H,EAG5D,GAAI3C,EAAYqC,GAAGC,EAAYwC,QAAS,CACtC,IAAI+C,EAAahD,EAAenF,aAAepH,EAAA6C,iBAAmByM,EAClE,GAAIhP,KAAKoD,eAAe4G,IAAIiF,GAK1B,YAJAjP,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAO4H,GAI5B,IAAIC,EAAkB,IAAIzC,EACxBzM,KACAgP,EACAC,EACA7H,EACA,MAOF,GALIsH,EACSD,EAAiBI,gBAAkBK,EAEnCT,EAAiBK,gBAAkBI,EAE5CP,EAAO,CACT,GAAI1C,EAAenB,SACjB,GAAImB,EAAenB,QAAQd,IAAID,GAK7B,YAJA/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAO4H,QAK5BhD,EAAenB,QAAU,IAAIhI,IAE/BmJ,EAAenB,QAAQjE,IAAIkD,EAAY0E,QAEvC/F,OAAOuD,EAAenB,SAAWmB,EAAenB,QAAQd,IAAID,IAE9D/J,KAAKoD,eAAeyD,IAAI2H,EAAsBC,GAC1CxC,EAAexC,GAAGC,EAAYqB,gBAChC0D,EAAgB5H,IAAI6C,EAAYqB,mBAI7B,CACL,IAAIoE,EAAelD,EAAenF,aAAepH,EAAA4C,mBAAqB0M,EACtE,GAAI/C,EAAeI,iBACjB,GAAIJ,EAAeI,gBAAgBrC,IAAIgF,GAKrC,YAJAhP,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOmH,QAK5BvC,EAAeI,gBAAkB,IAAIvJ,IAEvC,IAAIsM,EAAoB,IAAI3C,EAC1BzM,KACAgP,EACAG,EACA/H,EACA6E,GAEEyC,EACSD,EAAiBI,gBAAkBO,EAEnCX,EAAiBK,gBAAkBM,EAEhDnD,EAAeI,gBAAgBxF,IAAImI,EAAUP,GAC7CzO,KAAKoD,eAAeyD,IAAI2H,EAAsBC,GAC1CxC,EAAexC,GAAGC,EAAYqB,gBAChC0D,EAAgB5H,IAAI6C,EAAYqB,iBAK9BhI,EAAArB,UAAAgE,eAAR,SACE0B,EACA+C,QAAA,IAAAA,MAAA,MAEA,IAAIrD,EAAeM,EAAYgD,sBAC/B,GAAIpK,KAAKoD,eAAe4G,IAAIlD,GAC1B9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,OAH5B,CAOA,IAAIiD,EAAa3C,EAAYxG,KAAK6G,KAC9Bf,EAAU,IAAI2I,EAAKrP,KAAM+J,EAAYjD,EAAcM,GAIvD,GAHAV,EAAQyD,UAAYA,EACpBnK,KAAKoD,eAAeyD,IAAIC,EAAcJ,GAElCyD,EAAW,CACb,GAAIA,EAAUW,SACZ,GAAIX,EAAUW,QAAQd,IAAID,GAKxB,YAJA/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5BqD,EAAUW,QAAU,IAAIhI,IAE1BqH,EAAUW,QAAQjE,IAAIkD,EAAYrD,GAC9ByD,EAAUV,GAAGC,EAAYqB,gBAC3BrE,EAAQG,IAAI6C,EAAYqB,oBAErB,GAAIrE,EAAQ+C,GAAGC,EAAY/D,QAAS,CACzC,GAAI3F,KAAKuD,iBAAiByG,IAAIlD,GAK5B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf5D,EAAYxG,KAAKyG,MAAOP,GAK5B,GADA9G,KAAKuD,iBAAiBsD,IAAIC,EAAcJ,GACpCU,EAAYC,MAAMuC,OAAOqB,QAAS,CACpC,GAAIjL,KAAKwD,mBAAmBwG,IAAIlD,GAK9B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf5D,EAAYxG,KAAKyG,MAAOP,GAI5BJ,EAAQG,IAAI6C,EAAYqB,eACxB/K,KAAKwD,mBAAmBqD,IAAIC,EAAcJ,IAK9C,IADA,IAAI4I,EAASlI,EAAYkI,OAChBjP,EAAI,EAAG2E,EAAIsK,EAAOrK,OAAQ5E,EAAI2E,IAAK3E,EAC1CL,KAAKuP,oBAAoBD,EAAOjP,GAAIqG,GAGtC1G,KAAKuJ,mBAAmB7C,EAASU,KAG3BrE,EAAArB,UAAA6N,oBAAR,SACEnI,EACAoI,GAEA,IAAI5O,EAAOwG,EAAYxG,KAAK6G,KACxBX,EAAeM,EAAYgD,sBAC3BqF,EAAiBD,EAAI/F,GAAGC,EAAYqB,eACxC,GAAIyE,EAAI1E,SACN,GAAI0E,EAAI1E,QAAQd,IAAIpJ,GAKlB,YAJAZ,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5B0I,EAAI1E,QAAU,IAAIhI,IAEpB,IAAIzB,EAAQ,IAAIqO,EAAUF,EAAKxP,KAAMY,EAAMkG,EAAcM,GACzDoI,EAAI1E,QAAQjE,IAAIjG,EAAMS,GAClBoO,GACFpO,EAAMwF,IAAI6C,EAAYqB,gBAIlBhI,EAAArB,UAAAkE,kBAAR,SACER,EACAR,GAGA,IADA,IAAIkG,EAAU1F,EAAU0F,QACfzK,EAAI,EAAG2E,EAAI8F,EAAQ7F,OAAQ5E,EAAI2E,IAAK3E,EAC3CL,KAAK2P,iBAAiB7E,EAAQzK,GAAI+E,EAAUwK,aAAchL,IAItD7B,EAAArB,UAAA4G,yBAAR,SACE1H,EACA8F,EACAmJ,GAEA7P,KAAKuD,iBAAiBsD,IAAIjG,EAAM8F,GAC5BmJ,EAAWxI,MAAMuC,OAAOC,YACtB7J,KAAKoD,eAAe4G,IAAI6F,EAAWpI,MACrCzH,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf6E,EAAWxI,MAAOwI,EAAWpI,OAG/Bf,EAAQI,aAAe+I,EAAWpI,KAClCzH,KAAKoD,eAAeyD,IAAIgJ,EAAWpI,KAAMf,MAKvC3D,EAAArB,UAAAiO,iBAAR,SACEtH,EACAuH,EACAhL,GAEA,IAQIgC,EACAkJ,EACA5H,EAVAV,EAAea,EAAOhB,MAAMuC,OAAOgG,aAAelQ,EAAAwC,eAAiBmG,EAAOb,aAAaC,KAC3F,GAAIzH,KAAKuD,iBAAiByG,IAAIxC,GAC5BxH,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf3C,EAAOb,aAAaH,MAAOG,QAS/B,GAAoB,MAAhBoI,EAAsB,CAIxB,GAHAhJ,EAAiByB,EAAOhB,MAAMuC,OAAOgG,aAAelQ,EAAAwC,eAAiBmG,EAAOzH,KAAK6G,KAG7EqI,EAAoB9P,KAAKoD,eAAejC,IAAIyF,GAM9C,YALA5G,KAAKsI,yBACHd,EACAsI,EACAzH,EAAOb,cAMX,GAAI5C,EAAcoF,IAAIxC,GAKpB,YAJAxH,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf3C,EAAOb,aAAaH,MAAOG,IAI/BU,EAAe,IAAIxF,GACN0F,YAAa,EAC1BF,EAAatB,eAAiBA,EAC9BsB,EAAaG,OAASA,EACtBzD,EAAciC,IAAIW,EAAcU,OAG3B,CAKL,GAJAtB,EAAiBgJ,EAAelQ,EAAAwC,eAAiBmG,EAAOzH,KAAK6G,KAG7DqI,EAAoB9P,KAAKoD,eAAejC,IAAIyF,GAO1C,YALA5G,KAAKsI,yBACHd,EACAsI,EACAzH,EAAOb,cAOX,IADA,IAAIuI,EAAO,IAAIC,IACR9H,EAAetD,EAAczD,IAAIyF,IAAiB,CACvD,IAAIsB,EAAaE,WAaV,CAEL,GADA0H,EAAoB9P,KAAKoD,eAAejC,IAAI+G,EAAatB,gBAOvD,YALA5G,KAAKsI,yBACHd,EACAsI,EACAzH,EAAOb,cAIX,MArBA,GADAsI,EAAoB9P,KAAKuD,iBAAiBpC,IAAI+G,EAAatB,gBAOzD,YALA5G,KAAKsI,yBACHd,EACAsI,EACAzH,EAAOb,cAKX,GADAZ,EAAiBsB,EAAatB,eAC1BmJ,EAAK/F,IAAI9B,GAAe,MAC5B6H,EAAKE,IAAI/H,GAgBb,GAAItD,EAAcoF,IAAIxC,GAKpB,YAJAxH,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf3C,EAAOb,aAAaH,MAAOG,IAI/BU,EAAe,IAAIxF,GACN0F,YAAa,EAC1BF,EAAatB,eAAiBA,EAC9BsB,EAAaG,OAASA,EACtBzD,EAAciC,IAAIW,EAAcU,KAI5BnF,EAAArB,UAAAoE,mBAAR,SACEsB,EACA+C,QAAA,IAAAA,MAAA,MAEA,IAAIrD,EAAeM,EAAYgD,sBAC/B,GAAIpK,KAAKoD,eAAe4G,IAAIlD,GAC1B9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,OAH5B,CAOA,IAAIiD,EAAa3C,EAAYxG,KAAK6G,KAC9B/F,EAAY,IAAI+K,EAClBzM,KACA+J,EACAjD,EACAM,EACA,MAKF,GAHA1F,EAAUyI,UAAYA,EACtBnK,KAAKoD,eAAeyD,IAAIC,EAAcpF,GAElCyI,EAAW,CACb,GAAIA,EAAUW,SACZ,GAAIX,EAAUW,QAAQd,IAAID,GAKxB,YAJA/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5BqD,EAAUW,QAAU,IAAIhI,IAE1BqH,EAAUW,QAAQjE,IAAIkD,EAAYrI,GAC9ByI,EAAUV,GAAGC,EAAYqB,gBAAkBrJ,EAAU+H,GAAGC,EAAY/D,SACtEjE,EAAUmF,IAAI6C,EAAYqB,oBAEvB,GAAIrJ,EAAU+H,GAAGC,EAAY/D,QAAS,CAC3C,GAAI3F,KAAKuD,iBAAiByG,IAAIlD,GAK5B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf5D,EAAYxG,KAAKyG,MAAOP,GAK5B,GADA9G,KAAKuD,iBAAiBsD,IAAIC,EAAcpF,GACpC0F,EAAYC,MAAMuC,OAAOqB,QAAS,CACpC,GAAIjL,KAAKwD,mBAAmBwG,IAAIlD,GAK9B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,GAI5BpF,EAAUmF,IAAI6C,EAAYqB,eAC1B/K,KAAKwD,mBAAmBqD,IAAIC,EAAcpF,IAI9C1B,KAAKuJ,mBAAmB7H,EAAW0F,KAG7BrE,EAAArB,UAAAsE,kBAAR,SACEZ,EACAR,EACAC,GAEA,IAAIqL,EAAe9K,EAAU8K,aAC7B,GAAIA,EACF,IAAK,IAAI7P,EAAI,EAAG2E,EAAIkL,EAAajL,OAAQ5E,EAAI2E,IAAK3E,EAChDL,KAAKmQ,iBACHD,EAAa7P,GACb+E,EAAUwK,aACVhL,EAAeC,QAGd,GAAIO,EAAUgL,cAAe,CAClC,IAAItJ,EACF1B,EAAUiC,MAAMuC,OAAOgG,aACvBlQ,EAAAwC,eACAkD,EAAUgL,cAAc3I,KAE1B,GAAIzH,KAAKoD,eAAe4G,IAAIlD,GAM1B,YALA9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7E,EAAUgL,cAAc/I,MACxBP,GAIJ9G,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfxF,EAAUiC,SAKRtE,EAAArB,UAAAyO,iBAAR,SACE/I,EACAwI,EACAhL,EACAC,GAEA,IAAIiC,EAAeM,EAAYgD,sBAC/B,GAAIpK,KAAKoD,eAAe4G,IAAIlD,GAC1B9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,OAH5B,CAQA,IAGIJ,EAHAE,EAAiBgJ,EAAelQ,EAAAwC,eAAiBkF,EAAYI,aAAaC,KAI9E,GAAIf,EAAU1G,KAAKuD,iBAAiBpC,IAAIyF,GACtC5G,KAAKoD,eAAeyD,IAAIC,EAAcJ,OADxC,CAMA,IAAI2J,EAAY3Q,EAAAwC,eAAiB,QAC7BuE,EAAe,IAAI9D,EACvB8D,EAAaK,aAAeA,EACxB8I,EAAaU,SAASD,IACxB5J,EAAaG,eAAiBA,EAC9BH,EAAaO,kBACX4I,EAAaW,UAAU,EAAGX,EAAa3K,OAASoL,EAAUpL,OAAS,GACnEmC,EAAYI,aAAaC,OAG3BhB,EAAaG,eAAiBA,EAC9BH,EAAaO,kBACX4I,EACAS,EACA3Q,EAAAwC,eACAkF,EAAYI,aAAaC,MAG7BhB,EAAaW,YAAcA,EAC3BvC,EAAcgG,KAAKpE,MAGb1D,EAAArB,UAAAwE,oBAAR,SAA4BkB,EAAmC+C,QAAA,IAAAA,MAAA,MAC7D,IAAIrD,EAAeM,EAAYgD,sBAC/B,GAAIpK,KAAKoD,eAAe4G,IAAIlD,GAC1B9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,OAH5B,CAOA,IAAIpF,EAAY,IAAI8O,EAAmBxQ,KAAMoH,EAAYxG,KAAK6G,KAAMX,EAAcM,GAIlF,GAHA1F,EAAUyI,UAAYA,EACtBnK,KAAKoD,eAAeyD,IAAIC,EAAcpF,GAElCyI,EAAW,CACb,GAAIA,EAAUW,SACZ,GAAIX,EAAUW,QAAQd,IAAItI,EAAUoF,cAKlC,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5BqD,EAAUW,QAAU,IAAIhI,IAE1BqH,EAAUW,QAAQjE,IAAInF,EAAUoF,aAAcpF,GAC1CyI,EAAUV,GAAGC,EAAYqB,gBAAkBrJ,EAAU+H,GAAGC,EAAY/D,SACtEjE,EAAUmF,IAAI6C,EAAYqB,oBAEvB,GAAIrJ,EAAU+H,GAAGC,EAAY/D,QAAS,CAC3C,GAAI3F,KAAKuD,iBAAiByG,IAAIlD,GAK5B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe8D,4DACf5D,EAAYxG,KAAKyG,MAAOP,GAK5B,GADA9G,KAAKuD,iBAAiBsD,IAAIC,EAAcpF,GACpC0F,EAAYC,MAAMuC,OAAOqB,QAAS,CACpC,GAAIjL,KAAKwD,mBAAmBwG,IAAIlD,GAK9B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,GAI5BpF,EAAUmF,IAAI6C,EAAYqB,eAC1B/K,KAAKwD,mBAAmBqD,IAAIC,EAAcpF,IAK9C,IADA,IAAIwJ,EAAqB9D,EAAY0D,QAC5BzK,EAAI,EAAG2E,EAAIkG,EAAmBjG,OAAQ5E,EAAI2E,IAAK3E,EAAG,CACzD,IAAI8K,EAAoBD,EAAmB7K,GAC3C,OAAQ8K,EAAkB9F,MAExB,KAAKrD,EAAAsD,SAAS8F,iBACZpL,KAAKqL,gBAAkCF,EAAmBzJ,GAC1D,MAEF,KAAKM,EAAAsD,SAASgG,kBACRH,EAAkBI,MAAM7B,EAAY8B,IAAM9B,EAAY+B,KACxDzL,KAAK0L,mBAAsCP,EAAmBzJ,GAE9D1B,KAAK2L,iBAAoCR,EAAmBzJ,GAE9D,MAEF,QACE,MAAM,IAAIkK,MAAM,8BAKtB5L,KAAKuJ,mBAAmB7H,EAAW0F,KAG7BrE,EAAArB,UAAA0E,oBAAR,SACEgB,EACAqJ,EACAC,QAAA,IAAAA,MAAA,MAEA,IAAI5J,EAAeM,EAAYgD,sBAC3BL,EAAa3C,EAAYxG,KAAK6G,KAC9B0C,EAAYnK,KAAKoD,eAAejC,IAAI2F,GAQxC,GAPKqD,KACHA,EAAY,IAAIwG,EAAU3Q,KAAM+J,EAAYjD,EAAcM,IAChD+C,UAAYuG,EACtB1Q,KAAKoD,eAAeyD,IAAIC,EAAcqD,GACtCnK,KAAKuJ,mBAAmBY,EAAW/C,IAGjCsJ,EAAiB,CACnB,GAAIA,EAAgB5F,SAClB,GAAI4F,EAAgB5F,QAAQd,IAAID,GAK9B,YAJA/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,QAK5B4J,EAAgB5F,QAAU,IAAIhI,IAEhC4N,EAAgB5F,QAAQjE,IAAIkD,EAAYI,GACpCuG,EAAgBjH,GAAGC,EAAYqB,gBAAkBZ,EAAUV,GAAGC,EAAY/D,SAC5EwE,EAAUtD,IAAI6C,EAAYqB,oBAEvB,GAAIZ,EAAUV,GAAGC,EAAY/D,QAAS,CAC3C,IAAIiL,EAAiB5Q,KAAKuD,iBAAiBpC,IAAI2F,GAY/C,GAXI8J,GACGA,EAAenH,GAAGC,EAAY/D,SACjC3F,KAAKiH,MACHnF,EAAAoF,eAAe2J,kFACfzJ,EAAYxG,KAAKyG,MAAO8C,EAAUrD,cAGtCqD,EAAYyG,GAEZ5Q,KAAKuD,iBAAiBsD,IAAIC,EAAcqD,GAEtC/C,EAAYC,MAAMuC,OAAOqB,QAAS,CACpC,GAAIjL,KAAKwD,mBAAmBwG,IAAIlD,GAK9B,YAJA9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,GAI5BqD,EAAUtD,IAAI6C,EAAYqB,eAC1B/K,KAAKwD,mBAAmBqD,IAAIC,EAAcqD,IAK9C,IADA,IAAIW,EAAU1D,EAAY0D,QACjBzK,EAAI,EAAG2E,EAAI8F,EAAQ7F,OAAQ5E,EAAI2E,IAAK3E,EAC3C,OAAQyK,EAAQzK,GAAGgF,MACjB,KAAKrD,EAAAsD,SAASC,iBACZvF,KAAKwF,gBAAkCsF,EAAQzK,GAAIoQ,EAAwBtG,GAC3E,MAEF,KAAKnI,EAAAsD,SAASG,gBACZzF,KAAK0F,eAAgCoF,EAAQzK,GAAI8J,GACjD,MAEF,KAAKnI,EAAAsD,SAASO,oBACZ7F,KAAK8F,mBAAwCgF,EAAQzK,GAAI8J,GACzD,MAEF,KAAKnI,EAAAsD,SAASW,qBACZjG,KAAKkG,oBAA0C4E,EAAQzK,GAAI8J,GAC3D,MAEF,KAAKnI,EAAAsD,SAASa,qBACZnG,KAAKoG,oBAA0C0E,EAAQzK,GAAIoQ,EAAwBtG,GACnF,MAEF,KAAKnI,EAAAsD,SAASe,gBAGZrG,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfE,EAAQzK,GAAGgH,OAEb,MAEF,KAAKrF,EAAAsD,SAASiB,SACZvG,KAAKwG,oBAAuCsE,EAAQzK,GAAI8J,GACxD,MAEF,QACE,MAAM,IAAIyB,MAAM,+BAMhB7I,EAAArB,UAAA4E,oBAAR,SAA4Bc,EAA8B+C,QAAA,IAAAA,MAAA,MAGxD,IAAIvJ,EAAOwG,EAAYxG,KAAK6G,KAC5B,GAAIzH,KAAKqD,YAAY2G,IAAIpJ,IAASZ,KAAKsD,YAAY0G,IAAIpJ,GACrDZ,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOzG,OAH5B,CAOA,IAAI0I,EAAQ,IAAI1G,EAChB0G,EAAMwH,eAAiB1J,EAAY0J,eACnCxH,EAAM0C,KAAO5E,EAAY4E,KACzBhM,KAAKsD,YAAYuD,IAAIjG,EAAM0I,KAGrBvG,EAAArB,UAAA8E,oBAAR,SAA4BpB,EAA8B+E,QAAA,IAAAA,MAAA,MAExD,IADA,IAAI+F,EAAe9K,EAAU8K,aACpB7P,EAAI,EAAG2E,EAAIkL,EAAajL,OAAQ5E,EAAI2E,IAAK3E,EAAG,CACnD,IAAI+G,EAAc8I,EAAa7P,GAC3ByG,EAAeM,EAAYgD,sBAC/B,GAAIpK,KAAKoD,eAAe4G,IAAIlD,GAC1B9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,OAH5B,CAOA,IAAIiD,EAAa3C,EAAYxG,KAAK6G,KAC9BsJ,EAAS,IAAI3E,EACfpM,KACA+J,EACAjD,EACAM,EACArF,EAAA8B,KAAKc,MAKP,GAHAoM,EAAO5G,UAAYA,EACnBnK,KAAKoD,eAAeyD,IAAIC,EAAciK,GAElC5G,EAAW,CACb,GAAIA,EAAUW,SACZ,GAAIX,EAAUW,QAAQd,IAAID,GAAa,CACrC/J,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,GAE1B,eAGFqD,EAAUW,QAAU,IAAIhI,IAE1BqH,EAAUW,QAAQjE,IAAIkD,EAAYgH,GAC9B5G,EAAUV,GAAGC,EAAYqB,gBAAkBgG,EAAOtH,GAAGC,EAAY/D,SACnEoL,EAAOlK,IAAI6C,EAAYqB,oBAEpB,GAAIgG,EAAOtH,GAAGC,EAAY/D,UAC3B3F,KAAKuD,iBAAiByG,IAAIlD,GAC5B9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,GAG1B9G,KAAKuD,iBAAiBsD,IAAIC,EAAciK,GAEtC3J,EAAYC,MAAMuC,OAAOqB,SAAS,CACpC,GAAIjL,KAAKwD,mBAAmBwG,IAAIlD,GAAe,CAC7C9G,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOP,GAE1B,SAEFiK,EAAOlK,IAAI6C,EAAYqB,eACvB/K,KAAKwD,mBAAmBqD,IAAIC,EAAciK,GAG9C/Q,KAAKuJ,mBAAmBwH,EAAQ3J,MAKpCrE,EAAArB,UAAAsP,iBAAA,SACEC,EACAC,EACAC,QADA,IAAAD,MAAA,WACA,IAAAC,OAAA,GAEA,IAAIC,EAAmBH,EAAKG,iBACxBC,EAAwB,KAC5B,GAAID,KACFC,EAAWrR,KAAKsR,YACdF,EACAF,EACAC,IAEa,OAAO,KAQxB,IANA,IAAII,EAAqBN,EAAKO,eAC1BC,EAAgBF,EAAmBtM,OACnCuM,EAAiB,IAAI1M,MAAY2M,GACjCC,EAAiB,IAAI5M,MAAc2M,GACnCE,EAAqB,EACrBC,GAAU,EACLvR,EAAI,EAAGA,EAAIoR,IAAiBpR,EAAG,CACtC,IAAIwR,EAAoBN,EAAmBlR,GAC3C,OAAQwR,EAAkBC,eACxB,KAAK9P,EAAA+P,cAAcC,QACjBL,EAAqBtR,EAAI,EACzB,MAEF,KAAK2B,EAAA+P,cAAcE,KACjBvJ,OAAOrI,GAAKoR,GACZG,GAAU,EAId,IAAIM,EAAgBlS,KAAKsR,YACvB5I,OAAOmJ,EAAkB7F,MACzBkF,EACAC,GAEF,IAAKe,EAAe,OAAO,KAC3BV,EAAenR,GAAK6R,EACpBR,EAAerR,GAAKwR,EAAkBjR,KAAK6G,KAE7C,IACI0K,EADAC,EAAiBnB,EAAKkB,WAE1B,GAAIC,GAMF,KALAD,EAAanS,KAAKsR,YAChBc,EACAlB,EACAC,IAEe,OAAO,UAExBgB,EAAapQ,EAAA8B,KAAKc,KAEpB,IAAI0N,EAAY,IAAItQ,EAAAuQ,UAAUd,EAAgBW,EAAYd,GAI1D,OAHAgB,EAAUX,eAAiBA,EAC3BW,EAAUV,mBAAqBA,EAC/BU,EAAUT,QAAUA,EACbS,GAITtP,EAAArB,UAAA4P,YAAA,SACEL,EACAC,EACAC,GAEA,QAHA,IAAAD,MAAA,WACA,IAAAC,OAAA,GAEIF,EAAK5L,MAAQrD,EAAAsD,SAASiN,UAAW,CACnC,IAAIF,EAAYrS,KAAKgR,iBAAgCC,EAAMC,EAAyBC,GACpF,OAAKkB,EACEtQ,EAAA8B,KAAKQ,IAAImO,WAAWH,GADJ,KAGzB,IAKI3L,EALA+L,EAAqBxB,EACrBlH,EAAa0I,EAAS7R,KAAK6G,KAC3BiL,EAAa3I,EACb4I,EAAYF,EAASpL,MAAMuC,OAAOgG,aAAelQ,EAAAwC,eAAiB6H,EAKtE,IAAKrD,EAAU1G,KAAKoD,eAAejC,IAAIwR,MAAgBjM,EAAU1G,KAAKoD,eAAejC,IAAIuR,IACvF,OAAQhM,EAAQrB,MACd,KAAKyD,EAAYC,gBACf,IAAI+C,EAA4BpF,EAASkM,0BACvCH,EAASI,cACT3B,EACA,MAEF,OAAOpF,EAAWA,EAASE,KAAO,KAMxC,IA6BIA,EA7BA1C,EAAQtJ,KAAKsD,YAAYnC,IAAI4I,GACjC,GAAIT,EAAO,OAAOtJ,KAAKsR,YAAYhI,EAAM0C,KAAMkF,EAAyBC,GAGxE,GAAIsB,EAASI,cAAe,CAG1B,IAFA,IAAI7N,EAAIyN,EAASI,cAAc5N,OAC3B6N,EAAa,IAAIhO,MAAYE,GACxB3E,EAAI,EAAGA,EAAI2E,IAAK3E,EAAG,CAC1B,IAAI0S,EAAY/S,KAAKsR,YACnBmB,EAASI,cAAcxS,GACvB6Q,EACAC,GAEF,IAAK4B,EAAW,OAAO,KACvBD,EAAWzS,GAAK0S,EAGlB,GAAI/N,EAAG,CACL,IAAIgO,EAAcjR,EAAAkR,cAAcH,GAC5BE,EAAY/N,SACd0N,GAAa,IAAMK,EAAc,IACjCN,GAAc,IAAMM,EAAc,UAE/B,GAAI9B,EAAyB,CAClC,IAAIgC,EAAkBhC,EAAwB/P,IAAIuR,GAClD,GAAIQ,EAAiB,OAAOA,GAOhC,OAAKlH,EAAOhM,KAAKqD,YAAYlC,IAAIwR,MAAgB3G,EAAOhM,KAAKqD,YAAYlC,IAAIuR,IACpE1G,GAGLmF,GACFnR,KAAKiH,MACHnF,EAAAoF,eAAeqB,mBACfkK,EAAS7R,KAAKyG,MAAOqL,GAGlB,OAIT3P,EAAArB,UAAAyR,qBAAA,SACErC,EACAsC,EACAlC,EACAmC,QADA,IAAAnC,MAAA,WACA,IAAAmC,MAAA,MAEA,IAAIC,EAAiBxC,EAAe7L,OAChCsO,EAAgBH,EAAoBA,EAAkBnO,OAAS,EACnE,GAAIqO,GAAkBC,EAgBpB,OAfIA,EACFvT,KAAKiH,MACHnF,EAAAoF,eAAesM,oCACfxR,EAAA0I,MAAMC,KACSyI,EAAmB,GAAG/L,MACtB+L,EAAmBG,EAAgB,GAAGlM,OAErDiM,EAAehF,SAAS,IAAKiF,EAAcjF,SAAS,KAE7C+E,GACTrT,KAAKiH,MACHnF,EAAAoF,eAAesM,oCACfH,EAAsBhM,MAAMoM,MAAOH,EAAehF,SAAS,IAAK,KAG7D,KAGT,IADA,IAAIuE,EAAgB,IAAI/N,MAAYwO,GAC3BjT,EAAI,EAAGA,EAAIiT,IAAkBjT,EAAG,CACvC,IAAI2L,EAAOhM,KAAKsR,YACD8B,EAAmB/S,GAChC6Q,GACA,GAEF,IAAKlF,EAAM,OAAO,KAElB6G,EAAcxS,GAAK2L,EAErB,OAAO6G,GAIT9P,EAAArB,UAAAmH,kBAAA,SACEgH,EACA6D,EACAC,QAAA,IAAAA,MAAA,MAEA,IAEIjN,EACAyD,EAHAvJ,EAAOiP,EAAWpI,KAMtB,GAAIkM,GAEF,GACEA,EAAe7I,UACdpE,EAAUiN,EAAe7I,QAAQ3J,IAAIP,KACtC8F,EAAQrB,MAAQyD,EAAY8K,UAG5B,OADKC,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAIH,QAGxB,GAAIgN,EAAoB,CAG7B,GAAIhN,EAAUgN,EAAmBK,KAAKC,eAAepT,GAEnD,OADKiT,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAIH,GAI7B,GAAIyD,EAAYuJ,EAAmBhS,UAAUyI,UAC3C,GACE,GAAIzD,EAAU1G,KAAKoD,eAAejC,IAAIgJ,EAAUrD,aAAepH,EAAA6C,iBAAmB3B,GAEhF,OADKiT,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAIH,SAEtByD,EAAYA,EAAUA,WAKnC,OAAIzD,EAAU1G,KAAKoD,eAAejC,IAAI0O,EAAWxI,MAAMuC,OAAOgG,aAAelQ,EAAAwC,eAAiBtB,KACvFiT,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAIH,KAIzBA,EAAU1G,KAAKoD,eAAejC,IAAIP,KAC/BiT,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAIH,KAG7B1G,KAAKiH,MACHnF,EAAAoF,eAAeqB,mBACfsH,EAAWxI,MAAOzG,GAEb,OAITmC,EAAArB,UAAAuS,sBAAA,SACEC,EACAR,GAGA,IAAIS,EAAmBD,EAAeE,WAKtC,KAJAP,EAAkB7T,KAAKqU,kBACrBF,EACAT,IAEoB,OAAO,KAC7B,IAIIY,EACAjM,EALAkM,EAASV,EAAgBnN,QAGzB8N,EAAeN,EAAezS,SAASgG,KAK3C,OAAQ8M,EAAOlP,MACb,KAAKyD,EAAYa,OACjB,KAAKb,EAAY2L,MACjB,KAAK3L,EAAY4L,MACf,KAAMJ,EAAmCC,EAAQvI,MAAM2I,eAKrD,OAJA3U,KAAKiH,MACHnF,EAAAoF,eAAe0N,oCACfV,EAAezS,SAAS4F,MAAOmN,EAAcF,EAAWhG,YAEnD,KAETiG,EAAgBD,EAAWK,eAC3B,MAEF,KAAK7L,EAAY8F,SACf,IAAI/N,EAAS6H,OAAkB6L,EAAQ1F,iBAAiB9C,UACxD,IAAKlL,EAAQ,OAAO,KACpB,KAAMyT,EAAazT,EAAOwR,UAAUF,YAAYwC,eAK9C,OAJA3U,KAAKiH,MACHnF,EAAAoF,eAAe0N,oCACfV,EAAezS,SAAS4F,MAAOmN,EAAcF,EAAWhG,YAEnD,KAETiG,EAAgBD,EAAWK,eAM/B,OAAQJ,EAAOlP,MACb,KAAKyD,EAAYC,gBACjB,KAAKD,EAAY+L,MACf,OAAG,CACD,GAAIN,EAAOzJ,UAAYzC,EAASkM,EAAOzJ,QAAQ3J,IAAIqT,IACjD,OAAOX,EAAgBhN,IAAIwB,GAAQyM,WAAWP,EAAQJ,GAGxD,GAAII,EAAOlP,MAAQyD,EAAYC,gBAAiB,CAC9C,IAAqBwL,EAAQtL,cAG3B,MAFAsL,EAA0CA,EAAQtL,kBAK/C,IAAIsL,EAAOlP,MAAQyD,EAAY+L,MAOpC,MANA,IAAYN,EAAQQ,KAGlB,MAFAR,EAAwBA,EAAQQ,MAQtC,MAEF,QACE,GAAIR,EAAOzJ,UAAYzC,EAASkM,EAAOzJ,QAAQ3J,IAAIqT,IACjD,OAAOX,EAAgBhN,IAAIwB,GAAQyM,WAAWP,EAAQJ,GAS5D,OAJAnU,KAAKiH,MACHnF,EAAAoF,eAAe0N,oCACfV,EAAezS,SAAS4F,MAAOmN,EAAcD,EAAOzN,cAE/C,MAGT/D,EAAArB,UAAAsT,qBAAA,SACEC,EACAvB,GAGA,IAAIS,EAAmBc,EAAcb,WAKrC,KAJAP,EAAkB7T,KAAKqU,kBACrBF,EACAT,IAEoB,OAAO,KAC7B,IAAIa,EAASV,EAAgBnN,QAC7B,OAAQ6N,EAAOlP,MACb,KAAKyD,EAAYa,OACjB,KAAKb,EAAY2L,MACjB,KAAK3L,EAAY4L,MACf,IAAI1I,EAA6BuI,EAAQvI,KACzC,GAAIA,EAAK2I,eAAgB,CACvB,IAAIO,GAAkBX,EAASvI,EAAK2I,gBAAgBjT,UAAU+L,aAC1D0H,OAAU,EACd,GACoB,MAAlBD,GACAX,EAAOzJ,UACNqK,EAAaZ,EAAOzJ,QAAQ3J,IAAI+T,KACjCC,EAAW9P,MAAQyD,EAAYsM,mBAE/B,OAAOvB,EAAgBhN,IAAIsO,GAAYL,WAAW9I,EAAK2I,eAAgBR,IAU/E,OAJAnU,KAAKiH,MACHnF,EAAAoF,eAAemO,qCACflB,EAAiB9M,MAAOkN,EAAOzN,cAE1B,MAGT/D,EAAArB,UAAA2S,kBAAA,SACED,EACAV,GAEA,KAAOU,EAAW/O,MAAQrD,EAAAsD,SAASgQ,eACjClB,EAAuCA,EAAYA,WAErD,OAAQA,EAAW/O,MACjB,KAAKrD,EAAAsD,SAASiQ,UACZ,IAAIvJ,EAAOhM,KAAKsR,YAAkC8C,EAAYoB,QAC9D,GAAIxJ,EAEF,GADIyJ,EAAYzJ,EAAK2I,eAGnB,OADKd,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAI4O,GAG/B,OAAO,KAET,KAAKzT,EAAAsD,SAASoQ,OACZ,MAAM,IAAI9J,MAAM,mBAElB,KAAK5J,EAAAsD,SAASqQ,KAEZ,OADIrO,EAASoM,EAAmBkC,WAEzB/B,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAIS,KAE7BtH,KAAKiH,MACHnF,EAAAoF,eAAe2O,+CACfzB,EAAW/M,OAEN,MAET,KAAKrF,EAAAsD,SAASwQ,MACZ,IAAIxO,EACJ,OADIA,EAASoM,EAAmBkC,WAClBtO,EAAOjC,MAAQyD,EAAY+L,QAAUvN,EAAiBA,EAAQyN,OACrElB,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAIS,KAE7BtH,KAAKiH,MACHnF,EAAAoF,eAAe6O,iDACf3B,EAAW/M,OAEN,MAET,KAAKrF,EAAAsD,SAAS0Q,WACZ,OAAOhW,KAAK6I,kBAAwCuL,EAAYV,GAElE,KAAK1R,EAAAsD,SAAS2Q,eACZ,OAAOjW,KAAKiU,sBACgBG,EAC1BV,GAGJ,KAAK1R,EAAAsD,SAAS4Q,cACZ,OAAOlW,KAAKgV,qBACeZ,EACzBV,GAGJ,KAAK1R,EAAAsD,SAAS6Q,KACZ,IAAIvN,EAAW5I,KAAKqU,kBACDD,EAAYA,WAC7BV,GAEF,GAAI9K,EAAU,CACZ,IAAIlC,EAAUkC,EAASlC,QACvB,GAAIA,GAAWA,EAAQrB,MAAQyD,EAAYsM,mBAAoB,CAC7D,IAAItJ,EAA+BpF,EAASkM,0BACzBwB,EAAYvB,cAC7Ba,EAAmBxC,wBACnBkD,GAEF,GAAItI,EAAU,CACZ,IACI2J,EADAtD,EAAarG,EAASuG,UAAUF,WAEpC,GADIsD,EAAYtD,EAAWwC,eAGzB,OADKd,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAI4O,GAE3B,IAAIpD,EAAYF,EAAWiE,mBAC3B,GAAI/D,EAAW,CACb,IAAIgE,EAAiBhE,EAAUiE,qBAM/B,OALKD,IACHA,EAAiB,IAAIE,EAAevW,KAAMqS,GAC1CA,EAAUiE,qBAAuBD,GAE9BxC,IAAiBA,EAAkB,IAAIC,GACrCD,EAAgBhN,IAAIwP,OAazC,OAJArW,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN,MAEXtE,EAzzDA,CAA6BjB,EAAA0U,mBAAhB9W,EAAAqD,UA4zDb,IAmCI8Q,EAGQ/K,EAkCAY,EAxEZoK,EAAA,oBAAAA,KAgCA,OAtBEA,EAAApS,UAAAmF,IAAA,SAAIH,GAIF,OAHA1G,KAAKuU,OAAS,KACdvU,KAAKmU,iBAAmB,KACxBnU,KAAK0G,QAAUA,EACR1G,MAIT8T,EAAApS,UAAAoT,WAAA,SAAWP,EAAiBJ,GAG1B,OAFAnU,KAAKuU,OAASA,EACdvU,KAAKmU,iBAAmBA,EACjBnU,MAITe,OAAAC,eAAI8S,EAAApS,UAAA,wBAAJ,WACE,OACiB,MAAf1B,KAAKuU,QACLvU,KAAKuU,OAAOlP,MAAQyD,EAAY+L,OACP,MAAzB7U,KAAKmU,kDAGXL,EAhCA,GAAapU,EAAAoU,kBAsCb,SAAYhL,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,0BA9BF,CAAYA,EAAApJ,EAAAoJ,cAAApJ,EAAAoJ,iBAkCZ,SAAYY,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAKAA,IAAA,sBAEAA,IAAA,yBAEAA,IAAA,6BAEAA,IAAA,uBAKAA,IAAA,0BAEAA,IAAA,0BAEAA,IAAA,0CAEAA,IAAA,6BAEAA,IAAA,mCAEAA,IAAA,uBAEAA,IAAA,uCAEAA,IAAA,wCAKAA,IAAA,8BAEAA,IAAA,4BAEAA,IAAA,2BAEAA,IAAA,mCAxEF,CAAYA,EAAAhK,EAAAgK,cAAAhK,EAAAgK,iBA4EZ,IAAA+M,EAAA,WAkBE,SAAAA,EAAsBC,EAAkB3M,EAAoBjD,GAP5D9G,KAAA2W,MAAqBjN,EAAYkN,KAEjC5W,KAAA8K,QAAsC,KAEtC9K,KAAAmK,UAA4B,KAI1BnK,KAAK0W,QAAUA,EACf1W,KAAK+J,WAAaA,EAClB/J,KAAK8G,aAAeA,EASxB,OALE2P,EAAA/U,UAAA+H,GAAA,SAAGoN,GAA2B,OAAQ7W,KAAK2W,MAAQE,IAASA,GAE5DJ,EAAA/U,UAAA6J,MAAA,SAAMoL,GAA4B,OAA+B,IAAvB3W,KAAK2W,MAAQA,IAEvDF,EAAA/U,UAAAmF,IAAA,SAAIgQ,GAA2B7W,KAAK2W,OAASE,GAC/CJ,EA9BA,GAAsB/W,EAAA+W,UAiCtB,IAAA9F,EAAA,SAAA3N,GASE,SAAA2N,EACE+F,EACA3M,EACAjD,EACAM,GAJF,IAAAlE,EAMEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYjD,IAAa9G,YAZ1CkD,EAAAmC,KAAOyD,EAAYgO,UAajB5T,EAAKkE,YAAcA,EACnBlE,EAAKyT,MAAQvP,EAAYuP,QAE7B,OAnB+BjT,EAAAiN,EAAA3N,GAmB/B2N,EAnBA,CAA+B8F,GAAlB/W,EAAAiR,YAsBb,IAAAtB,EAAA,SAAArM,GAQE,SAAAqM,EACEqH,EACA3M,EACAjD,EACAM,GAJF,IAAAlE,EAMEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYjD,IAAa9G,YAZ1CkD,EAAAmC,KAAOyD,EAAYiO,KAajB7T,EAAKkE,YAAcA,EACnBlE,EAAKyT,MAAQvP,EAAYuP,QAE7B,OAlB0BjT,EAAA2L,EAAArM,GAkB1BqM,EAlBA,CAA0BoH,GAAb/W,EAAA2P,OAqBb,IAAAK,EAAA,SAAA1M,GAWE,SAAA0M,EACEF,EACAkH,EACA3M,EACAjD,EACAM,GALF,IAAAlE,EAOEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYjD,IAAa9G,YAhB1CkD,EAAAmC,KAAOyD,EAAY8K,UAOnB1Q,EAAA8T,cAAqB,EAUnB9T,EAAK+T,KAAOzH,EACZtM,EAAKkE,YAAcA,IAEvB,OAtB+B1D,EAAAgM,EAAA1M,GAsB/B0M,EAtBA,CAA+B+G,GAAlB/W,EAAAgQ,YAwBb,SAAkBwH,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBAHF,CAAkBxX,EAAAwX,oBAAAxX,EAAAwX,uBAMlB,IAAAC,EAAA,SAAAnU,GAAA,SAAAmU,IAAA,IAAAjU,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YASEkD,EAAAmU,kBAAiB,IAmBnB,OA5ByC3T,EAAAyT,EAAAnU,GAevCmU,EAAAzV,UAAA4V,yBAAA,SAAyBC,EAASC,GAIhC,OAHAxX,KAAKqX,kBAAiB,EACtBrX,KAAKyX,qBAAuBC,QAAQH,EAAIC,GACxCxX,KAAK6G,IAAI6C,EAAYiO,MAAQjO,EAAYkO,SAClC5X,MAGTmX,EAAAzV,UAAAmW,uBAAA,SAAuBxW,GAIrB,OAHArB,KAAKqX,kBAAiB,EACtBrX,KAAK8X,mBAAqBzW,EAC1BrB,KAAK6G,IAAI6C,EAAYiO,MAAQjO,EAAYkO,SAClC5X,MAEXmX,EA5BA,CAAyCV,GAA5B/W,EAAAyX,sBA+Bb,IAAA/K,EAAA,SAAApJ,GAIE,SAAAoJ,EACEsK,EACA3M,EACAjD,EACAM,EACA4E,GALF,IAAA9I,EAOEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYjD,IAAa9G,YAT1CkD,EAAAmC,KAAOyD,EAAYa,OAUjBzG,EAAKkE,YAAcA,EACnBlE,EAAKyT,MAAQvP,EAAYuP,MACzBzT,EAAK8I,KAAOA,IAEhB,OAhB4BtI,EAAA0I,EAAApJ,GAgB5BoJ,EAhBA,CAA4B+K,GAAfzX,EAAA0M,SAmBb,IAAA2L,EAAA,WAiBA,OALE,SAAYnX,EAAcoL,EAAYgM,QAAA,IAAAA,MAAA,MACpChY,KAAKY,KAAOA,EACZZ,KAAKgM,KAAOA,EACZhM,KAAKgY,YAAcA,GAfvB,GAAatY,EAAAqY,YAoBb,IAAAE,EAAA,SAAAjV,GAOE,SAAAiV,EAAYvB,EAAkB3M,EAAoBmO,EAAYlM,GAA9D,IAAA9I,EACEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYA,IAAW/J,YANxCkD,EAAAmC,KAAOyD,EAAY2L,MAOjBvR,EAAKgV,MAAQA,EACbhV,EAAK8I,KAAOA,IAEhB,OAZ2BtI,EAAAuU,EAAAjV,GAY3BiV,EAZA,CAA2Bd,GAAdzX,EAAAuY,QAeb,IAAAxL,EAAA,SAAAzJ,GAcE,SAAAyJ,EACEiK,EACA3M,EACAjD,EACAM,EACA6E,QAAA,IAAAA,MAAA,MALF,IAAA/I,EAOEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYjD,IAAa9G,YAnB1CkD,EAAAmC,KAAOyD,EAAYsM,mBAOnBlS,EAAAiV,UAAkC,IAAIrV,IAEtCI,EAAAkV,mBAAoC,KAWlClV,EAAKkE,YAAcA,EACnBlE,EAAKyT,MAAQvP,EAAYuP,MACzBzT,EAAK+I,eAAiBA,IAgL1B,OAxMuCvI,EAAA+I,EAAAzJ,GA4BrCyJ,EAAA/K,UAAAqK,QAAA,SACEsM,EACAnH,QADA,IAAAmH,MAAA,WACA,IAAAnH,MAAA,MAEA,IAAI8B,EAAcqF,EAAwBtW,EAAAkR,cAAcoF,GAAyB,GAC7EvM,EAAW9L,KAAKmY,UAAUhX,IAAI6R,GAClC,GAAIlH,EAAU,OAAOA,EAErB,IAAI1E,EAAcpH,KAAKoH,YACnBkR,EAAatY,KAAKyJ,GAAGC,EAAY6O,UACjCtM,EAAiBjM,KAAKiM,eAGtBuM,EAAyBtH,EAE7B,GADAA,EAA0B,IAAIpO,IAC1B0V,MACF,IAA2C,IAAAC,EAAA9Q,EAAA6Q,GAAsBE,EAAAD,EAAA5Q,QAAA6Q,EAAA5Q,KAAA4Q,EAAAD,EAAA5Q,OAAA,CAAxD,IAAAE,EAAAC,EAAA0Q,EAAArX,MAAA,GAACsX,EAAA5Q,EAAA,GAAe6Q,EAAA7Q,EAAA,GACvBmJ,EAAwBrK,IACtB8R,EACAC,qGAMN,IAAIR,EAAqBpY,KAAKoY,mBAC9B,GAAIA,EAAoB,CACtB1P,OAAO1I,KAAKyJ,GAAGC,EAAY6O,WAC3B,IACIM,EADmBnQ,OAAOuD,GAAgB7E,YACH0J,eACvCgI,EAAyBD,EAAoB5T,OACjDyD,OAAOoQ,GAA0BV,EAAmBnT,QACpD,IAAK,IAAI5E,EAAI,EAAGA,EAAIyY,IAA0BzY,EAC5C6Q,EAAwBrK,IACtBgS,EAAoBxY,GAAGO,KAAK6G,KAC5B2Q,EAAmB/X,SAIvBqI,QAAQ0P,GAIV,IAEIW,EAFAC,EAAgB5R,EAAYiL,UAC5B4G,EAAyB7R,EAAY0J,eAEzC,GAAIuH,IAA0BU,EAA2BV,EAAsBpT,QAAS,CACtFyD,OAAOuQ,GAA0BF,GAA4BE,EAAuBhU,QACpF,IAAS5E,EAAI,EAAGA,EAAI0Y,IAA4B1Y,EAC9C6Q,EAAwBrK,IACAoS,EAAwB5Y,GAAGO,KAAK6G,KACtD4Q,EAAsBhY,SAI1BqI,QAAQuQ,GAA2D,GAAjCA,EAAuBhU,QAI3D,IAAIiU,EAA8B,KAC9B7H,EAAwB,KAC5B,GAAIiH,EAAY,CAEd,KADAY,EAAgBxQ,OAAOuD,GAAgBF,QAAQqM,EAAoBlH,IAC/C,OAAO,KAC3BG,EAAW6H,EAAclN,KAI3B,IAiBImG,EAjBAgH,EAAsBH,EAAcxH,eACpC4H,EAA0BD,EAAoBlU,OAC9CuM,EAAiB,IAAI1M,MAAYsU,GACjC1H,EAAiB,IAAI5M,MAAcsU,GACnCzH,EAAqB,EACzB,IAAStR,EAAI,EAAGA,EAAI+Y,IAA2B/Y,EAAG,CAChD,IAAIgZ,EAAuBF,EAAoB9Y,GAC3CgZ,EAAqBvH,eAAiB9P,EAAA+P,cAAcC,UACtDL,EAAqBtR,EAAI,GAE3B,IAAIoS,EAAW/J,OAAO2Q,EAAqBrN,MACvCkG,EAAgBlS,KAAK0W,QAAQpF,YAAYmB,EAAUvB,GAAyB,GAChF,IAAKgB,EAAe,OAAO,KAC3BV,EAAenR,GAAK6R,EACpBR,EAAerR,GAAKgZ,EAAqBzY,KAAK6G,KAIhD,GAAIzH,KAAKyJ,GAAGC,EAAY+B,KACtB0G,EAAapQ,EAAA8B,KAAKc,UACb,GAAI3E,KAAKyJ,GAAGC,EAAY8C,aAC7B2F,EAAazJ,OAAOwQ,GAAelN,SAC9B,CACDyG,EAAW/J,OAAOsQ,EAAc7G,YAApC,IACInG,EAAOhM,KAAK0W,QAAQpF,YAAYmB,EAAUvB,GAAyB,GACvE,IAAKlF,EAAM,OAAO,KAClBmG,EAAanG,EAGf,IAAIqG,EAAY,IAAItQ,EAAAuQ,UAAUd,EAAgBW,EAAYd,GAC1DgB,EAAUX,eAAiBA,EAC3BW,EAAUV,mBAAqBA,EAE/B,QAAI7K,EAAe9G,KAAK8G,aAKxB,OAJIkM,EAAY/N,SAAQ6B,GAAgB,IAAMkM,EAAc,MAC5DlH,EAAW,IAAIwN,EAAStZ,KAAM8G,EAAcuL,EAAW6G,GAAgCjN,IAC9EiF,wBAA0BA,EACnClR,KAAKmY,UAAUtR,IAAImM,EAAalH,GACzBA,GAITW,EAAA/K,UAAA6X,eAAA,SAAenB,GAGb,GAFA1P,OAAO1I,KAAKyJ,GAAGC,EAAY6O,WAC3B7P,OAAO1I,KAAKiM,gBACRmM,GAAsBA,EAAmBnT,OAAQ,CACnD,IAAIuU,EAAmB,IAAI/M,EACzBzM,KAAK0W,QACL1W,KAAK+J,WACL/J,KAAK8G,aACL9G,KAAKoH,YACLpH,KAAKiM,gBAIP,OAFAuN,EAAiB7C,MAAQ3W,KAAK2W,MAC9B6C,EAAiBpB,mBAAqBA,EAC/BoB,EAET,OAAOxZ,MAITyM,EAAA/K,UAAAkR,0BAAA,SACEQ,EACAlC,EACAuI,GAEA,IAAIC,EAAuC,KAC3C,OAAI1Z,KAAKyJ,GAAGC,EAAYiQ,WACtBjR,OAA4B,MAArB0K,GAAyD,GAA5BA,EAAkBnO,QACtDyU,EAAwB1Z,KAAK0W,QAAQvD,qBACnCzK,OAAO1I,KAAKoH,YAAY0J,gBACxBsC,EACAlC,EACAuI,IAIGzZ,KAAK+L,QAAQ2N,EAAuBxI,GAFN,MAMvCzE,EAAA/K,UAAAkY,4BAAA,SACExG,EACAlC,GAEAxI,OAAO1I,KAAKyJ,GAAGC,EAAYQ,UAC3B,IAAIwP,EAAuC,KAC3C,GAAItG,EAAmB,CACrB,IAAIpO,EAAIoO,EAAkBnO,OAC1ByU,EAAwB,IAAI5U,MAAYE,GACxC,IAAK,IAAI3E,EAAI,EAAGA,EAAI2E,IAAK3E,EAAG,CAC1B,IAAIwZ,EAAe7Z,KAAK0W,QAAQpF,YAC9B8B,EAAkB/S,GAClB6Q,GACA,GAEF,IAAK2I,EAAc,OAAO,KAC1BH,EAAsBrZ,GAAKwZ,GAG/B,OAAOH,GAGTjN,EAAA/K,UAAA4M,SAAA,WAAqB,OAAOtO,KAAK+J,YACnC0C,EAxMA,CAAuCgK,GAA1B/W,EAAA+M,oBA2Mb,IAAA6M,EAAA,SAAAtW,GAiCE,SAAAsW,EACE5X,EACAoF,EACAuL,EACAuD,QAAA,IAAAA,MAAA,MAJF,QAAA1S,EAMEF,EAAAxC,KAAAR,KAAM0B,EAAUgV,QAAShV,EAAUqI,WAAYjD,IAAa9G,KAK5D,GA1CFkD,EAAAmC,KAAOyD,EAAYgR,SASnB5W,EAAA6W,OAA4B,IAAIjX,IAEhCI,EAAA8W,oBAEA9W,EAAA+W,aAA8B,KAM9B/W,EAAAgX,eAAiC,KAEjChX,EAAAiX,IAAmB,EAEnBjX,EAAAkX,oBAA2B,EAE3BlX,EAAAmX,WAA8B,KAEtBnX,EAAAoX,YAAmB,EACnBpX,EAAAqX,WAA2B,KA8E3BrX,EAAAsX,SAA2B,KAC3BtX,EAAAuX,SAA2B,KAC3BvX,EAAAwX,SAA2B,KAC3BxX,EAAAyX,SAA2B,KAvEjCzX,EAAKxB,UAAYA,EACjBwB,EAAKmP,UAAYA,EACjBnP,EAAK0S,SAAWA,EAChB1S,EAAKyT,MAAQjV,EAAUiV,OACjBjV,EAAU+H,GAAGC,EAAYkR,QAAUlR,EAAYQ,WAAYxI,EAAU+H,GAAGC,EAAYmR,SAAW,CACnG,IAAIC,EAAa,EACjB,GAAIlF,GAAYA,EAASvQ,MAAQyD,EAAY+L,MAAO,CAClDnM,OAAOxF,EAAKuG,GAAGC,EAAY6O,WAC3BrV,EAAK6W,OAAOlT,IACV,OACA,IAAIoR,EACFvW,EAAUgV,QACV,OACAoE,IACApS,OAAO2J,EAAUhB,YAGrB,IAAIH,EAAkC0E,EAAU1E,wBAChD,GAAIA,EAAyB,CACtBhO,EAAKgO,0BACRhO,EAAKgO,wBAA0B,IAAIpO,SAErC,IAA2C,IAAAiY,EAAApT,EAAAuJ,GAAuB8J,EAAAD,EAAAlT,QAAAmT,EAAAlT,KAAAkT,EAAAD,EAAAlT,OAAA,CAAzD,IAAAE,EAAAC,EAAAgT,EAAA3Z,MAAA,GAACsX,EAAA5Q,EAAA,GAAe6Q,EAAA7Q,EAAA,GACvB7E,EAAKgO,wBAAwBrK,IAAI8R,EAAeC,4GAIpDlQ,QAAQxF,EAAKuG,GAAGC,EAAY6O,WAG9B,IADA,IAAI/G,EAAiBa,EAAUb,eACtBnR,EAAI,EAAG2E,EAAIwM,EAAevM,OAAQ5E,EAAI2E,IAAK3E,EAAG,CACrD,IAAI6R,EAAgBV,EAAenR,GAC/B4a,EAAgB5I,EAAU6I,iBAAiB7a,GAC/C6C,EAAK6W,OAAOlT,IACVoU,EACA,IAAIhD,EACFvW,EAAUgV,QACVuE,EACAH,IACA5I,YAKRhP,EAAK6Q,KAAOoH,EAAKC,OAAOlY,KAuK5B,OA3P8BQ,EAAA4V,EAAAtW,GAwF5BsW,EAAA5X,UAAA2Z,SAAA,SAASrP,EAAYpL,QAAA,IAAAA,MAAA,MAEnB,IAAIka,EAAa9a,KAAKqS,UAAUb,eAAevM,OAASjF,KAAKga,iBAAiB/U,OAC1EjF,KAAKyJ,GAAGC,EAAY6O,aAAauC,EACrC,IAAIQ,EAAQ,IAAIrD,EACdjY,KAAK0B,UAAUgV,QACf9V,GAEI,OAASka,EAAWxM,SAAS,IACjCwM,EACA9O,GAEF,GAAIpL,EAAM,CACR,GAAIZ,KAAK+Z,OAAO/P,IAAIpJ,GAAO,MAAM,IAAIgL,MAAM,wBAC3C5L,KAAK+Z,OAAOlT,IAAIjG,EAAM0a,GAGxB,OADAtb,KAAKga,iBAAiBnP,KAAKmB,GACpBsP,GASThC,EAAA5X,UAAA6Z,aAAA,SAAavP,GACX,IAAIwP,EACJ,OAAQxP,EAAKyP,gBACX,KAAKxZ,EAAAyZ,WAAWC,IACdH,EAAQxb,KAAKwa,SACb,MAEF,KAAKvY,EAAAyZ,WAAWE,IACdJ,EAAQxb,KAAKya,SACb,MAEF,KAAKxY,EAAAyZ,WAAWG,IACdL,EAAQxb,KAAK0a,SACb,MAEF,KAAKzY,EAAAyZ,WAAWI,IACdN,EAAQxb,KAAK2a,SACb,MAEF,QAAS,MAAM,IAAI/O,MAAM,0BAE3B,GAAI4P,GAASA,EAAMvW,OAAQ,CACzB,IAAI8W,EAAMP,EAAMQ,MAEhB,OADAD,EAAI/P,KAAOA,EACJ+P,EAET,OAAO/b,KAAKqb,SAASrP,IAIvBsN,EAAA5X,UAAAua,cAAA,SAAcX,GACZ,IAAIE,EAEJ,OADA9S,OAAqB,MAAd4S,EAAMtP,MACEsP,EAAMtP,KAAMyP,gBACzB,KAAKxZ,EAAAyZ,WAAWC,IACdH,EAAQxb,KAAKwa,WAAaxa,KAAKwa,aAC/B,MAEF,KAAKvY,EAAAyZ,WAAWE,IACdJ,EAAQxb,KAAKya,WAAaza,KAAKya,aAC/B,MAEF,KAAKxY,EAAAyZ,WAAWG,IACdL,EAAQxb,KAAK0a,WAAa1a,KAAK0a,aAC/B,MAEF,KAAKzY,EAAAyZ,WAAWI,IACdN,EAAQxb,KAAK2a,WAAa3a,KAAK2a,aAC/B,MAEF,QAAS,MAAM,IAAI/O,MAAM,0BAE3B4P,EAAM3Q,KAAKyQ,IAIbhC,EAAA5X,UAAAwa,oBAAA,SAAoBlQ,GAClB,IAAIwP,EACJ,OAAQxP,EAAKyP,gBACX,KAAKxZ,EAAAyZ,WAAWC,IACdH,EAAQxb,KAAKwa,WAAaxa,KAAKwa,aAC/B,MAEF,KAAKvY,EAAAyZ,WAAWE,IACdJ,EAAQxb,KAAKya,WAAaza,KAAKya,aAC/B,MAEF,KAAKxY,EAAAyZ,WAAWG,IACdL,EAAQxb,KAAK0a,WAAa1a,KAAK0a,aAC/B,MAEF,KAAKzY,EAAAyZ,WAAWI,IACdN,EAAQxb,KAAK2a,WAAa3a,KAAK2a,aAC/B,MAEF,QAAS,MAAM,IAAI/O,MAAM,0BAE3B,GAAI4P,EAAMvW,OAAS,EACjB,OAAOuW,EAAMA,EAAMvW,OAAS,GAE9B,IAAIqW,EAAetb,KAAKqb,SAASrP,GAEjC,OADAwP,EAAM3Q,KAAKyQ,GACJA,GAIThC,EAAA5X,UAAAya,kBAAA,WACE,IAAIC,EAAKpc,KAAKsa,cAMd,OALKta,KAAKua,WAGRva,KAAKua,WAAW1P,KAAKuR,GAFrBpc,KAAKua,YAAe6B,GAIfpc,KAAKia,aAAemC,EAAG9N,SAAS,KAIzCgL,EAAA5X,UAAA2a,kBAAA,WACE3T,OAA0B,MAAnB1I,KAAKua,YACZ,IAAItV,EAAiBjF,KAAKua,WAAYtV,OACtCyD,OAAOzD,EAAS,GACRjF,KAAKua,WAAYyB,MACrB/W,EAAS,EACXjF,KAAKia,aAAuBja,KAAKua,WAAYtV,EAAS,GAAGqJ,SAAS,KAElEtO,KAAKia,aAAe,KACpBja,KAAKua,WAAa,OAKtBjB,EAAA5X,UAAA4a,SAAA,SAAS3c,EAAgBwa,GAMvB,GALAna,KAAKma,IAAMA,EACXzR,QAAQ1I,KAAKua,aAAeva,KAAKua,WAAWtV,QAC5CjF,KAAKua,WAAa,KAClBva,KAAKia,aAAe,KACpBja,KAAKwa,SAAWxa,KAAKya,SAAWza,KAAK0a,SAAW1a,KAAK2a,SAAW,KAC5D3a,KAAK0W,QAAQ9S,QAAQ2Y,UAAW,CAClC,IAAIrC,EAAiBla,KAAKka,eAC1B,GAAIA,EACF,IAAK,IAAI7Z,EAAI,EAAG2E,EAAIkV,EAAejV,OAAQ5E,EAAI2E,IAAK3E,EAAG,CACrD,IAAImc,EAAgBtC,EAAe7Z,GACnCV,EAAO8c,iBACLtC,EACAqC,EAAcE,aACdF,EAAc5S,OAAO+S,eACrBH,EAAcI,KACdJ,EAAcK,SAKtB7c,KAAKka,eAAiB,MAIxBZ,EAAA5X,UAAA4M,SAAA,WAAqB,OAAOtO,KAAK0B,UAAUqI,YAC7CuP,EA3PA,CAA8B7C,GAAjB/W,EAAA4Z,WA8Pb,IAAA/C,EAAA,SAAAvT,GAUE,SAAAuT,EAAYG,EAAkBrE,GAA9B,IAAAnP,EACEF,EAAAxC,KAAAR,KAAM0W,EAAS,GAAI,KAAG1W,KATxBkD,EAAAmC,KAAOyD,EAAYgU,gBAUjB,IAAI/S,EAAasI,EAAU0K,2BAC3B7Z,EAAK6G,WAAaA,EAClB7G,EAAK4D,aAAeiD,EACpB7G,EAAKmP,UAAYA,EACjBnP,EAAK8I,KAAOjK,EAAA8B,KAAKQ,IAAImO,WAAWH,KAEpC,OAlBoC3O,EAAA6S,EAAAvT,GAkBpCuT,EAlBA,CAAoCE,GAAvB/W,EAAA6W,iBAqBb,IAAAhK,EAAA,SAAAvJ,GAUE,SAAAuJ,EACEN,EACAlC,EACAjD,EACAM,GAJF,IAAAlE,EAMEF,EAAAxC,KAAAR,KAAMiM,EAAeyK,QAAS3M,EAAYjD,IAAa9G,YAdzDkD,EAAAmC,KAAOyD,EAAYkU,gBAejB9Z,EAAK+I,eAAiBA,EACtB/I,EAAKkE,YAAcA,EACnBlE,EAAKyT,MAAQvP,EAAYuP,QAE7B,OArBoCjT,EAAA6I,EAAAvJ,GAqBpCuJ,EArBA,CAAoCkK,GAAvB/W,EAAA6M,iBAwBb,IAAA0Q,EAAA,SAAAja,GAUE,SAAAia,EAAYvb,EAA2BoF,EAAsBkF,GAA7D,IAAA9I,EACEF,EAAAxC,KAAAR,KAAM0B,EAAUgV,QAAShV,EAAUqI,WAAYjD,IAAa9G,YAT9DkD,EAAAmC,KAAOyD,EAAY4L,MAKnBxR,EAAAga,cAAqB,EAKnBha,EAAKxB,UAAYA,EACjBwB,EAAKyT,MAAQjV,EAAUiV,MACvBzT,EAAK8I,KAAOA,IAEhB,OAhB2BtI,EAAAuZ,EAAAja,GAgB3Bia,EAhBA,CAA2B9F,GAAdzX,EAAAud,QAmBb,IAAAlO,EAAA,SAAA/L,GAYE,SAAA+L,EACE2H,EACA3M,EACAjD,EACAQ,GAJF,IAAApE,EAMEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYjD,IAAa9G,YAhB1CkD,EAAAmC,KAAOyD,EAAY8F,SAKnB1L,EAAA2L,gBAA4C,KAE5C3L,EAAA4L,gBAA4C,KAU1C5L,EAAKoE,OAASA,IAElB,OArB8B5D,EAAAqL,EAAA/L,GAqB9B+L,EArBA,CAA8B0H,GAAjB/W,EAAAqP,WAwBb,IAAA1E,EAAA,SAAArH,GAsCE,SAAAqH,EACEqM,EACA3M,EACAjD,EACAM,GAJF,IAAAlE,EAMEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYjD,IAAa9G,YA1C1CkD,EAAAmC,KAAOyD,EAAYC,gBAKnB7F,EAAAiV,UAA+B,IAAIrV,IAEnCI,EAAAmJ,gBAA8C,KAE9CnJ,EAAA+F,cAAuC,KAEvC/F,EAAAwJ,qBAAiD,KAGjDxJ,EAAAuK,aAA8B,KAE9BvK,EAAAwK,aAA8B,KAE9BxK,EAAAyK,SAA0B,KAE1BzK,EAAA0K,WAA4B,KAE5B1K,EAAA2K,WAA4B,KAE5B3K,EAAA4K,SAA0B,KAE1B5K,EAAA6K,aAA8B,KAE9B7K,EAAA8K,aAA8B,KAE9B9K,EAAA+K,YAA6B,KAE7B/K,EAAAgL,aAA8B,KAE9BhL,EAAAiL,SAA0B,KASxBjL,EAAKkE,YAAcA,EACnBlE,EAAKyT,MAAQvP,EAAYuP,QAuM7B,OArPoCjT,EAAA2G,EAAArH,GAkDlCqH,EAAA3I,UAAAqK,QAAA,SACE8G,EACA3B,QAAA,IAAAA,MAAA,MAEA,IAAI8B,EAAcH,EAAgB9Q,EAAAkR,cAAcJ,GAAiB,GAC7D/G,EAAW9L,KAAKmY,UAAUhX,IAAI6R,GAClC,GAAIlH,EAAU,OAAOA,EAGrB,IAAI0M,EAAyBtH,EAE7B,GADAA,EAA0B,IAAIpO,IAC1B0V,MACF,IAA2C,IAAA2E,EAAAxV,EAAA6Q,GAAsB4E,EAAAD,EAAAtV,QAAAuV,EAAAtV,KAAAsV,EAAAD,EAAAtV,OAAA,CAAxD,IAAAE,EAAAC,EAAAoV,EAAA/b,MAAA,GAACsX,EAAA5Q,EAAA,GAAe6Q,EAAA7Q,EAAA,GACvBmJ,EAAwBrK,IAAI8R,EAAeC,qGAI/C,IA6BIvY,EAAQ2E,EA7BRoC,EAAcpH,KAAKoH,YACnBiW,EAA0B,KAC9B,GAAIjW,EAAYuB,YAAa,CAC3B,IAAI2U,EAAgBtd,KAAK0W,QAAQpF,YAAYlK,EAAYuB,YAAa,MACtE,IAAK2U,EAAe,OAAO,KAC3B,KAAMD,EAAYC,EAAc3I,gBAK9B,OAJA3U,KAAK0W,QAAQzP,MACXnF,EAAAoF,eAAe8B,sCACf5B,EAAYuB,YAAYtB,OAEnB,KAET,GAAIgW,EAAU5T,GAAGC,EAAY6T,QAK3B,OAJAvd,KAAK0W,QAAQzP,MACXnF,EAAAoF,eAAesW,yCACfpW,EAAYuB,YAAYtB,MAAOgW,EAAUvW,cAEpC,KAET,GAAIuW,EAAU3b,UAAU+H,GAAGC,EAAYc,YAAcxK,KAAKyJ,GAAGC,EAAYc,WAKvE,OAJAxK,KAAK0W,QAAQzP,MACXnF,EAAAoF,eAAeuW,6CACfzb,EAAA0I,MAAMC,KAAKvD,EAAYxG,KAAKyG,MAAOD,EAAYuB,YAAYtB,QAEtD,KAMX,GAAIwL,EAAe,CACjB,IAAK7N,EAAI6N,EAAc5N,SAAWmC,EAAY0J,eAAe7L,OAC3D,MAAM,IAAI2G,MAAM,gCAElB,IAAKvL,EAAI,EAAGA,EAAI2E,IAAK3E,EACnB6Q,EAAwBrK,IAAIO,EAAY0J,eAAezQ,GAAGO,KAAK6G,KAAMoL,EAAcxS,SAEhF,GAAI+G,EAAY0J,eAAe7L,OACpC,MAAM,IAAI2G,MAAM,gCAGlB,IAAI9E,EAAe9G,KAAK8G,aACpBkM,EAAY/N,SACd6B,GAAgB,IAAMkM,EAAc,MAEtClH,EAAW,IAAI4R,EAAM1d,KAAM8G,EAAc+L,EAAewK,IAC/CnM,wBAA0BA,EACnClR,KAAKmY,UAAUtR,IAAImM,EAAalH,GAEhC,gBAAIoR,EAAoB,EACxB,GAAIG,IACFH,EAAeG,EAAUM,oBACrBN,EAAUvS,SAAS,CAChBgB,EAAShB,UAASgB,EAAShB,QAAU,IAAIhI,SAC9C,IAA4B,IAAAuG,EAAA1B,EAAA0V,EAAUvS,QAAQwE,UAAQsO,EAAAvU,EAAAxB,QAAA+V,EAAA9V,KAAA8V,EAAAvU,EAAAxB,OAAA,CAAjD,IAAIgW,EAAeD,EAAAvc,MACtByK,EAAShB,QAAQjE,IAAIgX,EAAgB9T,WAAY8T,sGAKvD,GAAI7d,KAAK0M,qBAAsB,CAC7B,IAAIoR,EAAqB9d,KAAK0M,qBAAqB6M,eAAe1G,GAC9DiL,IACFhS,EAASiS,oBAAsBD,EAAmB/R,WAKtD,GAAI/L,KAAKqM,oBACP,IAAmB,IAAA2R,EAAArW,EAAA3H,KAAKqM,gBAAgBiD,UAAQ2O,EAAAD,EAAAnW,QAAAoW,EAAAnW,KAAAmW,EAAAD,EAAAnW,OAAA,CAA3C,IAAIQ,EAAM4V,EAAA5c,MACb,OAAQgH,EAAOhD,MACb,KAAKyD,EAAYkU,gBACVlR,EAAShB,UAASgB,EAAShB,QAAU,IAAIhI,KAC9C,IAAIob,EAAoC7V,EAAQjB,YAChD,IAAK8W,EAAiBlS,KACpB,MAAM,IAAIJ,MAAM,iBAElB,IAAIuS,EAAYne,KAAK0W,QAAQpF,YAC3B4M,EAAiBlS,KACjBF,EAASoF,yBAEX,GAAIiN,EAAW,CACb,IAAIC,EAAgB,IAAInB,EACN5U,EAChBvB,EAAepH,EAAA4C,mBAAsC+F,EAAQ0B,WAC7DoU,GAEF,OAAQA,EAAUE,UAChB,KAAK,EAAG,MACR,KAAK,EACgB,EAAfnB,KAAoBA,EACxB,MAEF,KAAK,EACgB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IACtC,MAEF,KAAK,EACgB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IACtC,MAEF,QAASxU,QAAO,GAElB0V,EAAclB,aAAeA,EAC7BA,GAAgBiB,EAAUE,SAC1BvS,EAAShB,QAAQjE,IAAIwB,EAAO0B,WAAYqU,GAE1C,MAEF,KAAKtV,EAAYsM,mBACVtJ,EAAShB,UAASgB,EAAShB,QAAU,IAAIhI,KAC9C,IAAIwb,EAAsCjW,EAAQkR,eAAe1G,GAC7DyL,IACFA,EAAgBxX,aAAeA,EAAepH,EAAA4C,mBAAqBgc,EAAgBvU,WACnF+B,EAAShB,QAAQjE,IAAIwB,EAAO0B,WAAYuU,IAE1C,MAEF,KAAKxV,EAAY8F,SACV9C,EAAShB,UAASgB,EAAShB,QAAU,IAAIhI,KAC9C,IAAI+L,EAAkBnG,OAAkBL,EAAQwG,iBAC5CC,EAA6BzG,EAAQyG,gBACrCyP,EAAmB,IAAIxP,EACzB/O,KAAK0W,QACLrO,EAAO0B,WACPjD,EAAepH,EAAA4C,mBAAqB+F,EAAO0B,WAC3C/J,MAEEwe,EAAyB3P,EAAgB0K,eAAe1G,GAC5D,IAAK2L,EAAwB,OAAO,KAKpC,GAJAA,EAAuB1X,aACrBA,EAAepH,EAAA4C,mBAAqBkc,EAAuBzU,WAE7DwU,EAAiB1P,gBAAkB2P,EAC/B1P,EAAiB,CACnB,IAAI2P,EAAyB3P,EAAgByK,eAAe1G,GAC5D,IAAK4L,EAAwB,OAAO,KACpCA,EAAuB3X,aACrBA,EAAepH,EAAA4C,mBAAqBmc,EAAuB1U,WAE7DwU,EAAiBzP,gBAAkB2P,EAErC3S,EAAShB,QAAQjE,IAAIwB,EAAO0B,WAAYwU,GACxC,MAEF,QAAS7V,QAAO,sGAKtB,OADAoD,EAAS6R,oBAAsBT,EACxBpR,GAITzB,EAAA3I,UAAAkR,0BAAA,SACEQ,EACAlC,EACAmC,GAEA,IAAIqG,EAAuC,KAC3C,GAAI1Z,KAAKyJ,GAAGC,EAAYiQ,UAQtB,GAPAjR,OAA4B,MAArB0K,GAAyD,GAA5BA,EAAkBnO,UACtDyU,EAAwB1Z,KAAK0W,QAAQvD,qBACnCnT,KAAKoH,YAAY0J,eACjBsC,EACAlC,EACAmC,IAE0B,OAAO,UAEnC3K,OAA4B,MAArB0K,IAA8BA,EAAkBnO,QAEzD,OAAOjF,KAAK+L,QAAQ2N,EAAuBxI,IAG7C7G,EAAA3I,UAAA4M,SAAA,WACE,OAAOtO,KAAK+J,YAEhBM,EArPA,CAAoCoM,GAAvB/W,EAAA2K,iBAwPb,IAAAqT,EAAA,SAAA1a,GAoBE,SAAA0a,EACEhc,EACAoF,EACA+L,EACAkC,QADA,IAAAlC,MAAA,WACA,IAAAkC,MAAA,MAJF,IAAA7R,EAMEF,EAAAxC,KAAAR,KAAM0B,EAAUgV,QAAShV,EAAUqI,WAAYjD,IAAa9G,KAQ5D,GAhCFkD,EAAAmC,KAAOyD,EAAY+L,MAWnB3R,EAAAgO,wBAAmD,KAEnDhO,EAAAya,oBAA2B,EAE3Bza,EAAA6a,oBAAuC,KAUrC7a,EAAKxB,UAAYA,EACjBwB,EAAKyT,MAAQjV,EAAUiV,MACvBzT,EAAK2P,cAAgBA,EACrB3P,EAAK8I,KAAOtK,EAAUgV,QAAQ9S,QAAQW,UAAUma,QAAQxb,GACxDA,EAAK6R,KAAOA,EAGRA,GACEA,EAAK7D,wBAAyB,CAC3BhO,EAAKgO,0BAAyBhO,EAAKgO,wBAA0B,IAAIpO,SACtE,IAAiC,IAAAiF,EAAAJ,EAAAoN,EAAK7D,yBAAuByN,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAApD,IAAAwB,EAAArB,EAAA2W,EAAAtd,MAAA,GAAC2N,EAAA3F,EAAA,GAAUuV,EAAAvV,EAAA,GAClBnG,EAAKgO,wBAAwBrK,IAAImI,EAAU4P,sGAMjD,IACIve,EAAQ2E,MADRoC,EAAclE,EAAKxB,UAAU0F,YAEjC,GAAIA,EAAa,CACf,IAAI0J,EAAiB1J,EAAY0J,eACjC,GAAI+B,EAAe,CACjB,IAAK7N,EAAI6N,EAAc5N,SAAW6L,EAAe7L,OAC/C,MAAM,IAAI2G,MAAM,gCAElB,GAAI5G,EAEF,IADK9B,EAAKgO,0BAAyBhO,EAAKgO,wBAA0B,IAAIpO,KACjEzC,EAAI,EAAGA,EAAI2E,IAAK3E,EACnB6C,EAAKgO,wBAAwBrK,IAAIiK,EAAezQ,GAAGO,KAAK6G,KAAMoL,EAAcxS,SAG3E,GAAIyQ,EAAe7L,OACxB,MAAM,IAAI2G,MAAM,yCAmBxB,OA9E2BlI,EAAAga,EAAA1a,GAiEzB0a,EAAAhc,UAAAmd,eAAA,SAAetK,GACb,IAAIuK,EAAwB9e,KAC5B,GACE,GAAI8e,GAAWvK,EACb,OAAO,QAEFuK,EAAUA,EAAQ/J,MAC3B,OAAO,GAGT2I,EAAAhc,UAAA4M,SAAA,WACE,OAAOtO,KAAK0B,UAAUqI,YAE1B2T,EA9EA,CAA2BjH,GAAd/W,EAAAge,QAiFb,IAAAlN,EAAA,SAAAxN,GAQE,SAAAwN,EACEkG,EACA3M,EACAjD,EACAM,GAJF,IAAAlE,EAMEF,EAAAxC,KAAAR,KAAM0W,EAAS3M,EAAYjD,EAAcM,IAAYpH,YAZvDkD,EAAAmC,KAAOyD,EAAYiW,sBAcrB,OAhBwCrb,EAAA8M,EAAAxN,GAgBxCwN,EAhBA,CAAwCnG,GAA3B3K,EAAA8Q,qBAmBb,IAAAwO,EAAA,SAAAhc,GAUE,SAAAgc,EACEtd,EACAoF,EACA+L,EACAkC,QADA,IAAAlC,eACA,IAAAkC,MAAA,MAJF,IAAA7R,EAMEF,EAAAxC,KAAAR,KAAM0B,EAAWoF,EAAc+L,EAAekC,IAAK/U,YAdrDkD,EAAAmC,KAAOyD,EAAYmW,YAgBrB,OAlB+Bvb,EAAAsb,EAAAhc,GAkB/Bgc,EAlBA,CAA+BtB,GAAlBhe,EAAAsf,YAqBb,SAAkBE,GAEhBA,IAAA,eAGAA,IAAA,qBAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,yBAEAA,IAAA,0BAGAA,IAAA,kDAEAA,IAAA,gDAEAA,IAAA,iDAEAA,IAAA,uDAEAA,IAAA,uDAxBF,CAAkBxf,EAAAwf,YAAAxf,EAAAwf,eA4BlB,IAAA/D,EAAA,WA0BE,SAAAA,IAbAnb,KAAAmf,aAAyC,KAiG3C,OA9FShE,EAAAC,OAAP,SAAcgE,GACZ,IAAIC,EAAa,IAAIlE,EAMrB,OALAkE,EAAW/X,OAAS,KACpB+X,EAAW1I,MAAK,EAChB0I,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACjBF,GAMTlE,EAAAzZ,UAAA+H,GAAA,SAAGoN,GAAyB,OAAQ7W,KAAK2W,MAAQE,IAASA,GAE1DsE,EAAAzZ,UAAAmF,IAAA,SAAIgQ,GAAyB7W,KAAK2W,OAASE,GAE3CsE,EAAAzZ,UAAA8d,MAAA,SAAM3I,GAAyB7W,KAAK2W,QAAUE,GAG9CsE,EAAAzZ,UAAA+d,mBAAA,WACE,IAAIC,EAAS,IAAIvE,EAMjB,OALAuE,EAAOpY,OAAStH,KAChB0f,EAAO/I,MAAQ3W,KAAK2W,MACpB+I,EAAON,gBAAkBpf,KAAKof,gBAC9BM,EAAOJ,cAAgBtf,KAAKsf,cAC5BI,EAAOH,WAAavf,KAAKuf,WAClBG,GAITvE,EAAAzZ,UAAAie,mBAAA,WACE,QAAIrY,EAASoB,OAAO1I,KAAKsH,QAGzB,GAAItH,KAAKmf,aAAc,KACrB,IAAwB,IAAApX,EAAAJ,EAAA3H,KAAKmf,aAAa7P,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAA7C,IAAI+X,EAAWjB,EAAAtd,MAClBrB,KAAKof,gBAAgBnD,cAAc2D,qGAErC5f,KAAKmf,aAAe,KAoBtB,OAhBInf,KAAKyJ,GAAE,IACTnC,EAAOT,IAAG,IAER7G,KAAKyJ,GAAE,IACTnC,EAAOT,IAAG,IAER7G,KAAKyJ,GAAE,IAAsBnC,EAAOiY,YAAcvf,KAAKuf,YACzDjY,EAAOT,IAAG,KAER7G,KAAKyJ,GAAE,IAAyBnC,EAAOgY,eAAiBtf,KAAKsf,eAC/DhY,EAAOT,IAAG,KAER7G,KAAKyJ,GAAE,KACTnC,EAAOT,IAAG,KAGLS,GAIT6T,EAAAzZ,UAAAme,eAAA,SAAejf,EAAcoL,EAAYyN,GACvC,IAAImG,EAAc5f,KAAKof,gBAAgB7D,aAAavP,GACpD,GAAKhM,KAAKmf,cACL,GAAInf,KAAKmf,aAAanV,IAAIpJ,GAK7B,YAJAZ,KAAKof,gBAAgB1I,QAAQzP,MAC3BnF,EAAAoF,eAAe+C,uBACfwP,EAAWpS,YAJSrH,KAAKmf,aAAe,IAAIrc,IAQhD9C,KAAKmf,aAAatY,IAAIjG,EAAMgf,IAI9BzE,EAAAzZ,UAAAsS,eAAA,SAAepT,GACb,IAAI0a,EACAwD,EAAuB9e,KAC3B,GACE,GAAI8e,EAAQK,eAAiB7D,EAAQwD,EAAQK,aAAahe,IAAIP,IAC5D,OAAO0a,QAEFwD,EAAUA,EAAQxX,QAC3B,OAAOtH,KAAKof,gBAAgBrF,OAAO5Y,IAAIP,IAIzCua,EAAAzZ,UAAA4a,SAAA,WACE5T,OAAsB,MAAf1I,KAAKsH,OAAgB,mCAC5BtH,KAAKsf,cAAgB,KACrBtf,KAAKuf,WAAa,MAEtBpE,EA9GA,GAAazb,EAAAyb,oJC1qGb2E,EAAA3f,EAAA,KACA2f,EAAA3f,EAAA,KACA2f,EAAA3f,EAAA,KACA2f,EAAA3f,EAAA,oFCCA,IAeY4f,EAfZC,EAAA7f,EAAA,GAKA8f,EAAA9f,EAAA,GAIA+f,EAAA/f,EAAA,GAgBA,SAAAggB,EAA2CC,GACzC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,MAAO,OACrC,KAAKN,EAAmBO,QAAS,MAAO,UACxC,KAAKP,EAAmBQ,MAAO,MAAO,QACtC,QAEE,OADA7X,QAAO,GACA,IAeb,SAAA8X,EAA0CJ,GACxC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,OAAO3gB,EAAA+gB,WACrC,KAAKV,EAAmBO,QAAS,OAAO5gB,EAAAghB,aACxC,KAAKX,EAAmBQ,MAAO,OAAO7gB,EAAAihB,UACtC,QAEE,OADAjY,QAAO,GACA,IA5CXhJ,EAAAwH,eAAAgZ,EAAAhZ,eACAxH,EAAAkhB,uBAAAV,EAAAU,uBAIF,SAAYb,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAArgB,EAAAqgB,qBAAArgB,EAAAqgB,wBAUZrgB,EAAAygB,6BAaazgB,EAAA+gB,WAAqB,QAErB/gB,EAAAghB,aAAuB,QAEvBhhB,EAAAihB,UAAoB,QAEpBjhB,EAAAmhB,YAAsB,OAGnCnhB,EAAA8gB,4BAaA,IAAAM,EAAA,WAYE,SAAAA,EAAoBC,EAAWX,EAA8BY,GAH7DhhB,KAAAqH,MAAsB,KAIpBrH,KAAK+gB,KAAOA,EACZ/gB,KAAKogB,SAAWA,EAChBpgB,KAAKghB,QAAUA,EA4EnB,OAxESF,EAAA1F,OAAP,SACE2F,EACAX,EACAa,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUhB,EAAAY,uBAAuBG,GAIrC,OAHY,MAARE,IAAcD,EAAUA,EAAQI,QAAQ,MAAOH,IACvC,MAARC,IAAcF,EAAUA,EAAQI,QAAQ,MAAOF,IACvC,MAARC,IAAcH,EAAUA,EAAQI,QAAQ,MAAOD,IAC5C,IAAIL,EAAkBC,EAAMX,EAAUY,IAIxCF,EAAAO,WAAP,SACEN,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkB1F,OAAO2F,EAAMhB,EAAmBM,KAAMY,EAAMC,IAIhEJ,EAAAQ,cAAP,SACEP,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkB1F,OAAO2F,EAAMhB,EAAmBO,QAASW,EAAMC,IAInEJ,EAAAS,YAAP,SACER,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkB1F,OAAO2F,EAAMhB,EAAmBQ,MAAOU,EAAMC,IAIxEJ,EAAApf,UAAA8f,UAAA,SAAUna,GAER,OADArH,KAAKqH,MAAQA,EACNrH,MAIT8gB,EAAApf,UAAA4M,SAAA,WACE,OAAItO,KAAKqH,MAEL8Y,EAA2BngB,KAAKogB,UAChC,IACApgB,KAAK+gB,KAAKzS,SAAS,IACnB,MACAtO,KAAKghB,QACL,QACAhhB,KAAKqH,MAAMuC,OAAO6X,eAClB,IACAzhB,KAAKqH,MAAMuV,KAAKtO,SAAS,IACzB,IACAtO,KAAKqH,MAAMwV,OAAOvO,SAAS,IAI7B6R,EAA2BngB,KAAKogB,UAChC,IACApgB,KAAK+gB,KAAKzS,SAAS,IACnB,KACAtO,KAAKghB,SAGXF,EA3FA,GAqIA,SAAAY,EAAwCra,EAAcsa,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIla,EAAOJ,EAAMuC,OAAOnC,KACpBma,EAAMna,EAAKxC,OACX4c,EAAQxa,EAAMwa,MACdC,EAAMza,EAAMya,IACTD,EAAQ,IAAM5B,EAAA8B,YAAYta,EAAKua,WAAWH,EAAQ,KACvDA,IAEF,KAAOC,EAAMF,IAAQ3B,EAAA8B,YAAYta,EAAKua,WAAWF,KAC/CA,IAOF,IALA,IAAIG,GACF,MACAxa,EAAK8I,UAAUsR,EAAOC,GACtB,OAEKD,EAAQxa,EAAMwa,OACnBI,EAAGpX,KAAK,KACRgX,IAGF,GADIF,GAAWM,EAAGpX,KAAKnL,EAAAihB,WACnBtZ,EAAMwa,OAASxa,EAAMya,IACvBG,EAAGpX,KAAK,UAER,KAAOgX,IAAUxa,EAAMya,KACrBG,EAAGpX,KAAK,KAIZ,OADI8W,GAAWM,EAAGpX,KAAKnL,EAAAmhB,aAChBoB,EAAGtX,KAAK,IAlKJjL,EAAAohB,oBA8FbphB,EAAAwiB,wBAAA,SACElB,EACAW,EACAQ,QADA,IAAAR,OAAA,QACA,IAAAQ,OAAA,GAIA,IAAIF,KAUJ,GATIN,GAAWM,EAAGpX,KAAK2V,EAA0BQ,EAAQZ,WACzD6B,EAAGpX,KAAKsV,EAA2Ba,EAAQZ,WACvCuB,GAAWM,EAAGpX,KAAKnL,EAAAmhB,aACvBoB,EAAGpX,KAAKmW,EAAQD,KAAO,IAAO,MAAQ,OACtCkB,EAAGpX,KAAKmW,EAAQD,KAAKzS,SAAS,KAC9B2T,EAAGpX,KAAK,MACRoX,EAAGpX,KAAKmW,EAAQA,SAGZA,EAAQ3Z,MAAO,CAGjB,IAAIA,EAAQ2Z,EAAQ3Z,MAChB8a,IACFF,EAAGpX,KAAK,MACRoX,EAAGpX,KAAK6W,EAAwBV,EAAQ3Z,MAAOsa,KAGjDM,EAAGpX,KAAK,MACRoX,EAAGpX,KAAK,QACRoX,EAAGpX,KAAKxD,EAAMuC,OAAO6X,gBACrBQ,EAAGpX,KAAK,KACRoX,EAAGpX,KAAKxD,EAAMuV,KAAKtO,SAAS,KAC5B2T,EAAGpX,KAAK,KACRoX,EAAGpX,KAAKxD,EAAMwV,OAAOvO,SAAS,KAC9B2T,EAAGpX,KAAK,KAEV,OAAOoX,EAAGtX,KAAK,KAIjBjL,EAAAgiB,0BAiCA,IAAAlL,EAAA,WAME,SAAAA,EAAsBvT,QAAA,IAAAA,MAAA,MACpBjD,KAAKiD,YAAcA,GAAiD,IAAI6B,MAkD5E,OA9CE0R,EAAA9U,UAAA0gB,eAAA,SACErB,EACAX,EACA/Y,EACA4Z,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUF,EAAkB1F,OAAO2F,EAAMX,EAAUa,EAAMC,EAAMC,GAAMK,UAAUna,GACnFrH,KAAKiD,YAAY4H,KAAKmW,IAMxBxK,EAAA9U,UAAA2gB,KAAA,SACEtB,EACA1Z,EACA4Z,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnhB,KAAKoiB,eAAerB,EAAMhB,EAAmBM,KAAMhZ,EAAO4Z,EAAMC,EAAMC,IAIxE3K,EAAA9U,UAAA4gB,QAAA,SACEvB,EACA1Z,EACA4Z,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnhB,KAAKoiB,eAAerB,EAAMhB,EAAmBO,QAASjZ,EAAO4Z,EAAMC,EAAMC,IAI3E3K,EAAA9U,UAAAuF,MAAA,SACE8Z,EACA1Z,EACA4Z,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnhB,KAAKoiB,eAAerB,EAAMhB,EAAmBQ,MAAOlZ,EAAO4Z,EAAMC,EAAMC,IAE3E3K,EAzDA,GAAsB9W,EAAA8W,mGCvOtB,IAaYkF,EAUA6G,EAvBZC,EAAAriB,EAAA,IAaA,SAAYub,GACVA,IAAA,KAAO+G,qBAAmB,OAC1B/G,IAAA,IAAMgH,sBAAoB,MAC1BhH,IAAA,IAAMiH,sBAAoB,MAC1BjH,IAAA,IAAMkH,wBAAsB,MAC5BlH,IAAA,IAAOmH,wBAAsB,MAC7BnH,IAAA,YAAcoH,4BAA0B,cACxCpH,IAAA,KAAOqH,qBAAmB,OAP5B,CAAYrH,EAAAhc,EAAAgc,aAAAhc,EAAAgc,gBAUZ,SAAY6G,GACVA,IAAA,QAAUS,sBAAoB,UAC9BT,IAAA,MAAQU,oBAAkB,QAC1BV,IAAA,GAAKW,iBAAe,KACpBX,IAAA,KAAOY,mBAAiB,OACxBZ,IAAA,MAAQa,oBAAkB,QAC1Bb,IAAA,OAASc,qBAAmB,SAC5Bd,IAAA,KAAOe,mBAAiB,OACxBf,IAAA,WAAagB,yBAAuB,aACpChB,IAAA,aAAeiB,2BAAyB,eACxCjB,IAAA,SAAWkB,uBAAqB,WAChClB,IAAA,SAAWmB,uBAAqB,WAChCnB,IAAA,UAAYoB,wBAAsB,YAClCpB,IAAA,UAAYqB,wBAAsB,YAClCrB,IAAA,KAAOsB,mBAAiB,OACxBtB,IAAA,MAAQuB,oBAAkB,QAC1BvB,IAAA,MAAQwB,oBAAkB,QAC1BxB,IAAA,MAAQyB,oBAAkB,QAC1BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,KAAO4B,mBAAiB,OACxB5B,IAAA,OAAS6B,qBAAmB,SAC5B7B,IAAA,KAAO8B,mBAAiB,OACxB9B,IAAA,IAAM+B,kBAAgB,MACtB/B,IAAA,YAAcgC,0BAAwB,cACtChC,IAAA,cAAgBiC,4BAA0B,gBAC1CjC,IAAA,UAAYkC,wBAAsB,YAClClC,IAAA,WAAamC,yBAAuB,aACpCnC,IAAA,WAAaoC,yBAAuB,aA5BtC,CAAYpC,EAAA7iB,EAAA6iB,eAAA7iB,EAAA6iB,kBA+BZ,SAAYqC,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,iBA/C9C,CAAYjoB,EAAAklB,UAAAllB,EAAAklB,aAmEZ,SAAYgD,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,QA5E9B,CAAY9sB,EAAAkoB,WAAAloB,EAAAkoB,cA+EZ,SAAY6E,GACVA,IAAA,SAAWC,qBAAmB,WAC9BD,IAAA,cAAgBE,0BAAwB,gBACxCF,IAAA,WAAaG,uBAAqB,aAClCH,IAAA,WAAaI,uBAAqB,aAJpC,CAAYntB,EAAA+sB,SAAA/sB,EAAA+sB,YAWZ,SAAYK,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAY1tB,EAAAotB,cAAAptB,EAAAotB,iBASZ,IAAAO,EAAA,oBAAAA,KAWA,OANSA,EAAAjS,OAAP,SAAckS,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAa3tB,EAAA2tB,gBAab,IAAAI,EAAA,WA8BE,SAAAA,KAgxBF,OAnyBSA,EAAArS,OAAP,WACE,IAAIzb,EAAS,IAAI8tB,EAGjB,OAFA9tB,EAAOwa,IAAMuT,wBACb/tB,EAAOguB,IAAMC,gBAAgB,IACtBjuB,GAGF8tB,EAAAI,WAAP,SAAkBP,GAChB,IAAIQ,EAAOC,EAAaT,GACxB,IACE,IAAI3tB,EAAS,IAAI8tB,EAGjB,OAFA9tB,EAAOwa,IAAM6T,oBAAoBF,EAAMR,EAAOroB,QAC9CtF,EAAOguB,IAAMC,gBAAgB,IACtBjuB,UAEPsuB,YAAYC,WAAkBJ,MAQlCL,EAAA/rB,UAAAysB,gBAAA,SACEvtB,EACAwtB,EACAtb,GAEA,IAAIub,EAAOC,EAAY1tB,GACnBktB,EAAOS,EAAczb,GACzB,IACE,OAAO0b,yBAAyBxuB,KAAKma,IAAKkU,EAAMD,EAAQN,EAAMhb,EAAaA,EAAW7N,OAAS,WAE/FgpB,YAAYH,GACZG,YAAYI,KAIhBZ,EAAA/rB,UAAA+sB,2BAAA,SACEL,EACAtb,GAEA,IAAIgb,EAAOS,EAAczb,GACzB,IACE,OAAO4b,oCAAoC1uB,KAAKma,IAAKiU,EAAQN,EAAMhb,EAAaA,EAAW7N,OAAS,WAEpGgpB,YAAYH,KAMhBL,EAAA/rB,UAAAitB,UAAA,SAAUttB,GACR,IAAIssB,EAAM3tB,KAAK2tB,IAEf,OADAiB,sBAAsBjB,EAAKtsB,GACpBwtB,eAAe7uB,KAAKma,IAAKwT,IAGlCF,EAAA/rB,UAAAotB,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIrB,EAAM3tB,KAAK2tB,IAEf,OADAsB,sBAAsBtB,EAAKoB,EAAUC,GAC9BH,eAAe7uB,KAAKma,IAAKwT,IAGlCF,EAAA/rB,UAAAwtB,UAAA,SAAU7tB,GACR,IAAIssB,EAAM3tB,KAAK2tB,IAEf,OADAwB,wBAAwBxB,EAAKtsB,GACtBwtB,eAAe7uB,KAAKma,IAAKwT,IAGlCF,EAAA/rB,UAAA0tB,UAAA,SAAU/tB,GACR,IAAIssB,EAAM3tB,KAAK2tB,IAEf,OADA0B,wBAAwB1B,EAAKtsB,GACtBwtB,eAAe7uB,KAAKma,IAAKwT,IAKlCF,EAAA/rB,UAAA4tB,YAAA,SACEC,EACAC,GAEA,OAAOC,eAAezvB,KAAKma,IAAKoV,EAAIC,IAGtC/B,EAAA/rB,UAAAguB,aAAA,SACEH,EACAI,EACAC,GAEA,OAAOC,gBAAgB7vB,KAAKma,IAAKoV,EAAII,EAAMC,IAG7CnC,EAAA/rB,UAAAouB,WAAA,SACEP,EACA3uB,EACAmvB,QADA,IAAAnvB,MAAA,WACA,IAAAmvB,MAAA,MAEA,IAAI1B,EAAOC,EAAY1tB,GACnBktB,EAAOS,EAAcwB,GACzB,IACE,OAAOC,cAAchwB,KAAKma,IAAKoV,EAAIlB,EAAMP,EAAMiC,EAA6BA,EAAU9qB,OAAS,WAE/FgpB,YAAYH,GACZG,YAAYI,KAIhBZ,EAAA/rB,UAAAuuB,eAAA,SACE/X,EACAlM,GAEA,OAAOkkB,kBAAkBlwB,KAAKma,IAAKjC,EAAOlM,IAG5CyhB,EAAA/rB,UAAAyuB,eAAA,SACEjY,EACA7W,GAEA,OAAO+uB,kBAAkBpwB,KAAKma,IAAKjC,EAAO7W,IAG5CosB,EAAA/rB,UAAA2uB,gBAAA,SACEzvB,EACAoL,GAEA,IAAIqiB,EAAOC,EAAY1tB,GACvB,IACE,OAAO0vB,mBAAmBtwB,KAAKma,IAAKkU,EAAMriB,WAE1CiiB,YAAYI,KAIhBZ,EAAA/rB,UAAA6uB,WAAA,SACEC,EACAC,EACAC,EACA1kB,EACAuhB,GAEA,YAFA,IAAAA,MAAA,GAEOoD,cAAc3wB,KAAKma,IAAKqW,EAAOC,EAAS,EAAI,EAAGlD,EAA6BiD,EAAOxkB,EAAM0kB,IAGlGjD,EAAA/rB,UAAAkvB,YAAA,SACEJ,EACAE,EACArvB,EACA2K,EACAuhB,GAEA,YAFA,IAAAA,MAAA,GAEOsD,eAAe7wB,KAAKma,IAAKqW,EAAOjD,EAA6BiD,EAAOE,EAAKrvB,EAAO2K,IAGzFyhB,EAAA/rB,UAAAovB,iBAAA,SACEN,EACAE,EACA1kB,EACAuhB,GAEA,YAFA,IAAAA,MAAA,GAEOwD,oBAAoB/wB,KAAKma,IAAKqW,EAAOjD,EAAQvhB,EAAM0kB,IAG5DjD,EAAA/rB,UAAAsvB,kBAAA,SACER,EACAE,EACArvB,EACA2K,EACAuhB,GAEA,YAFA,IAAAA,MAAA,GAEO0D,qBAAqBjxB,KAAKma,IAAKqW,EAAOjD,EAAQmD,EAAKrvB,EAAO2K,IAGnEyhB,EAAA/rB,UAAAwvB,gBAAA,SACE3B,EACAiB,EACAjD,EACAmD,EACArvB,EACA2K,GAEA,OAAOmlB,mBAAmBnxB,KAAKma,IAAKoV,EAAIiB,EAAOjD,EAAQmD,EAAKrvB,EAAO2K,IAGrEyhB,EAAA/rB,UAAA0vB,oBAAA,SACEZ,EACAjD,EACAmD,EACAW,EACAC,EACAtlB,GAEA,OAAOulB,uBAAuBvxB,KAAKma,IAAKqW,EAAOjD,EAAQmD,EAAKW,EAAUC,EAAatlB,IAGrFyhB,EAAA/rB,UAAA8vB,iBAAA,SACEd,EACAW,EACAI,EACAC,GAEA,OAAOC,oBAAoB3xB,KAAKma,IAAKuW,EAAKW,EAAUI,EAASC,IAG/DjE,EAAA/rB,UAAAkwB,iBAAA,SACElB,EACAmB,GAEA,OAAOC,oBAAoB9xB,KAAKma,IAAKuW,EAAKmB,IAK5CpE,EAAA/rB,UAAAqwB,eAAA,SACE7Z,EACA7W,GAEA,OAAO2wB,kBAAkBhyB,KAAKma,IAAKjC,EAAO7W,IAG5CosB,EAAA/rB,UAAAuwB,gBAAA,SACErxB,EACAS,GAEA,IAAIgtB,EAAOC,EAAY1tB,GACvB,IACE,OAAOsxB,mBAAmBlyB,KAAKma,IAAKkU,EAAMhtB,WAE1C4sB,YAAYI,KAIhBZ,EAAA/rB,UAAAywB,YAAA,SACEC,EACAC,EACArmB,QAAA,IAAAA,MAAmB0P,EAAW4W,MAE9B,IAAIjE,EAAOC,EAAY8D,GACnBtE,EAAOS,EAAc8D,GACzB,IACE,OAAOE,eAAevyB,KAAKma,IAAKkU,EAAMP,EAAMuE,EAASptB,OAAQ+G,WAE7DiiB,YAAYH,GACZG,YAAYI,KAIhBZ,EAAA/rB,UAAA8wB,YAAA,SACEJ,EACAK,EACApxB,QADA,IAAAoxB,MAAA,QACA,IAAApxB,MAAA,GAEA,IAAIgtB,EAAOC,EAAY8D,GACvB,IACE,OAAOM,eAAe1yB,KAAKma,IAAKkU,EAAMoE,EAAWpxB,WAEjD4sB,YAAYI,KAIhBZ,EAAA/rB,UAAAixB,WAAA,SACEve,GAEA,OAAOwe,cAAc5yB,KAAKma,IAAK/F,IAGjCqZ,EAAA/rB,UAAAmxB,WAAA,SACET,EACAU,GAEA,IAAIzE,EAAOC,EAAY8D,GACvB,IACE,OAAOW,cAAc/yB,KAAKma,IAAKkU,EAAMyE,WAErC7E,YAAYI,KAIhBZ,EAAA/rB,UAAAsxB,SAAA,SACEP,EACAQ,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOC,YAAYnzB,KAAKma,IAAKsY,EAAWQ,EAAQC,IAGlDzF,EAAA/rB,UAAA0xB,UAAA,WACE,OAAOC,aAAarzB,KAAKma,MAG3BsT,EAAA/rB,UAAA4xB,aAAA,SACElf,GAEA,YAFA,IAAAA,MAAA,GAEOmf,gBAAgBvzB,KAAKma,IAAK/F,IAGnCqZ,EAAA/rB,UAAA8xB,aAAA,SACEP,EACAC,EACAT,GAEA,OAAOgB,gBAAgBzzB,KAAKma,IAAKsY,EAAWQ,EAAQC,IAGtDzF,EAAA/rB,UAAAgyB,aAAA,SACEC,EACAC,EACAnB,EACApxB,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAIwyB,EAAWF,EAAM1uB,OACjB6uB,EAAO,IAAIhvB,MAAa+uB,GACnBxzB,EAAI,EAAGA,EAAIwzB,IAAYxzB,EAC9ByzB,EAAKzzB,GAAKiuB,EAAYqF,EAAMtzB,IAE9B,IAAIytB,EAAOS,EAAcuF,GACrBzF,EAAOC,EAAYsF,GACvB,IACE,OAAOG,gBAAgB/zB,KAAKma,IAAK2T,EAAM+F,EAAUxF,EAAMoE,EAAWpxB,WAElE4sB,YAAYI,GACZJ,YAAYH,GACZ,IAASztB,EAAIwzB,EAAW,EAAGxzB,GAAK,IAAKA,EAAG4tB,YAAY6F,EAAKzzB,MAI7DotB,EAAA/rB,UAAAsyB,WAAA,SACEzf,EACAwb,EACA5d,GAEA,IAAIkc,EAAOC,EAAY/Z,GACnBuZ,EAAOS,EAAcwB,GACzB,IACE,OAAOkE,cAAcj0B,KAAKma,IAAKkU,EAAMP,EAAMiC,GAAYA,EAAS9qB,QAAU,EAAGkN,WAE7E8b,YAAYH,GACZG,YAAYI,KAIhBZ,EAAA/rB,UAAAwyB,iBAAA,SACE3f,EACAwb,EACA5d,GAEA,IAAIkc,EAAOC,EAAY/Z,GACnBuZ,EAAOS,EAAcwB,GACzB,IACE,OAAOoE,oBAAoBn0B,KAAKma,IAAKkU,EAAMP,EAAMiC,GAAYA,EAAS9qB,QAAU,EAAGkN,WAEnF8b,YAAYH,GACZG,YAAYI,KAIhBZ,EAAA/rB,UAAA0yB,mBAAA,SACElc,EACA6X,EACAsE,GAEA,IAAIvG,EAAOS,EAAcwB,GACrB1B,EAAOC,EAAY+F,GACvB,IACE,OAAOC,sBAAsBt0B,KAAKma,IAAKjC,EAAO4V,EAAMiC,GAAYA,EAAS9qB,QAAU,EAAGopB,WAEtFJ,YAAYI,GACZJ,YAAYH,KAIhBL,EAAA/rB,UAAA6yB,kBAAA,WACE,OAAOC,qBAAqBx0B,KAAKma,MAKnCsT,EAAA/rB,UAAA+yB,UAAA,SACE7zB,EACAoL,EACA0oB,EACA1c,GAEA,IAAIqW,EAAOC,EAAY1tB,GACvB,IACE,OAAO+zB,mBAAmB30B,KAAKma,IAAKkU,EAAMriB,EAAM0oB,EAAU,EAAI,EAAG1c,WAEjEiW,YAAYI,KAIhBZ,EAAA/rB,UAAAkzB,YAAA,SACEh0B,EACAoL,EACA6oB,EACA/B,GAEA,IAAIzE,EAAOC,EAAY1tB,GACnBktB,EAAOS,EAAcsG,GACzB,IACE,OAAOC,qBAAqB90B,KAAKma,IAAKkU,EAAMriB,EAAM8hB,EAAM+G,EAAWA,EAAS5vB,OAAS,EAAG6tB,WAExF7E,YAAYH,GACZG,YAAYI,KAIhBZ,EAAA/rB,UAAAqzB,eAAA,SAAen0B,GACb,IAAIytB,EAAOC,EAAY1tB,GACvB,IACEo0B,wBAAwBh1B,KAAKma,IAAKkU,WAElCJ,YAAYI,KAIhBZ,EAAA/rB,UAAAuzB,kBAAA,SACEnuB,EACAU,GAEA,IAAI0tB,EAAQ5G,EAAYxnB,GACpBquB,EAAQ7G,EAAY9mB,GACxB,IACE,OAAO4tB,2BAA2Bp1B,KAAKma,IAAK+a,EAAOC,WAEnDlH,YAAYkH,GACZlH,YAAYiH,KAIhBzH,EAAA/rB,UAAA2zB,eAAA,SACEvuB,EACAU,GAEA,IAAI0tB,EAAQ5G,EAAYxnB,GACpBquB,EAAQ7G,EAAY9mB,GACxB,IACE,OAAO8tB,wBAAwBt1B,KAAKma,IAAK+a,EAAOC,WAEhDlH,YAAYkH,GACZlH,YAAYiH,KAIhBzH,EAAA/rB,UAAA6zB,gBAAA,SACEzuB,EACAU,GAEA,IAAI0tB,EAAQ5G,EAAYxnB,GACpBquB,EAAQ7G,EAAY9mB,GACxB,IACE,OAAOguB,yBAAyBx1B,KAAKma,IAAK+a,EAAOC,WAEjDlH,YAAYkH,GACZlH,YAAYiH,KAIhBzH,EAAA/rB,UAAA+zB,gBAAA,SACE3uB,EACAU,GAEA,IAAI0tB,EAAQ5G,EAAYxnB,GACpBquB,EAAQ7G,EAAY9mB,GACxB,IACE,OAAOkuB,yBAAyB11B,KAAKma,IAAK+a,EAAOC,WAEjDlH,YAAYkH,GACZlH,YAAYiH,KAIhBzH,EAAA/rB,UAAAi0B,aAAA,SAAanuB,GACX,IAAI6mB,EAAOC,EAAY9mB,GACvB,IACEouB,sBAAsB51B,KAAKma,IAAKkU,WAEhCJ,YAAYI,KAIhBZ,EAAA/rB,UAAAm0B,kBAAA,SACE/uB,EACAgvB,EACAC,EACAC,GAEA,IAAId,EAAQ5G,EAAYxnB,GACpBquB,EAAQ7G,EAAYwH,GACpBG,EAAQ3H,EAAYyH,GACxB,IACE,OAAOG,2BAA2Bl2B,KAAKma,IAAK+a,EAAOC,EAAOc,EAAOD,WAEjE/H,YAAYgI,GACZhI,YAAYkH,GACZlH,YAAYiH,KAIhBzH,EAAA/rB,UAAAy0B,eAAA,SACErvB,EACAgvB,EACAC,GAEA,IAAIb,EAAQ5G,EAAYxnB,GACpBquB,EAAQ7G,EAAYwH,GACpBG,EAAQ3H,EAAYyH,GACxB,IACE,OAAOK,wBAAwBp2B,KAAKma,IAAK+a,EAAOC,EAAOc,WAEvDhI,YAAYgI,GACZhI,YAAYkH,GACZlH,YAAYiH,KAIhBzH,EAAA/rB,UAAA20B,gBAAA,SACEvvB,EACAgvB,EACAC,GAEA,IAAIb,EAAQ5G,EAAYxnB,GACpBquB,EAAQ7G,EAAYwH,GACpBG,EAAQ3H,EAAYyH,GACxB,IACE,OAAOO,yBAAyBt2B,KAAKma,IAAK+a,EAAOC,EAAOc,WAExDhI,YAAYgI,GACZhI,YAAYkH,GACZlH,YAAYiH,KAIhBzH,EAAA/rB,UAAA60B,gBAAA,SACEzvB,EACAgvB,EACAC,EACAS,GAEA,IAAItB,EAAQ5G,EAAYxnB,GACpBquB,EAAQ7G,EAAYwH,GACpBG,EAAQ3H,EAAYyH,GACxB,IACE,OAAOU,yBAAyBz2B,KAAKma,IAAK+a,EAAOC,EAAOc,EAAOO,WAE/DvI,YAAYgI,GACZhI,YAAYkH,GACZlH,YAAYiH,KAIhBzH,EAAA/rB,UAAAg1B,aAAA,SAAa5vB,GACX,IAAIunB,EAAOC,EAAYxnB,GACvB,IACE6vB,sBAAsB32B,KAAKma,IAAKkU,WAEhCJ,YAAYI,KAIhBZ,EAAA/rB,UAAAk1B,UAAA,SACEC,EACAC,EACAC,EACAxiB,EACAtM,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIomB,EAAOC,EAAYrmB,GACnBjD,EAAI+xB,EAAS9xB,OACb+xB,EAAO,IAAIlyB,MAAaE,GACxBiyB,EAAO,IAAInyB,MAAqBE,GAChCkyB,EAAO,IAAIpyB,MAAaE,GACnB3E,EAAI,EAAGA,EAAI2E,IAAK3E,EAAG,CAC1B,IAAIitB,EAASyJ,EAAS12B,GAAGitB,OACrBC,EAASwJ,EAAS12B,GAAGktB,OACzByJ,EAAK32B,GAAK0tB,EAAaT,GACvB2J,EAAK52B,GAAKkU,GAAUiO,EAAA2U,OAAOC,OACvBp3B,KAAK8uB,UAAUuI,QAAQ9J,GAAS+J,SAAS/J,IACzCvtB,KAAK2uB,UAAU0I,QAAQ9J,IAC3B2J,EAAK72B,GAAKitB,EAAOroB,OAEnB,IAAIsyB,EAAQhJ,EAAcyI,GACtBQ,EAAQjJ,EAAc0I,GACtBQ,EAAQlJ,EAAc2I,GAC1B,IACEQ,mBAAmB13B,KAAKma,IAAK0c,EAASC,EAASzI,EAAMkJ,EAAOC,EAAOC,EAAOzyB,WAE1EipB,YAAYwJ,GACZxJ,YAAYuJ,GACZvJ,YAAYsJ,GACZ,IAASl3B,EAAI2E,EAAI,EAAG3E,GAAK,IAAKA,EAAG4tB,YAAY+I,EAAK32B,IAClD4tB,YAAYI,KAIhBZ,EAAA/rB,UAAAi2B,iBAAA,SAAiBC,GACf,IAAI9J,EAAOS,EAAcqJ,GACzB,IACEC,0BAA0B73B,KAAKma,IAAK2T,EAAM8J,EAAM3yB,gBAEhDgpB,YAAYH,KAIhBL,EAAA/rB,UAAAo2B,SAAA,SAASC,GACPC,kBAAkBh4B,KAAKma,IAAK4d,IAG9BtK,EAAA/rB,UAAAu2B,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5BzK,EAAA/rB,UAAA02B,eAAA,SAAeF,QAAA,IAAAA,MAAA,GACbG,wBAAwBH,IAG1BzK,EAAA/rB,UAAA42B,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxB9K,EAAA/rB,UAAA+2B,SAAA,SAASV,QAAA,IAAAA,MAAA,GACHA,EACFW,0BAA0BX,EAAM/3B,KAAKma,KAErCwe,wBAAwB34B,KAAKma,MAIjCsT,EAAA/rB,UAAAk3B,UAAA,SAAUC,EAAkBd,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAIlE,EAAWgF,EAAO5zB,OAClB0uB,EAAQ,IAAI7uB,MAAa+uB,GACpBxzB,EAAI,EAAGA,EAAIwzB,IAAYxzB,EAC9BszB,EAAMtzB,GAAKiuB,EAAYuK,EAAOx4B,IAEhC,IAAIytB,EAAOS,EAAcoF,GACzB,IACMoE,EACFe,2BAA2Bf,EAAM/3B,KAAKma,IAAK2T,EAAM+F,GAEjDkF,yBAAyB/4B,KAAKma,IAAK2T,EAAM+F,WAG3C5F,YAAYH,GACZ,IAASztB,EAAIwzB,EAAUxzB,GAAK,IAAKA,EAC/B4tB,YAAY0F,EAAMtzB,MAKxBotB,EAAA/rB,UAAAs3B,SAAA,WACE,OAA4C,GAArCC,wBAAwBj5B,KAAKma,MAGtCsT,EAAA/rB,UAAAw3B,UAAA,WACEC,yBAAyBn5B,KAAKma,MAGhCsT,EAAA/rB,UAAA03B,SAAA,SAASC,GACP,IAAI1L,EAAM3tB,KAAK2tB,IACXU,EAAOC,EAAY+K,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgC7L,EAAK3tB,KAAKma,IAAKkU,GAC/CiL,EAAYG,EAAQ9L,GACpB,IAAI+L,EAAcD,EAAQ9L,EAAM,GAChC4L,EAAeE,EAAQ9L,EAAM,GAC7B,IAAI5R,EAAM,IAAI4d,EAGd,OAFA5d,EAAI6d,OAiSV,SAAoBlJ,EAAYzrB,GAE9B,IADA,IAAI8W,EAAM,IAAI8d,WAAW50B,GAChB5E,EAAW,EAAGA,EAAI4E,IAAU5E,EACnC0b,EAAI1b,GAAKy5B,KAASpJ,EAAMrwB,GAE1B,OAAO0b,EAtSUge,CAAWT,EAAWI,GACnC3d,EAAIQ,UAAYyd,EAAWT,GACpBxd,UAEHsS,GAAMJ,YAAYI,GAClBiL,GAAWrL,YAAYqL,GACvBC,GAActL,YAAYsL,KAIlC9L,EAAA/rB,UAAAu4B,OAAA,WACE,MAAM,IAAIruB,MAAM,oBAGlB6hB,EAAA/rB,UAAAw4B,QAAA,WACE,MAAM,IAAItuB,MAAM,oBAGlB6hB,EAAA/rB,UAAAy4B,QAAA,WACOn6B,KAAKma,MACVigB,uBAAuBp6B,KAAKma,KAC5B8T,YAAYjuB,KAAK2tB,OAGnBF,EAAA/rB,UAAA24B,eAAA,WACE,OAAOC,EAASlf,OAAOpb,OAGzBytB,EAAA/rB,UAAA64B,gBAAA,SAAgB/K,EACdgL,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBz2B,IAAI02B,WAEhBD,EAAW,EAAG,OAAO,EAGzB,IAAIE,EACAC,EAEJ,OALAH,GAAY,EAKJI,yBAAyBrL,IAC/B,KAAKjN,EAAauY,MAChB,OAAQC,2BAA2BvL,IACjC,KAAK9T,EAAWC,IACd,OAAO3b,KAAK2uB,UAAUqM,0BAA0BxL,IAElD,KAAK9T,EAAWE,IACd,OAAO5b,KAAK8uB,UACVmM,6BAA6BzL,GAC7B0L,8BAA8B1L,IAGlC,KAAK9T,EAAWG,IACd,OAAO7b,KAAKkvB,UAAUiM,0BAA0B3L,IAElD,KAAK9T,EAAWI,IACd,OAAO9b,KAAKovB,UAAUgM,0BAA0B5L,IAElD,QACE,MAAM,IAAI5jB,MAAM,0BAItB,KAAK2W,EAAa8Y,SAChB,OAAOnL,kBAAkBlwB,KAAKma,IAC5BmhB,0BAA0B9L,GAC1BuL,2BAA2BvL,IAG/B,KAAKjN,EAAagZ,UAChB,IAAI7oB,EAAa8oB,0BAA0BhM,GAC3C,IAAK9c,EAAY,MACjB,OAAO4d,mBAAmBtwB,KAAKma,IAAKzH,EAAYqoB,2BAA2BvL,IAE7E,KAAKjN,EAAakZ,KAChB,KAAMd,EAAU36B,KAAKu6B,gBAAgBmB,oBAAoBlM,GAAOgL,EAAeC,IAC7E,MAEF,OAAOkB,sBAAsBnM,GACzBuB,oBAAoB/wB,KAAKma,IACvByhB,sBAAsBpM,GACtBqM,uBAAuBrM,GACvBuL,2BAA2BvL,GAC3BmL,GAEFhK,cAAc3wB,KAAKma,IACjByhB,sBAAsBpM,GACtBsM,sBAAsBtM,GAAQ,EAAI,EAClCqM,uBAAuBrM,GACtBuM,sBAAsBvM,GACtBuL,2BAA2BvL,GAC3BmL,GAGT,KAAKpY,EAAayZ,MAChB,KAAMrB,EAAU36B,KAAKu6B,gBAAgB0B,uBAAuBzM,GAAOgL,EAAeC,IAChF,MAEF,OAAOhL,eAAezvB,KAAKma,IAAK+hB,oBAAoB1M,GAAOmL,GAE7D,KAAKpY,EAAa4Z,OAChB,KAAMxB,EAAU36B,KAAKu6B,gBAAgB6B,uBAAuB5M,GAAOgL,EAAeC,IAChF,MAEF,KAAMG,EAAU56B,KAAKu6B,gBAAgB8B,wBAAwB7M,GAAOgL,EAAeC,IACjF,MAEF,OAAO5K,gBAAgB7vB,KAAKma,IAAKmiB,qBAAqB9M,GAAOmL,EAASC,GAG1E,OAAO,GAKTnN,EAAA/rB,UAAA66B,iBAAA,SAAiB37B,GACf,IAAIytB,EAAOC,EAAY1tB,GACvB,IACE,OAAO47B,oCAAoCx8B,KAAKma,IAAKkU,WAErDJ,YAAYI,KAIhBZ,EAAA/rB,UAAA+6B,iBAAA,SAAiBvkB,GACf,OAAO8hB,EAAW0C,oCAAoC18B,KAAKma,IAAKjC,KAGlEuV,EAAA/rB,UAAA+a,iBAAA,SACEsb,EACAvI,EACAmN,EACAC,EACAC,GAEAC,kCAAkC/E,EAAMvI,EAAMmN,EAAWC,EAAYC,IAtyBvDpP,EAAAsP,kBAA2B,MAG3BtP,EAAAuP,kBAA2B,MAqyB7CvP,EA9yBA,GAAa/tB,EAAA+tB,SAgzBb,IAAA6M,EAAA,WAmBE,SAAAA,KA0BF,OAxCSA,EAAAlf,OAAP,SAAczb,GACZ,IAAIs9B,EAAW,IAAI3C,EAGjB,OAFF2C,EAASt9B,OAASA,EAClBs9B,EAAS9iB,IAAM+iB,kBACND,GAGJ3C,EAAA6C,WAAP,SAAkBx9B,GAChB,IAAIs9B,EAAW,IAAI3C,EAGnB,OAFA2C,EAASt9B,OAASA,EAClBs9B,EAAS9iB,IAAM,EACR8iB,GAKT3C,EAAA54B,UAAA07B,SAAA,SAASrc,GACP,OAAOsc,kBAAkBr9B,KAAKma,IAAK4G,IAGrCuZ,EAAA54B,UAAA47B,UAAA,SAAUC,EAAwBC,EAAsB/K,EAA8B1R,QAA9B,IAAA0R,MAAA,QAA8B,IAAA1R,MAAA,GACpF0c,mBAAmBF,EAAMC,EAAI/K,EAAW1R,IAG1CuZ,EAAA54B,UAAAg8B,mBAAA,SAAmB3c,EAAqB0R,GACtC,OAAOkL,4BAA4B39B,KAAKma,IAAK4G,EAAM0R,IAGrD6H,EAAA54B,UAAAk8B,mBAAA,SAAmBL,EAAwBC,EAAsBK,EAAgB9c,QAAA,IAAAA,MAAA,GAC/E,IAAI+M,EAAOS,EAAcsP,GACzB,IACEC,4BAA4BP,EAAMC,EAAI1P,EAAM+P,EAAQ54B,OAAQ8b,WAE5DkN,YAAYH,KAIhBwM,EAAA54B,UAAAq8B,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0Bl+B,KAAKma,IAAK6jB,EAAOC,EAAaj+B,KAAKL,OAAOwa,MAE/EmgB,EA7CA,GAkDA,SAAAvM,EAAsBoQ,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIl5B,OAChByrB,EAAM9C,gBAAgBwQ,GACtBC,EAAM3N,EACDrwB,EAAI,EAAGA,EAAI+9B,IAAa/9B,EAC/Bi+B,MAAUD,IAAOF,EAAI99B,IAEvB,OAAOqwB,EAGT,SAAAnC,EAAuBgQ,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAI7N,EAAM9C,gBAAgB2Q,EAAKt5B,QAAU,GACrCo5B,EAAM3N,EACDrwB,EAAI,EAAG2E,EAAIu5B,EAAKt5B,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAC3C,IAAIm+B,EAAMD,EAAKl+B,GAEfi+B,MAAUD,EAAyB,IAAdG,GACrBF,MAAUD,EAAM,EAAKG,GAAS,EAAK,KACnCF,MAAUD,EAAM,EAAKG,GAAQ,GAAM,KACnCF,MAAUD,EAAM,EAAKG,IAAQ,IAC7BH,GAAO,EAET,OAAO3N,EA2BT,SAAApC,EAAqBmQ,GACnB,GAAW,MAAPA,EAAa,OAAO,EAGxB,IAFA,IAAI/N,EAAM9C,gBA1BZ,SAA0B6Q,GAExB,IADA,IAAI7c,EAAM,EACDvhB,EAAI,EAAG2E,EAAIy5B,EAAIx5B,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAC1C,IAAIq+B,EAAID,EAAIzc,WAAW3hB,GACnBq+B,GAAK,OAAUA,GAAK,OAAUr+B,EAAI,EAAI2E,IACxC05B,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBD,EAAIzc,aAAa3hB,IAEpDq+B,GAAK,MACL9c,EAEFA,GADS8c,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAO9c,EAKmB+c,CAAiBF,GAAO,GAC9CJ,EAAM3N,EACDrwB,EAAI,EAAG2E,EAAIy5B,EAAIx5B,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAC1C,IAAIq+B,EAAID,EAAIzc,WAAW3hB,GACnBq+B,GAAK,OAAUA,GAAK,OAAUr+B,EAAI,EAAI2E,IACxC05B,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBD,EAAIzc,aAAa3hB,IAEpDq+B,GAAK,IACPJ,MAAUD,IAAOK,GACRA,GAAK,MACdJ,MAAUD,IAAQ,IAASK,IAAM,GACjCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,OACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,SACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,UACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,KAE3BJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAI/B,OADAJ,MAAUD,EAAK,GACR3N,EAGT,SAAA+I,EAAiB/I,GACf,OACGoJ,KAASpJ,GACToJ,KAASpJ,EAAM,IAAO,EACtBoJ,KAASpJ,EAAM,IAAM,GACrBoJ,KAASpJ,EAAM,IAAM,GAY1B,SAAAsJ,EAA2BtJ,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEIkO,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIn6B,MAIP85B,EAAK9E,KAASpJ,MACR,IAALkO,GAINC,EAAuB,GAAlB/E,KAASpJ,KACK,MAAT,IAALkO,IAILE,EAAuB,GAAlBhF,KAASpJ,KACK,MAAT,IAALkO,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBjF,KAASpJ,KACK,MAAT,IAALkO,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBlF,KAASpJ,KAEZkO,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBlF,KAASpJ,QAflBuO,EAAIp0B,MAAY,GAAL+zB,IAAY,EAAKC,IAL5BI,EAAIp0B,KAAK+zB,GAkCb,OAAOM,OAAOC,eAAeF,GA1MlBv/B,EAAA46B,WAgKb56B,EAAAs6B,aA8CA,IAAAL,EAAA,WAKA,OALA,gBAAaj6B,EAAAi6B,gZCvuCb,IAAAyF,EAAAj/B,EAAA,GAQAk/B,EAAAl/B,EAAA,GAWST,EAAA4/B,MAVPD,EAAAC,MAUc5/B,EAAAgL,MARd20B,EAAA30B,MAGF,IAQYpF,EARZ2a,EAAA9f,EAAA,IAQA,SAAYmF,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBArEF,CAAYA,EAAA5F,EAAA4F,WAAA5F,EAAA4F,cAyEZ,IAAAi6B,EAAA,oBAAAA,IAOEv/B,KAAAsH,OAAsB,KAEtBtH,KAAA2W,MAAqByoB,EAAA11B,YAAYkN,KAu3BnC,OAp3BE2oB,EAAA79B,UAAA+H,GAAA,SAAGoN,GAA2B,OAAQ7W,KAAK2W,MAAQE,IAASA,GAE5D0oB,EAAA79B,UAAA6J,MAAA,SAAMsL,GAA2B,OAA8B,IAAtB7W,KAAK2W,MAAQE,IAEtD0oB,EAAA79B,UAAAmF,IAAA,SAAIgQ,GAA2B7W,KAAK2W,OAASE,GAItC0oB,EAAAC,WAAP,SACE5+B,EACAiS,EACA4sB,EACAp4B,GAEA,IAAI2E,EAAO,IAAI0zB,EAKf,OAJA1zB,EAAK3E,MAAQA,EACb2E,EAAKpL,KAAOA,EAAMA,EAAK0G,OAAS0E,EAChCA,EAAK6G,cAAgBA,EAAmBA,GAAe8sB,GAAU9sB,EAAe7G,GAChFA,EAAKyzB,WAAaA,EACXzzB,GAGFuzB,EAAAK,kBAAP,SACEv4B,GAEA,OAAOk4B,EAAKC,WACVD,EAAKM,2BAA2B,GAAIx4B,GACpC,MACA,EACAA,IAIGk4B,EAAAO,oBAAP,SACEl/B,EACA+H,EACAtB,GAEA,IAAI04B,EAAO,IAAIC,EAIf,OAHAD,EAAK14B,MAAQA,EACb04B,EAAKn/B,KAAOA,EAAMA,EAAK0G,OAASy4B,EAChCA,EAAKp3B,YAAcA,EAAiBA,IAAaA,EAAYrB,OAASy4B,GAC/DA,GAGFR,EAAAU,gBAAP,SACEr/B,EACAoL,EACAgM,EACA3S,EACAgC,GAEA,IAAI04B,EAAO,IAAIG,EAMf,OALAH,EAAK14B,MAAQA,EACb04B,EAAKn/B,KAAOA,EAAMA,EAAK0G,OAASy4B,EAChCA,EAAK/zB,KAAOA,EAAUA,IAAMA,EAAK1E,OAASy4B,GAC1CA,EAAK/nB,YAAcA,EAAiBA,IAAaA,EAAY1Q,OAASy4B,GACtEA,EAAKjuB,cAAgBzM,EACd06B,GAGFR,EAAAY,gBAAP,SACEC,EACAjuB,EACAf,EACAquB,EACAp4B,GAEA,IAAIg5B,EAAM,IAAIC,EAMd,OALAD,EAAIh5B,MAAQA,EACZg5B,EAAI7uB,eAAiB4uB,EAAYT,GAAUS,EAAYC,GACvDA,EAAIluB,WAAaA,EAAYA,EAAW7K,OAAS+4B,EACjDA,EAAIjvB,iBAAmBA,EAAsBA,IAAkBA,EAAiB9J,OAAS+4B,GACzFA,EAAIZ,WAAaA,EACVY,GAKFd,EAAAgB,gBAAP,SACEnsB,EACAosB,EACAn5B,GAEA,IAAIo5B,EAAO,IAAIC,EAIf,GAHAD,EAAKp5B,MAAQA,EACbo5B,EAAK7/B,KAAOwT,EAAYA,EAAW9M,OAASm5B,EAC5CA,EAAKtzB,UAAYqzB,EAAUA,GAAMb,GAAUa,EAAMC,GAC7CrsB,EAAW/O,MAAQC,EAAS0Q,WAC9B,OAA+B5B,EAAY3M,MACzC,IAAK,SACHg5B,EAAK1zB,cAAgBC,EAAcrD,OACnC,MAEF,IAAK,WACH82B,EAAK1zB,cAAgBC,EAAcC,SACnC,MAEF,IAAK,YACHwzB,EAAK1zB,cAAgBC,EAAcxC,UACnC,MAEF,IAAK,SACHi2B,EAAK1zB,cAAgBC,EAAc2zB,OACnC,MAEF,QACEF,EAAK1zB,cAAgBC,EAAcuB,YAKvCkyB,EAAK1zB,cAAgBC,EAAcuB,OAErC,OAAOkyB,GAGFlB,EAAAqB,cAAP,SACEn5B,EACApC,EACAgC,GAEA,IAAI4J,EAAO,IAAI4vB,EAIf,OAHA5vB,EAAK5J,MAAQA,EACb4J,EAAK6vB,YAAcz7B,EACnB4L,EAAKxJ,KAAOA,EACLwJ,GAKFsuB,EAAAM,2BAAP,SACEj/B,EACAyG,GAEA,IAAImoB,EAAO,IAAIuR,EAGf,OAFAvR,EAAKnoB,MAAQA,EACbmoB,EAAK/nB,KAAO7G,EACL4uB,GAGF+P,EAAAyB,gCAAP,SACE35B,GAEA,IAAImoB,EAAO,IAAIuR,EAGf,OAFAvR,EAAKnoB,MAAQA,EACbmoB,EAAK/nB,KAAO,GACL+nB,GAGF+P,EAAA0B,6BAAP,SACEC,EACA75B,GAEA,IAAImoB,EAAO,IAAI2R,EAGf,OAFA3R,EAAKnoB,MAAQA,EACbmoB,EAAK4R,mBAAqBF,EAkiD9B,SAA4BG,EAAwB/5B,GAClD,IAAK,IAAIjH,EAAI,EAAG2E,EAAIq8B,EAAMp8B,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAC5C,IAAI4Q,EAAOowB,EAAMhhC,GACb4Q,IAAMA,EAAK3J,OAASA,IAriDYg6B,CAAmBJ,EAAU1R,GAC1DA,GAGF+P,EAAAgC,0BAAP,SACEC,EACAptB,EACAoB,EACAnO,GAEA,IAAImoB,EAAO,IAAIiS,EAKf,OAJAjS,EAAKnoB,MAAQA,EACbmoB,EAAKgS,cAAgBA,EACrBhS,EAAKpb,WAAaA,EAAYA,EAAW9M,OAASkoB,EAClDA,EAAKha,OAASA,EAAQA,EAAOlO,OAASkoB,EAC/BA,GAGF+P,EAAAmC,uBAAP,SACEC,EACAhS,EACAC,EACAvoB,GAEA,IAAImoB,EAAO,IAAIoS,EAKf,OAJApS,EAAKnoB,MAAQA,EACbmoB,EAAKmS,SAAWA,EAChBnS,EAAKG,KAAOA,EAAMA,EAAKroB,OAASkoB,EAChCA,EAAKI,MAAQA,EAAOA,EAAMtoB,OAASkoB,EAC5BA,GAGF+P,EAAAsC,qBAAP,SACEztB,EACA0tB,EACAtB,EACAn5B,GAEA,IAAImoB,EAAO,IAAIuS,EAKf,OAJAvS,EAAKnoB,MAAQA,EACbmoB,EAAKpb,WAAaA,EAAYA,EAAW9M,OAASkoB,EAClDA,EAAK3c,cAAgBivB,EAAcA,GAAUnC,GAAUmC,EAAUtS,GACjEA,EAAKriB,UAAYqzB,EAAMb,GAAUa,EAAMhR,GAChCA,GAGF+P,EAAAyC,sBAAP,SACEC,EACA56B,GAEA,IAAImoB,EAAO,IAAI0S,EAGf,OAFA1S,EAAKnoB,MAAQA,EACbmoB,EAAKyS,YAAcA,EAAatC,GAAUsC,EAAazS,GAChDA,GAGF+P,EAAA4C,4BAAP,SACE96B,GAEA,IAAImoB,EAAO,IAAI4S,EAEf,OADA5S,EAAKnoB,MAAQA,EACNmoB,GAGF+P,EAAA8C,8BAAP,SACEjuB,EACA1N,EACAW,GAEA,IAAImoB,EAAO,IAAI8S,EAIf,OAHA9S,EAAKnoB,MAAQA,EACbmoB,EAAKpb,WAAaA,EAAYA,EAAW9M,OAASkoB,EAClDA,EAAK+S,kBAAoB77B,EAASA,EAAQY,OAASkoB,EAC5CA,GAGF+P,EAAAiD,sBAAP,SACEn7B,GAEA,IAAImoB,EAAO,IAAIiT,EAEf,OADAjT,EAAKnoB,MAAQA,EACNmoB,GAGF+P,EAAAmD,6BAAP,SACErhC,EACAgG,GAEA,IAAImoB,EAAO,IAAImT,EAGf,OAFAnT,EAAKnoB,MAAQA,EACbmoB,EAAKnuB,MAAQA,EACNmuB,GAGF+P,EAAAqD,yBAAP,SACEx7B,GAEA,IAAIooB,EAAO,IAAIqT,EAIf,OAHArT,EAAK7Y,MAAQvP,EAAYuP,MAAQyoB,EAAA11B,YAAYo5B,MAC7CtT,EAAKnoB,MAAQD,EAAYC,MACzBmoB,EAAKpoB,YAAcA,EACZooB,GAGF+P,EAAAwD,+BAAP,SACE1hC,EACAgG,GAEA,IAAImoB,EAAO,IAAIwT,EAGf,OAFAxT,EAAKnoB,MAAQA,EACbmoB,EAAKnuB,MAAQA,EACNmuB,GAGF+P,EAAA0D,oBAAP,SACE7uB,EACA0tB,EACAtB,EACAn5B,GAEA,IAAImoB,EAAO,IAAI0T,EAKf,OAJA1T,EAAKnoB,MAAQA,EACbmoB,EAAKpb,WAAaA,EAAYA,EAAW9M,OAASkoB,EAClDA,EAAK3c,cAAgBivB,EAAcA,GAAUnC,GAAUmC,EAAUtS,GACjEA,EAAKriB,UAAYqzB,EAAMb,GAAUa,EAAMhR,GAChCA,GAGF+P,EAAA4D,qBAAP,SACE97B,GAEA,IAAImoB,EAAO,IAAI4T,EAEf,OADA5T,EAAKnoB,MAAQA,EACNmoB,GAGF+P,EAAA8D,8BAAP,SACEjvB,EACA/M,GAEA,IAAImoB,EAAO,IAAI8T,EAGf,OAFA9T,EAAKnoB,MAAQA,EACbmoB,EAAKpb,WAAaA,EAAYA,EAAW9M,OAASkoB,EAC3CA,GAGF+P,EAAAgE,+BAAP,SACEnvB,EACA3S,EACA4F,GAEA,IAAImoB,EAAO,IAAIgU,EAIf,OAHAhU,EAAKnoB,MAAQA,EACbmoB,EAAKpb,WAAaA,EAAYA,EAAW9M,OAASkoB,EAClDA,EAAK/tB,SAAWA,EAAUA,EAAS6F,OAASkoB,EACrCA,GAGF+P,EAAAkE,8BAAP,SACEC,EACA/sB,EACAtP,GAEA,IAAImoB,EAAO,IAAImU,EAIf,OAHAnU,EAAKnoB,MAAQA,EACbmoB,EAAKkU,QAAUA,EACflU,EAAKoU,aAAejtB,EACb6Y,GAGF+P,EAAAsE,wBAAP,SACEpR,EACAqR,EACAC,EACA18B,GAEA,IAAImoB,EAAO,IAAIwU,EAKf,OAJAxU,EAAKnoB,MAAQA,EACbmoB,EAAKiD,UAAYA,EAAWA,EAAUnrB,OAASkoB,EAC/CA,EAAKsU,OAASA,EAAQA,EAAOx8B,OAASkoB,EACtCA,EAAKuU,OAASA,EAAQA,EAAOz8B,OAASkoB,EAC/BA,GAGF+P,EAAA0E,8BAAP,SACE5iC,EACAgG,GAEA,IAAImoB,EAAO,IAAI0U,EAGf,OAFA1U,EAAKnoB,MAAQA,EACbmoB,EAAKnuB,MAAQA,EACNmuB,GAGF+P,EAAA4E,sBAAP,SACE98B,GAEA,IAAImoB,EAAO,IAAI4U,EAEf,OADA5U,EAAKnoB,MAAQA,EACNmoB,GAGF+P,EAAA8E,qBAAP,SACEh9B,GAEA,IAAImoB,EAAO,IAAI8U,EAEf,OADA9U,EAAKnoB,MAAQA,EACNmoB,GAGF+P,EAAAgF,qBAAP,SACEl9B,GAEA,IAAImoB,EAAO,IAAIgV,EAEf,OADAhV,EAAKnoB,MAAQA,EACNmoB,GAGF+P,EAAAkF,6BAAP,SACE9C,EACA+C,EACAr9B,GAEA,IAAImoB,EAAO,IAAImV,EAIf,OAHAnV,EAAKnoB,MAAQA,EACbmoB,EAAKmS,SAAWA,EAChBnS,EAAKkV,QAAUA,EAASA,EAAQp9B,OAASkoB,EAClCA,GAGF+P,EAAAqF,4BAAP,SACEjD,EACA+C,EACAr9B,GAEA,IAAImoB,EAAO,IAAIqV,EAIf,OAHArV,EAAKnoB,MAAQA,EACbmoB,EAAKmS,SAAWA,EAChBnS,EAAKkV,QAAUA,EAASA,EAAQp9B,OAASkoB,EAClCA,GAKF+P,EAAAuF,qBAAP,SACE5/B,EACAmC,GAEA,IAAIo5B,EAAO,IAAIsE,EAGf,OAFAtE,EAAKp5B,MAAQA,EACbo5B,EAAKv7B,WAAaA,EAAYy6B,GAAUz6B,EAAYu7B,GAC7CA,GAGFlB,EAAAyF,qBAAP,SACE5S,EACA/qB,GAEA,IAAIo5B,EAAO,IAAIwE,EAGf,OAFAxE,EAAKp5B,MAAQA,EACbo5B,EAAKrO,MAAQA,EAAWA,IAAOA,EAAM9qB,OAASm5B,GACvCA,GAGFlB,EAAA2F,uBAAP,SACEr1B,EACAiB,EACAnI,EACA2B,EACAQ,EACA+B,EACA8J,EACAtP,GAEA,IAAIo5B,EAAO,IAAI0E,EASf,OARA1E,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOiP,EAAYA,EAAWvI,OAASm5B,EAC5CA,EAAK3vB,eAAiBA,EAAgB6uB,GAAU7uB,EAAgB2vB,GAChEA,EAAK93B,YAAcA,EAAiBA,IAAaA,EAAYrB,OAASm5B,GACtEA,EAAKn2B,gBAAkBA,EAAiBq1B,GAAUr1B,EAAiBm2B,GACnEA,EAAK31B,QAAUA,EAAS60B,GAAU70B,EAAS21B,GAC3CA,EAAK5zB,WAAaA,EAAgBA,GAAY8yB,GAAU9yB,EAAY4zB,GAC7DA,GAGFlB,EAAA6F,wBAAP,SACEhT,EACA/qB,GAEA,IAAIo5B,EAAO,IAAI4E,GAGf,OAFA5E,EAAKp5B,MAAQA,EACbo5B,EAAKrO,MAAQA,EAAWA,IAAOA,EAAM9qB,OAASm5B,GACvCA,GAGFlB,EAAA+F,kBAAP,SACElgC,EACAqtB,EACAprB,GAEA,IAAIo5B,EAAO,IAAI8E,GAIf,OAHA9E,EAAKp5B,MAAQA,EACbo5B,EAAKr7B,UAAYA,EAAWA,EAAUkC,OAASm5B,EAC/CA,EAAKhO,UAAYA,EAAWA,EAAUnrB,OAASm5B,EACxCA,GAGFlB,EAAAiG,qBAAP,SACEn+B,GAEA,IAAIo5B,EAAO,IAAIgF,GAEf,OADAhF,EAAKp5B,MAAQA,EACNo5B,GAGFlB,EAAAmG,sBAAP,SACE9kC,EACAkK,EACA+B,EACA8J,EACAtP,GAEA,IAAIo5B,EAAO,IAAIkF,GAMf,OALAlF,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAKnxB,OAASxE,EAAS60B,GAAU70B,EAAS21B,GAC1CA,EAAK5zB,WAAaA,EAAgBA,GAAY8yB,GAAU9yB,EAAY4zB,GAC7DA,GAGFlB,EAAAqG,2BAAP,SACEhlC,EACAS,EACAsV,EACAtP,GAEA,IAAIo5B,EAAO,IAAIoF,GAKf,OAJApF,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAKp/B,MAAQA,EAAWA,IAAOA,EAAMiG,OAASm5B,GACvCA,GAGFlB,EAAAuG,sBAAP,SACEh7B,EACAvD,EACAoP,EACAtP,GAEA,IAAIo5B,EAAO,IAAIsF,GAKf,GAJAtF,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK31B,QAAUA,EAAS60B,GAAU70B,EAAS21B,GAC3CA,EAAKl5B,KAAOA,EACRA,EAAM,CACR,IAAIka,EAAiBxB,EAAA+lB,cAAcz+B,EAAKlG,OACpCkG,EAAKlG,MAAM4kC,WAAW,KACxBxF,EAAKhf,eAAiBxB,EAAAimB,YACpBzkB,EACApa,EAAMuC,OAAO6X,gBAGfgf,EAAKhf,eAAiBA,EAExBgf,EAAK7wB,aAAeu2B,GAAmB1F,EAAKhf,qBAE5Cgf,EAAKhf,eAAiB,KACtBgf,EAAK7wB,aAAe,KAEtB,OAAO6wB,GAGFlB,EAAA6G,4BAAP,SACExlC,EACA4G,EACAH,GAEA,IAAIo5B,EAAO,IAAI4F,GAIf,OAHA5F,EAAKp5B,MAAQA,EACbo5B,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAKj5B,aAAeA,EAAcA,EAAaF,OAASm5B,EACjDA,GAGFlB,EAAA+G,mBAAP,SACE1lC,EACA4G,EACAH,GAEA,IAAI04B,EAAO,IAAIwG,GASf,OARAxG,EAAK14B,MAAQA,EACb04B,EAAKn/B,KAAOA,EAAMA,EAAK0G,OAASy4B,EAC3Bv4B,EAGHA,EAAaF,OAASy4B,EAFtBv4B,EAAe5G,EAIjBm/B,EAAKv4B,aAAeA,EACbu4B,GAGFR,EAAAiH,0BAAP,SACEpyB,GAEA,IAAIqsB,EAAO,IAAIgG,GAGf,OAFAhG,EAAKp5B,MAAQ+M,EAAW/M,MACxBo5B,EAAKrsB,WAAaA,EAAYA,EAAW9M,OAASm5B,EAC3CA,GAGFlB,EAAAmH,kBAAP,SACEjU,EACAQ,EACAC,EACA7rB,GAEA,IAAIo5B,EAAO,IAAIkG,GAKf,OAJAlG,EAAKp5B,MAAQA,EACbo5B,EAAKhO,UAAYA,EAAWA,EAAUnrB,OAASm5B,EAC/CA,EAAKxN,OAASA,EAAQA,EAAO3rB,OAASm5B,EACtCA,EAAKvN,QAAUA,EAAaA,IAASA,EAAQ5rB,OAASm5B,GAC/CA,GAGFlB,EAAAqH,sBAAP,SACEC,EACAt/B,EACAF,GAEA,IAAIo5B,EAAO,IAAIqG,GACfrG,EAAKp5B,MAAQA,EACbo5B,EAAKvwB,aAAe22B,EAAWA,GAAOlH,GAAUkH,EAAOpG,GACvDA,EAAKrwB,cAAgB,KACrBqwB,EAAKl5B,KAAOA,EACZ,IAAIka,EAAiBxB,EAAA+lB,cAAcz+B,EAAKlG,OAaxC,OAZIkG,EAAKlG,MAAM4kC,WAAW,KACxBxF,EAAKhf,eAAiBxB,EAAAimB,YACpBzkB,EACApa,EAAMuC,OAAO6X,iBAGVA,EAAewkB,WAAW7G,EAAA38B,kBAC7Bgf,EAAiB2d,EAAA38B,eAAiBgf,GAEpCgf,EAAKhf,eAAiBA,GAExBgf,EAAK7wB,aAAeu2B,GAAmB1F,EAAKhf,gBACrCgf,GAGFlB,EAAAwH,kCAAP,SACEl3B,EACAtI,EACAF,GAEA,IAAIo5B,EAAO,IAAIqG,GAUf,OATArG,EAAKp5B,MAAQA,EACbo5B,EAAKvwB,aAAe,KACpBuwB,EAAKrwB,cAAgBP,EACrB4wB,EAAKl5B,KAAOA,EACZk5B,EAAKhf,eAAiBxB,EAAAimB,YACpBjmB,EAAA+lB,cAAcz+B,EAAKlG,OACnBgG,EAAMuC,OAAO6X,gBAEfgf,EAAK7wB,aAAeu2B,GAAmB1F,EAAKhf,gBACrCgf,GAGFlB,EAAAyH,wBAAP,SACEx/B,EACA5G,EACAyG,GAEA,IAAI04B,EAAO,IAAIkH,GASf,OARAlH,EAAK14B,MAAQA,EACb04B,EAAKv4B,aAAeA,EAAcA,EAAaF,OAASy4B,EACnDn/B,EAGHA,EAAK0G,OAASy4B,EAFdn/B,EAAO4G,EAITu4B,EAAKn/B,KAAOA,EACLm/B,GAGFR,EAAA2H,2BAAP,SACEtmC,EACA+H,EACAmC,EACA6L,EACAtP,GAEA,IAAIo5B,EAAO,IAAI0G,GAMf,OALA1G,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAK93B,YAAcA,EAAiBA,IAAaA,EAAYrB,OAASm5B,GACtEA,EAAK31B,QAAUA,EAAS60B,GAAU70B,EAAS21B,GACpCA,GAGFlB,EAAA6H,uBAAP,SACExmC,EACAoL,EACAgM,EACAnL,EACA8J,EACAtP,GAEA,IAAIo5B,EAAO,IAAI4G,GAOf,OANA5G,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAKz0B,KAAOA,EAAUA,IAAMA,EAAK1E,OAASm5B,GAC1CA,EAAKzoB,YAAcA,EAAiBA,IAAaA,EAAY1Q,OAASm5B,GACtEA,EAAK5zB,WAAaA,EAAgBA,GAAY8yB,GAAU9yB,EAAY4zB,GAC7DA,GAGFlB,EAAA+H,mBAAP,SACEtvB,EACAya,EACA8U,EACAniC,EACAiC,GAEA,IAAIo5B,EAAO,IAAI+G,GAMf,OALA/G,EAAKp5B,MAAQA,EACbo5B,EAAKzoB,YAAcA,EAAiBA,IAAaA,EAAY1Q,OAASm5B,GACtEA,EAAKhO,UAAYA,EAAeA,IAAWA,EAAUnrB,OAASm5B,GAC9DA,EAAK8G,YAAcA,EAAiBA,IAAaA,EAAYjgC,OAASm5B,GACtEA,EAAKr7B,UAAYA,EAAWA,EAAUkC,OAASm5B,EACxCA,GAGFlB,EAAAkI,0BAAP,SACE7mC,EACAkQ,EACAuB,EACAygB,EACAjmB,EACA8J,EACAtP,GAEA,IAAIo5B,EAAO,IAAIiH,GAQf,OAPAjH,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAK3vB,eAAiBA,EAAoBA,GAAgB6uB,GAAU7uB,EAAgB2vB,GACpFA,EAAKpuB,UAAYA,EAAWA,EAAU/K,OAASm5B,EAC/CA,EAAK3N,KAAOA,EAAUA,IAAMA,EAAKxrB,OAASm5B,GAC1CA,EAAK5zB,WAAaA,EAAgBA,GAAY8yB,GAAU9yB,EAAY4zB,GAC7DA,GAGFlB,EAAAoI,wBAAP,SACE/mC,EACAkQ,EACAuB,EACAygB,EACAjmB,EACA8J,EACAtP,GAEA,IAAIo5B,EAAO,IAAImH,GAQf,OAPAnH,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAK3vB,eAAiBA,EAAoBA,GAAgB6uB,GAAU7uB,EAAgB2vB,GACpFA,EAAKpuB,UAAYA,EAAWA,EAAU/K,OAASm5B,EAC/CA,EAAK3N,KAAOA,EAAUA,IAAMA,EAAKxrB,OAASm5B,GAC1CA,EAAK5zB,WAAaA,EAAgBA,GAAY8yB,GAAU9yB,EAAY4zB,GAC7DA,GAGFlB,EAAAsI,2BAAP,SACEjnC,EACAkK,EACA+B,EACA8J,EACAtP,GAEA,IAAIo5B,EAAO,IAAIqH,GAMf,OALArH,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAK31B,QAAUA,EAAS60B,GAAU70B,EAAS21B,GAC3CA,EAAK5zB,WAAaA,EAAgBA,GAAY8yB,GAAU9yB,EAAY4zB,GAC7DA,GAGFlB,EAAAwI,sBAAP,SACE1mC,EACAgG,GAEA,IAAIo5B,EAAO,IAAIuH,GAGf,OAFAvH,EAAKp5B,MAAQA,EACbo5B,EAAKp/B,MAAQA,EAAWA,IAAOA,EAAMiG,OAASm5B,GACvCA,GAGFlB,EAAA0I,sBAAP,SACExV,EACAyV,EACA7gC,GAEA,IAAIo5B,EAAO,IAAI0H,GAIf,OAHA1H,EAAKp5B,MAAQA,EACbo5B,EAAKhO,UAAYA,EAAWA,EAAUnrB,OAASm5B,EAC/CA,EAAKyH,MAAQA,EAAOvI,GAAUuI,EAAOzH,GAC9BA,GAGFlB,EAAA6I,iBAAP,SACEhW,EACAltB,EACAmC,GAEA,IAAI04B,EAAO,IAAIsI,GAIf,OAHAtI,EAAK14B,MAAQA,EACb04B,EAAK3N,MAAQA,EAAWA,IAAOA,EAAM9qB,OAASy4B,GAC9CA,EAAK76B,WAAaA,EAAYy6B,GAAUz6B,EAAY66B,GAC7CA,GAGFR,EAAA+I,qBAAP,SACEjnC,EACAgG,GAEA,IAAIo5B,EAAO,IAAI8H,GAGf,OAFA9H,EAAKp5B,MAAQA,EACbo5B,EAAKp/B,MAAQA,EAAOA,EAAMiG,OAASm5B,EAC5BA,GAGFlB,EAAAiJ,mBAAP,SACEtjC,EACAujC,EACAC,EACAC,EACAthC,GAEA,IAAIo5B,EAAO,IAAImI,GASf,OARAnI,EAAKp5B,MAAQA,EACbo5B,EAAKv7B,WAAaA,EAAYy6B,GAAUz6B,EAAYu7B,GACpDA,EAAKgI,cAAgBA,EACjBA,IAAeA,EAAcnhC,OAASm5B,GAC1CA,EAAKiI,gBAAkBA,EACnBA,GAAiB/I,GAAU+I,EAAiBjI,GAChDA,EAAKkI,kBAAoBA,EACrBA,GAAmBhJ,GAAUgJ,EAAmBlI,GAC7CA,GAGFlB,EAAAsJ,sBAAP,SACEjoC,EACAkQ,EACAxH,EACAuD,EACA8J,EACAtP,GAEA,IAAIo5B,EAAO,IAAIqI,GAOf,OANArI,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAK7/B,KAAOA,EAAMA,EAAK0G,OAASm5B,EAChCA,EAAK3vB,eAAiBA,EAAoBA,GAAgB6uB,GAAU7uB,EAAgB2vB,GACpFA,EAAKz0B,KAAO1C,EAAOA,EAAMhC,OAASm5B,EAClCA,EAAK5zB,WAAaA,EAAgBA,GAAY8yB,GAAU9yB,EAAY4zB,GAC7DA,GAGFlB,EAAAwJ,wBAAP,SACE74B,EACArD,EACA8J,EACAtP,GAEA,IAAIo5B,EAAO,IAAIuI,GAKf,OAJAvI,EAAKp5B,MAAQA,EACbo5B,EAAK9pB,MAAQA,EACb8pB,EAAKvwB,aAAeA,EAAcyvB,GAAUzvB,EAAcuwB,GAC1DA,EAAK5zB,WAAaA,EAAgBA,GAAY8yB,GAAU9yB,EAAY4zB,GAC7DA,GAGFlB,EAAA0J,0BAAP,SACEroC,EACAoL,EACAgM,EACAnL,EACA8J,EACAtP,GAEA,IAAI04B,EAAO,IAAImJ,GAOf,OANAnJ,EAAK14B,MAAQA,EACb04B,EAAKppB,MAAQA,EACbopB,EAAKn/B,KAAOA,EAAMA,EAAK0G,OAASy4B,EAChCA,EAAK/zB,KAAOA,EAAUA,IAAMA,EAAK1E,OAASy4B,GAC1CA,EAAK/nB,YAAcA,EAAiBA,IAAaA,EAAY1Q,OAASy4B,GACtEA,EAAKlzB,WAAaA,EACXkzB,GAGFR,EAAA4J,oBAAP,SACE/0B,EACA/M,GAEA,IAAIo5B,EAAO,IAAI2I,GAGf,OAFA3I,EAAKp5B,MAAQA,EACbo5B,EAAKrsB,WAAaA,EACXqsB,GAGFlB,EAAA8J,qBAAP,SACE5W,EACArtB,EACAiC,GAEA,IAAIo5B,EAAO,IAAI6I,GAIf,OAHA7I,EAAKp5B,MAAQA,EACbo5B,EAAKhO,UAAYA,EAAWA,EAAUnrB,OAASm5B,EAC/CA,EAAKr7B,UAAYA,EAAWA,EAAUkC,OAASm5B,EACxCA,GAEXlB,EAh4BA,GAAsB7/B,EAAA6/B,OAo4BtB,IAAAgK,EAAA,SAAAvmC,GAAA,SAAAumC,mDAKA,OAL6C7lC,EAAA6lC,EAAAvmC,GAK7CumC,EALA,CAA6ChK,GAAvB7/B,EAAA6pC,iBAQtB,IAAA7J,EAAA,SAAA18B,GAAA,SAAA08B,IAAA,IAAAx8B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASkkC,OAMlB,OAP8B9lC,EAAAg8B,EAAA18B,GAO9B08B,EAPA,CAA8B6J,GAAjB7pC,EAAAggC,WAUb,IAAAM,EAAA,SAAAh9B,GAAA,SAAAg9B,IAAA,IAAA98B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASmkC,gBAMlB,OAPuC/lC,EAAAs8B,EAAAh9B,GAOvCg9B,EAPA,CAAuCT,GAA1B7/B,EAAAsgC,oBAUb,SAAYjuB,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYrS,EAAAqS,gBAAArS,EAAAqS,mBAUZ,IAAAmuB,EAAA,SAAAl9B,GAAA,SAAAk9B,IAAA,IAAAh9B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASokC,UAWhBxmC,EAAAymC,yBAAoD,OACtD,OAbmCjmC,EAAAw8B,EAAAl9B,GAanCk9B,EAbA,CAAmCX,GAAtB7/B,EAAAwgC,gBAgBb,IAcYlzB,EAdZszB,EAAA,SAAAt9B,GAAA,SAAAs9B,IAAA,IAAAp9B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASiN,YAQlB,OATmC7O,EAAA48B,EAAAt9B,GASnCs9B,EATA,CAAmCiJ,GAAtB7pC,EAAA4gC,gBAcb,SAAYtzB,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,yBACAA,IAAA,mBALF,CAAYA,EAAAtN,EAAAsN,gBAAAtN,EAAAsN,mBASZ,IAAA0zB,EAAA,SAAA19B,GAAA,SAAA09B,IAAA,IAAAx9B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASskC,YAQlB,OATmClmC,EAAAg9B,EAAA19B,GASnC09B,EATA,CAAmCnB,GAAtB7/B,EAAAghC,gBAYb,SAAYmJ,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYnqC,EAAAmqC,cAAAnqC,EAAAmqC,iBAUZ,IAAAhJ,EAAA,SAAA79B,GAAA,SAAA69B,IAAA,IAAA39B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASwkC,UAMlB,OAPiCpmC,EAAAm9B,EAAA79B,GAOjC69B,EAPA,CAAiCtB,GAApB7/B,EAAAmhC,cAYb,IAAAkJ,EAAA,SAAA/mC,GAAA,SAAA+mC,mDAAgD,OAAPrmC,EAAAqmC,EAAA/mC,GAAO+mC,EAAhD,CAAyCxK,GAAnB7/B,EAAAqqC,aAGtB,IAQYx8B,EARZwzB,EAAA,SAAA/9B,GAAA,SAAA+9B,IAAA,IAAA79B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS0Q,aAIlB,OAL0CtS,EAAAq9B,EAAA/9B,GAK1C+9B,EALA,CAA0CgJ,GAA7BrqC,EAAAqhC,uBAQb,SAAYxzB,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA7N,EAAA6N,cAAA7N,EAAA6N,iBAUZ,IAAAy8B,EAAA,SAAAhnC,GAAA,SAAAgnC,IAAA,IAAA9mC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS+H,UAIlB,OALgD3J,EAAAsmC,EAAAhnC,GAKhDgnC,EALA,CAAgDD,GAA1BrqC,EAAAsqC,oBAQtB,IAAA7I,EAAA,SAAAn+B,GAAA,SAAAm+B,IAAA,IAAAj+B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAoK,YAAcC,EAAY08B,QAI5B,OAL4CvmC,EAAAy9B,EAAAn+B,GAK5Cm+B,EALA,CAA4C6I,GAA/BtqC,EAAAyhC,yBAQb,SAAY+I,GACVA,IAAA,mBACAA,IAAA,WAFF,CAAYxqC,EAAAwqC,gBAAAxqC,EAAAwqC,mBAMZ,IAAAzI,EAAA,SAAAz+B,GAAA,SAAAy+B,IAAA,IAAAv+B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASiQ,YAQlB,OATyC7R,EAAA+9B,EAAAz+B,GASzCy+B,EATA,CAAyCsI,GAA5BrqC,EAAA+hC,sBAYb,IAAAG,EAAA,SAAA5+B,GAAA,SAAA4+B,IAAA,IAAA1+B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASoQ,SAQlB,OATsChS,EAAAk+B,EAAA5+B,GAStC4+B,EATA,CAAsCmI,GAAzBrqC,EAAAkiC,mBAYb,IAAAG,EAAA,SAAA/+B,GAAA,SAAA++B,IAAA,IAAA7+B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS6Q,OAQlB,OAToCzS,EAAAq+B,EAAA/+B,GASpC++B,EATA,CAAoCgI,GAAvBrqC,EAAAqiC,iBAYb,IAAAG,EAAA,SAAAl/B,GAAA,SAAAk/B,IAAA,IAAAh/B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS6kC,QAIlB,OALqCzmC,EAAAw+B,EAAAl/B,GAKrCk/B,EALA,CAAqC6H,GAAxBrqC,EAAAwiC,kBAQb,IAAAE,EAAA,SAAAp/B,GAAA,SAAAo/B,IAAA,IAAAl/B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASkH,YAChBtJ,EAAAuE,KAAO,gBACT,OAH2C/D,EAAA0+B,EAAAp/B,GAG3Co/B,EAHA,CAA2CrB,GAA9BrhC,EAAA0iC,wBAMb,IAAAE,EAAA,SAAAt/B,GAAA,SAAAs/B,IAAA,IAAAp/B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS4Q,gBAMlB,OAP6CxS,EAAA4+B,EAAAt/B,GAO7Cs/B,EAPA,CAA6CyH,GAAhCrqC,EAAA4iC,0BAUb,IAAAK,EAAA,SAAA3/B,GAAA,SAAA2/B,IAAA,IAAAz/B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAoK,YAAcC,EAAY68B,QAI5B,OAL4C1mC,EAAAi/B,EAAA3/B,GAK5C2/B,EALA,CAA4CqH,GAA/BtqC,EAAAijC,yBAQb,IAAAE,EAAA,SAAA7/B,GAAA,SAAA6/B,IAAA,IAAA3/B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASwU,WAIlB,OALwCpW,EAAAm/B,EAAA7/B,GAKxC6/B,EALA,CAAwCkH,GAA3BrqC,EAAAmjC,qBAQb,IAAAG,EAAA,SAAAhgC,GAAA,SAAAggC,IAAA,IAAA9/B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAoK,YAAcC,EAAY88B,UAI5B,OAL8C3mC,EAAAs/B,EAAAhgC,GAK9CggC,EALA,CAA8CgH,GAAjCtqC,EAAAsjC,2BAQb,IAAAE,EAAA,SAAAlgC,GAAA,SAAAkgC,IAAA,IAAAhgC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASglC,MAClB,OAFmC5mC,EAAAw/B,EAAAlgC,GAEnCkgC,EAFA,CAAmCnB,GAAtBriC,EAAAwjC,gBAKb,IAAAE,EAAA,SAAApgC,GAAA,SAAAogC,IAAA,IAAAlgC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASilC,KAChBrnC,EAAAuE,KAAO,SACT,OAHoC/D,EAAA0/B,EAAApgC,GAGpCogC,EAHA,CAAoCrC,GAAvBrhC,EAAA0jC,iBAMb,IAAAE,EAAA,SAAAtgC,GAAA,SAAAsgC,IAAA,IAAApgC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASgQ,gBAIlB,OAL6C5R,EAAA4/B,EAAAtgC,GAK7CsgC,EALA,CAA6CyG,GAAhCrqC,EAAA4jC,0BAQb,IAAAE,EAAA,SAAAxgC,GAAA,SAAAwgC,IAAA,IAAAtgC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS2Q,iBAMlB,OAP8CvS,EAAA8/B,EAAAxgC,GAO9CwgC,EAPA,CAA8CuG,GAAjCrqC,EAAA8jC,2BAUb,IAAAG,EAAA,SAAA3gC,GAAA,SAAA2gC,IAAA,IAAAzgC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAoK,YAAcC,EAAYi9B,SAM5B,OAP6C9mC,EAAAigC,EAAA3gC,GAO7C2gC,EAPA,CAA6CqG,GAAhCtqC,EAAAikC,0BAUb,IAAAK,EAAA,SAAAhhC,GAAA,SAAAghC,IAAA,IAAA9gC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASmlC,UAQlB,OATuC/mC,EAAAsgC,EAAAhhC,GASvCghC,EATA,CAAuC+F,GAA1BrqC,EAAAskC,oBAYb,IAAAE,EAAA,SAAAlhC,GAAA,SAAAkhC,IAAA,IAAAhhC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAoK,YAAcC,EAAYC,SAI5B,OAL6C9J,EAAAwgC,EAAAlhC,GAK7CkhC,EALA,CAA6C8F,GAAhCtqC,EAAAwkC,0BAQb,IAAAE,EAAA,SAAAphC,GAAA,SAAAohC,IAAA,IAAAlhC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASwQ,MAChB5S,EAAAuE,KAAO,UACT,OAHqC/D,EAAA0gC,EAAAphC,GAGrCohC,EAHA,CAAqCrD,GAAxBrhC,EAAA0kC,kBAMb,IAAAE,EAAA,SAAAthC,GAAA,SAAAshC,IAAA,IAAAphC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASqQ,KAChBzS,EAAAuE,KAAO,SACT,OAHoC/D,EAAA4gC,EAAAthC,GAGpCshC,EAHA,CAAoCvD,GAAvBrhC,EAAA4kC,iBAMb,IAAAE,EAAA,SAAAxhC,GAAA,SAAAwhC,IAAA,IAAAthC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASolC,KAChBxnC,EAAAuE,KAAO,SACT,OAHoC/D,EAAA8gC,EAAAxhC,GAGpCwhC,EAHA,CAAoCzD,GAAvBrhC,EAAA8kC,iBAMb,IAAA/B,EAAA,SAAAz/B,GAAA,SAAAy/B,IAAA,IAAAv/B,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASqlC,MAChBznC,EAAAuE,KAAO,UACT,OAHqC/D,EAAA++B,EAAAz/B,GAGrCy/B,EAHA,CAAqC1B,GAAxBrhC,EAAA+iC,kBAMb,IAAAmI,EAAA,SAAA5nC,GAAA,SAAA4nC,mDAMA,OAN8ClnC,EAAAknC,EAAA5nC,GAM9C4nC,EANA,CAA8Cb,GAAxBrqC,EAAAkrC,kBAStB,IAAAjG,EAAA,SAAA3hC,GAAA,SAAA2hC,IAAA,IAAAzhC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASulC,eAClB,OAF4CnnC,EAAAihC,EAAA3hC,GAE5C2hC,EAFA,CAA4CiG,GAA/BlrC,EAAAilC,yBAKb,IAAAE,EAAA,SAAA7hC,GAAA,SAAA6hC,IAAA,IAAA3hC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASwlC,cAClB,OAF2CpnC,EAAAmhC,EAAA7hC,GAE3C6hC,EAFA,CAA2C+F,GAA9BlrC,EAAAmlC,wBAOb,IAGYkG,EAHZC,EAAA,SAAAhoC,GAAA,SAAAgoC,mDAA+C,OAAPtnC,EAAAsnC,EAAAhoC,GAAOgoC,EAA/C,CAAwCzL,GAAlB7/B,EAAAsrC,YAGtB,SAAYD,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAArrC,EAAAqrC,aAAArrC,EAAAqrC,gBAUZ,IAAAE,EAAA,SAAAjoC,GAoBE,SAAAioC,EAAYxpB,EAAwBha,EAAcpC,GAAlD,IAAAnC,EACEF,EAAAxC,KAAAR,OAAOA,YApBTkD,EAAAmC,KAAOC,EAASwE,OAChB5G,EAAAoE,OAAS,KAaTpE,EAAAgoC,UAA8B,KAE9BhoC,EAAAyZ,gBAAuB,EAKrBzZ,EAAKioC,WAAa9lC,EAClBnC,EAAKue,eAAiBA,EACtBve,EAAK0M,aAAeu2B,GAAmBjjC,EAAKue,gBAC5Cve,EAAKgC,WAAa,IAAIJ,MACtB5B,EAAKmE,MAAQ,IAAIg4B,EAAA30B,MAAMxH,EAAM,EAAGuE,EAAKxC,QACrC/B,EAAKuE,KAAOA,IAOhB,OAlC4B/D,EAAAunC,EAAAjoC,GA+B1BjC,OAAAC,eAAIiqC,EAAAvpC,UAAA,eAAJ,WAAsB,OAAO1B,KAAKmrC,YAAcJ,EAAWK,uCAE3DrqC,OAAAC,eAAIiqC,EAAAvpC,UAAA,iBAAJ,WAAwB,OAAO1B,KAAKmrC,YAAcJ,EAAWM,yCAC/DJ,EAlCA,CAA4B1L,GAAf7/B,EAAAurC,SAqCb,IAAAK,EAAA,SAAAtoC,GAAA,SAAAsoC,IAAA,IAAApoC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YAKEkD,EAAA2J,WAAqC,KAE3B3J,EAAAqoC,+BAAgD,KAChDroC,EAAAsoC,4BAA6C,OAwDzD,OAhEmD9nC,EAAA4nC,EAAAtoC,GAWjDjC,OAAAC,eAAIsqC,EAAA5pC,UAAA,gCAAJ,WAIE,OAHK1B,KAAKurC,iCACRvrC,KAAKurC,+BAAiCE,GAAmBzrC,MAAM,IAE1DA,KAAKurC,gEAIdxqC,OAAAC,eAAIsqC,EAAA5pC,UAAA,6BAAJ,WAIE,OAHK1B,KAAKwrC,8BACRxrC,KAAKwrC,4BAA8BC,GAAmBzrC,MAAM,IAEvDA,KAAKwrC,6DAIdzqC,OAAAC,eAAIsqC,EAAA5pC,UAAA,kBAAJ,WACE,IAAI4F,EAAStH,KAAKsH,OAClB,QAAKA,MAGDA,EAAOjC,MAAQC,EAASiB,YAAce,EAASA,EAAOA,UAGnDA,EAAOjC,MAAQC,EAASwE,yCAIjC/I,OAAAC,eAAIsqC,EAAA5pC,UAAA,wBAAJ,WACE,IAAI4F,EAAStH,KAAKsH,OAClB,SAAKA,GAAWA,EAAOjC,MAAQC,EAASiB,YAAce,EAASA,EAAOA,WAGlEA,EAAOjC,MAAQC,EAASa,qBACnBnG,KAAKyJ,GAAG21B,EAAA11B,YAAY/D,SAAkC2B,EAAQokC,iBAEnEpkC,EAAOjC,MAAQC,EAASC,iBACnBvF,KAAKyJ,GAAG21B,EAAA11B,YAAYwC,SAA8B5E,EAAQokC,iBAE5DpkC,EAAOjC,MAAQC,EAASwE,QAAU9J,KAAKyJ,GAAG21B,EAAA11B,YAAY/D,0CAI/D2lC,EAAA5pC,UAAAiqC,oBAAA,SAAoBtjC,GAIlB,OACEA,EAAOzH,KAAK6G,MAAQY,EAAOb,aAAaC,MACxCzH,KAAKqH,MAAMuC,QAAUvB,EAAOhB,MAAMuC,SACjC5J,KAAK0rC,kBAGZJ,EAhEA,CAAmDN,GAA7BtrC,EAAA4rC,uBAmEtB,IAAAM,EAAA,SAAA5oC,GAAA,SAAA4oC,mDAMA,OAN+DloC,EAAAkoC,EAAA5oC,GAM/D4oC,EANA,CAA+DN,GAAzC5rC,EAAAksC,mCAStB,IAAA7G,EAAA,SAAA/hC,GAAA,SAAA+hC,IAAA,IAAA7hC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASumC,QAIlB,OALoCnoC,EAAAqhC,EAAA/hC,GAKpC+hC,EALA,CAAoCiG,GAAvBtrC,EAAAqlC,iBAQb,IAAAE,EAAA,SAAAjiC,GAAA,SAAAiiC,IAAA,IAAA/hC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASwmC,QAIlB,OALoCpoC,EAAAuhC,EAAAjiC,GAKpCiiC,EALA,CAAoC+F,GAAvBtrC,EAAAulC,iBAQb,IAAAE,EAAA,SAAAniC,GAAA,SAAAmiC,IAAA,IAAAjiC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASC,mBAelB,OAhBsC7B,EAAAyhC,EAAAniC,GAYpCjC,OAAAC,eAAImkC,EAAAzjC,UAAA,iBAAJ,WACE,IAAIoP,EAAiB9Q,KAAK8Q,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe7L,OAAS,mCAE7DkgC,EAhBA,CAAsCmG,GAAzB5rC,EAAAylC,mBAmBb,IAAAE,GAAA,SAAAriC,GAAA,SAAAqiC,IAAA,IAAAniC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASymC,WAIlB,OALuCroC,EAAA2hC,EAAAriC,GAKvCqiC,EALA,CAAuC2F,GAA1BtrC,EAAA2lC,qBAQb,IAAAE,GAAA,SAAAviC,GAAA,SAAAuiC,IAAA,IAAAriC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS0mC,KAMlB,OAPiCtoC,EAAA6hC,EAAAviC,GAOjCuiC,EAPA,CAAiCyF,GAApBtrC,EAAA6lC,eAUb,IAAAE,GAAA,SAAAziC,GAAA,SAAAyiC,IAAA,IAAAviC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS2mC,QAClB,OAFoCvoC,EAAA+hC,EAAAziC,GAEpCyiC,EAFA,CAAoCuF,GAAvBtrC,EAAA+lC,kBAKb,IAAAE,GAAA,SAAA3iC,GAAA,SAAA2iC,IAAA,IAAAziC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASG,kBAIlB,OALqC/B,EAAAiiC,EAAA3iC,GAKrC2iC,EALA,CAAqC2F,GAAxB5rC,EAAAimC,mBAQb,IAAAE,GAAA,SAAA7iC,GAAA,SAAA6iC,IAAA,IAAA3iC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS4mC,uBAKlB,OAN0CxoC,EAAAmiC,EAAA7iC,GAM1C6iC,EANA,CAA0CyF,GAA7B5rC,EAAAmmC,wBASb,IAAAQ,GAAA,SAAArjC,GAAA,SAAAqjC,IAAA,IAAAnjC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS6mC,eAMlB,OAP2CzoC,EAAA2iC,EAAArjC,GAO3CqjC,EAPA,CAA2C9G,GAA9B7/B,EAAA2mC,yBAUb,IAAAE,GAAA,SAAAvjC,GAAA,SAAAujC,IAAA,IAAArjC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS8mC,eAMlB,OAPkC1oC,EAAA6iC,EAAAvjC,GAOlCujC,EAPA,CAAkChH,GAArB7/B,EAAA6mC,gBAUb,IAAAR,GAAA,SAAA/iC,GAAA,SAAA+iC,IAAA,IAAA7iC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASK,SAUlB,OAXqCjC,EAAAqiC,EAAA/iC,GAWrC+iC,EAXA,CAAqCiF,GAAxBtrC,EAAAqmC,mBAcb,IAAAU,GAAA,SAAAzjC,GAAA,SAAAyjC,IAAA,IAAAvjC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS+mC,aAIlB,OALyC3oC,EAAA+iC,EAAAzjC,GAKzCyjC,EALA,CAAyCuE,GAA5BtrC,EAAA+mC,uBAQb,IAAAY,GAAA,SAAArkC,GAAA,SAAAqkC,IAAA,IAAAnkC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS8F,iBAGhBlI,EAAAopC,gBAAuB,IACzB,OALsC5oC,EAAA2jC,EAAArkC,GAKtCqkC,EALA,CAAsCuE,GAAzBlsC,EAAA2nC,oBAQb,IAAAG,GAAA,SAAAxkC,GAAA,SAAAwkC,IAAA,IAAAtkC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASinC,MAalB,OAdkC7oC,EAAA8jC,EAAAxkC,GAclCwkC,EAdA,CAAkCwD,GAArBtrC,EAAA8nC,gBAiBb,IAAAE,GAAA,SAAA1kC,GAAA,SAAA0kC,IAAA,IAAAxkC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASO,sBAalB,OAdyCnC,EAAAgkC,EAAA1kC,GAUvCjC,OAAAC,eAAI0mC,EAAAhmC,UAAA,iBAAJ,WACE,IAAIoP,EAAiB9Q,KAAK8Q,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe7L,OAAS,mCAE7DyiC,EAdA,CAAyC4D,GAA5B5rC,EAAAgoC,uBAiBb,IAAAf,GAAA,SAAA3jC,GAAA,SAAA2jC,IAAA,IAAAzjC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASknC,KAQlB,OATiC9oC,EAAAijC,EAAA3jC,GASjC2jC,EATA,CAAiCqE,GAApBtrC,EAAAinC,eAYb,IAAAM,GAAA,SAAAjkC,GAAA,SAAAikC,IAAA,IAAA/jC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASmnC,oBAIlB,OALuC/oC,EAAAujC,EAAAjkC,GAKvCikC,EALA,CAAuCqE,GAA1B5rC,EAAAunC,qBAQb,IAAAH,GAAA,SAAA9jC,GAAA,SAAA8jC,IAAA,IAAA5jC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASS,SAYlB,OAbqCrC,EAAAojC,EAAA9jC,GAarC8jC,EAbA,CAAqCkE,GAAxBtrC,EAAAonC,mBAgBb,IAAAK,GAAA,SAAAnkC,GAAA,SAAAmkC,IAAA,IAAAjkC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASW,uBAClB,OAF0CvC,EAAAyjC,EAAAnkC,GAE1CmkC,EAFA,CAA0ChC,GAA7BzlC,EAAAynC,wBAKb,IAAAS,GAAA,SAAA5kC,GAAA,SAAA4kC,IAAA,IAAA1kC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASgG,oBAClB,OAFuC5H,EAAAkkC,EAAA5kC,GAEvC4kC,EAFA,CAAuCF,IAA1BhoC,EAAAkoC,qBAKb,IAAAE,GAAA,SAAA9kC,GAAA,SAAA8kC,IAAA,IAAA5kC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASa,uBAIlB,OAL0CzC,EAAAokC,EAAA9kC,GAK1C8kC,EALA,CAA0CwD,GAA7B5rC,EAAAooC,wBAQb,IAAAE,GAAA,SAAAhlC,GAAA,SAAAglC,IAAA,IAAA9kC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASonC,SAIlB,OALqChpC,EAAAskC,EAAAhlC,GAKrCglC,EALA,CAAqCgD,GAAxBtrC,EAAAsoC,mBAQb,IAAAK,GAAA,SAAArlC,GAAA,SAAAqlC,IAAA,IAAAnlC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASqnC,aAMlB,OAPgCjpC,EAAA2kC,EAAArlC,GAOhCqlC,EAPA,CAAgC9I,GAAnB7/B,EAAA2oC,cAUb,IAAAF,GAAA,SAAAnlC,GAAA,SAAAmlC,IAAA,IAAAjlC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASsnC,SAMlB,OAPqClpC,EAAAykC,EAAAnlC,GAOrCmlC,EAPA,CAAqC6C,GAAxBtrC,EAAAyoC,mBAUb,IAAAI,GAAA,SAAAvlC,GAAA,SAAAulC,IAAA,IAAArlC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASunC,QAIlB,OALoCnpC,EAAA6kC,EAAAvlC,GAKpCulC,EALA,CAAoCyC,GAAvBtrC,EAAA6oC,kBAQb,IAAAK,GAAA,SAAA5lC,GAAA,SAAA4lC,IAAA,IAAA1lC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASwnC,MAUlB,OAXkCppC,EAAAklC,EAAA5lC,GAWlC4lC,EAXA,CAAkCoC,GAArBtrC,EAAAkpC,gBAcb,IAAAE,GAAA,SAAA9lC,GAAA,SAAA8lC,IAAA,IAAA5lC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASe,kBAMlB,OAPqC3C,EAAAolC,EAAA9lC,GAOrC8lC,EAPA,CAAqCwC,GAAxB5rC,EAAAopC,mBAUb,IAAAI,GAAA,SAAAlmC,GAAA,SAAAkmC,IAAA,IAAAhmC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASynC,sBAClB,OAFyCrpC,EAAAwlC,EAAAlmC,GAEzCkmC,EAFA,CAAyC0C,GAA5BlsC,EAAAwpC,uBAKb,IAAAF,GAAA,SAAAhmC,GAAA,SAAAgmC,IAAA,IAAA9lC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAASiB,WAMlB,OAPuC7C,EAAAslC,EAAAhmC,GAOvCgmC,EAPA,CAAuCgC,GAA1BtrC,EAAAspC,qBAUb,IAAAI,GAAA,SAAApmC,GAAA,SAAAomC,IAAA,IAAAlmC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS0nC,OAIlB,OALmCtpC,EAAA0lC,EAAApmC,GAKnComC,EALA,CAAmC4B,GAAtBtrC,EAAA0pC,iBAQb,IAAAE,GAAA,SAAAtmC,GAAA,SAAAsmC,IAAA,IAAApmC,EAAA,OAAAF,KAAAoU,MAAApX,KAAAmN,YAAAnN,YACEkD,EAAAmC,KAAOC,EAAS2nC,QAMlB,OAPoCvpC,EAAA4lC,EAAAtmC,GAOpCsmC,EAPA,CAAoC0B,GAUpC,SAAAkC,GAAkCtsC,EAAciM,GAC9C,GAAIA,EACF,IAAK,IAAIxM,EAAI,EAAG2E,EAAI6H,EAAW5H,OAAQ5E,EAAI2E,IAAK3E,EAAG,CACjD,IAAIyM,EAAYD,EAAWxM,GACvB+T,EAAatH,EAAUlM,KAC3B,GAAIwT,EAAW/O,MAAQC,EAAS0Q,YAAqC5B,EAAY3M,MAAQ7G,EACvF,OAAOkM,EAIb,OAAO,KAST,SAAA2+B,GAAmCrkC,EAAmC+lC,QAAA,IAAAA,OAAA,GACpE,IAAIvsC,EAAOwG,EAAYxG,KAAK6G,KACxBH,EAASF,EAAYE,OACzB,OAAKA,IAEHF,EAAY/B,MAAQC,EAASynC,qBAC7BzlC,EAAOjC,MAAQC,EAASiB,WAElBe,EAASA,EAAOA,SAEpBA,EAAOjC,MAAQC,EAASC,iBACnBkmC,GAAqCnkC,EAAQ6lC,IAClD/lC,EAAYqC,GAAG21B,EAAA11B,YAAYwC,QACvBkzB,EAAA78B,iBACA68B,EAAA98B,oBACF1B,EAGJ0G,EAAOjC,MAAQC,EAASa,sBACxBmB,EAAOjC,MAAQC,EAASG,gBAEjBgmC,GAAyCnkC,EAAQ6lC,GACjD/N,EAAA78B,iBAAmB3B,EAErBusC,EACHvsC,EACAwG,EAAYC,MAAMuC,OAAOgG,aAAewvB,EAAAl9B,eAAiBtB,EAvBzCA,EA2BtB,SAAAulC,GAAmC5+B,GAEjC,OADIA,EAAK+I,SAAS,SAAQ/I,EAAOA,EAAKgJ,UAAU,EAAGhJ,EAAKtC,OAAS,IAC1DsC,EAMT,SAAAo4B,GAAmB0B,EAAe/5B,GAChC,IAAK,IAAIjH,EAAI,EAAG2E,EAAIq8B,EAAMp8B,OAAQ5E,EAAI2E,IAAK3E,EACzCghC,EAAMhhC,GAAGiH,OAASA,EArET5H,EAAA4pC,kBAUb5pC,EAAAwtC,qBAcAxtC,EAAA0tC,aAAA,SAA6BxsC,EAAciM,GACzC,OAA8C,MAAvCqgC,GAAkBtsC,EAAMiM,IAIjCnN,EAAA+rC,sBA8BA/rC,EAAAymC,qCC/xDA,IAAAkH,EAGAA,EAAA,WACA,OAAArtC,KADA,GAIA,IAEAqtC,KAAA/zB,SAAA,cAAAA,KAAA,EAAAg0B,MAAA,QACC,MAAAC,GAED,iBAAAC,SAAAH,EAAAG,QAOA7tC,EAAAD,QAAA2tC,mYCVA,IAuBY/N,EAvBZx9B,EAAA3B,EAAA,GAMA6B,EAAA7B,EAAA,GAKA8f,EAAA9f,EAAA,GAoJA,SAAAstC,EAAgChmC,GAC9B,OAAQA,GACN,IAAK,WAAY,OAAO63B,EAAMoO,SAC9B,IAAK,KAAM,OAAOpO,EAAMqO,GACxB,IAAK,QAAS,OAAOrO,EAAMsO,MAC3B,IAAK,QAAS,OAAOtO,EAAMuO,MAC3B,IAAK,QAAS,OAAOvO,EAAMwM,MAC3B,IAAK,OAAQ,OAAOxM,EAAMwO,KAC1B,IAAK,QAAS,OAAOxO,EAAMyO,MAC3B,IAAK,QAAS,OAAOzO,EAAMzqB,MAC3B,IAAK,WAAY,OAAOyqB,EAAMyM,SAC9B,IAAK,QAAS,OAAOzM,EAAM3nB,MAC3B,IAAK,cAAe,OAAO2nB,EAAM9yB,YACjC,IAAK,WAAY,OAAO8yB,EAAM0O,SAC9B,IAAK,UAAW,OAAO1O,EAAMzkB,QAC7B,IAAK,UAAW,OAAOykB,EAAMttB,QAC7B,IAAK,SAAU,OAAOstB,EAAM2O,OAC5B,IAAK,KAAM,OAAO3O,EAAM0M,GACxB,IAAK,OAAQ,OAAO1M,EAAM4O,KAC1B,IAAK,OAAQ,OAAO5O,EAAMvoB,KAC1B,IAAK,SAAU,OAAOuoB,EAAM35B,OAC5B,IAAK,UAAW,OAAO25B,EAAM6O,QAC7B,IAAK,QAAS,OAAO7O,EAAMqL,MAC3B,IAAK,UAAW,OAAOrL,EAAM8O,QAC7B,IAAK,MAAO,OAAO9O,EAAMiN,IACzB,IAAK,OAAQ,OAAOjN,EAAM+O,KAC1B,IAAK,WAAY,OAAO/O,EAAMxlB,SAC9B,IAAK,MAAO,OAAOwlB,EAAM9zB,IACzB,IAAK,KAAM,OAAO8zB,EAAMkN,GACxB,IAAK,aAAc,OAAOlN,EAAMgP,WAChC,IAAK,SAAU,OAAOhP,EAAMv5B,OAC5B,IAAK,KAAM,OAAOu5B,EAAMiP,GACxB,IAAK,aAAc,OAAOjP,EAAMkP,WAChC,IAAK,YAAa,OAAOlP,EAAMrgB,UAC/B,IAAK,KAAM,OAAOqgB,EAAMmP,GACxB,IAAK,QAAS,OAAOnP,EAAMoP,MAC3B,IAAK,MAAO,OAAOpP,EAAMqP,IACzB,IAAK,SAAU,OAAOrP,EAAMsP,OAC5B,IAAK,YAAa,OAAOtP,EAAMxoB,UAC/B,IAAK,MAAO,OAAOwoB,EAAMgL,IACzB,IAAK,OAAQ,OAAOhL,EAAMiL,KAC1B,IAAK,KAAM,OAAOjL,EAAMuP,GACxB,IAAK,UAAW,OAAOvP,EAAMwP,QAC7B,IAAK,UAAW,OAAOxP,EAAMyP,QAC7B,IAAK,YAAa,OAAOzP,EAAM0P,UAC/B,IAAK,SAAU,OAAO1P,EAAM2P,OAC5B,IAAK,WAAY,OAAO3P,EAAM4P,SAC9B,IAAK,SAAU,OAAO5P,EAAMoN,OAC5B,IAAK,MAAO,OAAOpN,EAAM7zB,IACzB,IAAK,SAAU,OAAO6zB,EAAMpzB,OAC5B,IAAK,QAAS,OAAOozB,EAAMxpB,MAC3B,IAAK,SAAU,OAAOwpB,EAAMsN,OAC5B,IAAK,OAAQ,OAAOtN,EAAM3pB,KAC1B,IAAK,QAAS,OAAO2pB,EAAMuN,MAC3B,IAAK,OAAQ,OAAOvN,EAAMoL,KAC1B,IAAK,MAAO,OAAOpL,EAAMwN,IACzB,IAAK,OAAQ,OAAOxN,EAAMkK,KAC1B,IAAK,SAAU,OAAOlK,EAAM6P,OAC5B,IAAK,MAAO,OAAO7P,EAAM8P,IACzB,IAAK,OAAQ,OAAO9P,EAAM0N,KAC1B,IAAK,QAAS,OAAO1N,EAAM2N,MAC3B,IAAK,OAAQ,OAAO3N,EAAM+P,KAC1B,IAAK,QAAS,OAAO/P,EAAMgQ,MAC3B,QAAS,OAAOhQ,EAAMiQ,SAI1B,SAAAC,EAAsCC,GACpC,OAAQA,GACN,KAAKnQ,EAAMoO,SACX,KAAKpO,EAAMqO,GACX,KAAKrO,EAAM9yB,YACX,KAAK8yB,EAAMzkB,QACX,KAAKykB,EAAM2O,OACX,KAAK3O,EAAM+O,KACX,KAAK/O,EAAM9zB,IACX,KAAK8zB,EAAMmP,GACX,KAAKnP,EAAMoP,MACX,KAAKpP,EAAMsP,OACX,KAAKtP,EAAMxoB,UACX,KAAKwoB,EAAM4P,SACX,KAAK5P,EAAM7zB,IACX,KAAK6zB,EAAMkK,KAAM,OAAO,EACxB,QAAS,OAAO,IA3NpB,SAAYlK,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAA5/B,EAAA4/B,QAAA5/B,EAAA4/B,WAwIZ5/B,EAAA+tC,kBAmEA/tC,EAAA8vC,wBAoBA9vC,EAAAgwC,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAKnQ,EAAM2O,OAAQ,MAAO,SAC1B,KAAK3O,EAAMiP,GAAI,MAAO,KACtB,KAAKjP,EAAMkP,WAAY,MAAO,aAC9B,KAAKlP,EAAMgL,IAAK,MAAO,MACvB,KAAKhL,EAAM6P,OAAQ,MAAO,SAC1B,KAAK7P,EAAM0N,KAAM,MAAO,OACxB,KAAK1N,EAAMgQ,MAAO,MAAO,QACzB,KAAKhQ,EAAMqQ,YAAa,MAAO,MAC/B,KAAKrQ,EAAM6K,MAAO,MAAO,IACzB,KAAK7K,EAAMsQ,SAAU,MAAO,IAC5B,KAAKtQ,EAAMuQ,YAAa,MAAO,IAC/B,KAAKvQ,EAAMwQ,gBAAiB,MAAO,KACnC,KAAKxQ,EAAMyQ,mBAAoB,MAAO,KACtC,KAAKzQ,EAAM0Q,cAAe,MAAO,KACjC,KAAK1Q,EAAM2Q,mBAAoB,MAAO,KACtC,KAAK3Q,EAAM4Q,qBAAsB,MAAO,MACxC,KAAK5Q,EAAM6Q,0BAA2B,MAAO,MAC7C,KAAK7Q,EAAM8Q,KAAM,MAAO,IACxB,KAAK9Q,EAAM+Q,MAAO,MAAO,IACzB,KAAK/Q,EAAMgR,kBAAmB,MAAO,KACrC,KAAKhR,EAAMiR,SAAU,MAAO,IAC5B,KAAKjR,EAAMkR,MAAO,MAAO,IACzB,KAAKlR,EAAMmR,QAAS,MAAO,IAC3B,KAAKnR,EAAMoR,UAAW,MAAO,KAC7B,KAAKpR,EAAMqR,YAAa,MAAO,KAC/B,KAAKrR,EAAMsR,kBAAmB,MAAO,KACrC,KAAKtR,EAAMuR,wBAAyB,MAAO,KAC3C,KAAKvR,EAAMwR,oCAAqC,MAAO,MACvD,KAAKxR,EAAMyR,UAAW,MAAO,IAC7B,KAAKzR,EAAM0R,IAAK,MAAO,IACvB,KAAK1R,EAAM2R,MAAO,MAAO,IACzB,KAAK3R,EAAM4R,YAAa,MAAO,IAC/B,KAAK5R,EAAM6R,MAAO,MAAO,IACzB,KAAK7R,EAAM8R,oBAAqB,MAAO,KACvC,KAAK9R,EAAM+R,QAAS,MAAO,KAC3B,KAAK/R,EAAMgS,OAAQ,MAAO,IAC1B,KAAKhS,EAAMiS,YAAa,MAAO,KAC/B,KAAKjS,EAAMkS,aAAc,MAAO,KAChC,KAAKlS,EAAMmS,gBAAiB,MAAO,KACnC,KAAKnS,EAAMoS,yBAA0B,MAAO,MAC5C,KAAKpS,EAAMqS,aAAc,MAAO,KAChC,KAAKrS,EAAMsS,eAAgB,MAAO,KAClC,KAAKtS,EAAMuS,yBAA0B,MAAO,MAC5C,KAAKvS,EAAMwS,+BAAgC,MAAO,MAClD,KAAKxS,EAAMyS,2CAA4C,MAAO,OAC9D,KAAKzS,EAAM0S,iBAAkB,MAAO,KACpC,KAAK1S,EAAM2S,WAAY,MAAO,KAC9B,KAAK3S,EAAM4S,aAAc,MAAO,KAChC,QAEE,OADAxpC,QAAO,GACA,KAKb,IAAAgC,EAAA,WAUE,SAAAA,EAAYd,EAAgBiY,EAAYC,GA4CxC9hB,KAAA0c,aAAsB,EA3CpB1c,KAAK4J,OAASA,EACd5J,KAAK6hB,MAAQA,EACb7hB,KAAK8hB,IAAMA,EA0Cf,OAvCSpX,EAAAC,KAAP,SAAYwnC,EAAUC,GACpB,GAAID,EAAEvoC,QAAUwoC,EAAExoC,OAAQ,MAAM,IAAIgC,MAAM,mBAC1C,OAAO,IAAIlB,EAAMynC,EAAEvoC,OACjBuoC,EAAEtwB,MAAQuwB,EAAEvwB,MAAQswB,EAAEtwB,MAAQuwB,EAAEvwB,MAChCswB,EAAErwB,IAAMswB,EAAEtwB,IAAMqwB,EAAErwB,IAAMswB,EAAEtwB,MAI9B/gB,OAAAC,eAAI0J,EAAAhJ,UAAA,eAAJ,WACE,OAAO,IAAIgJ,EAAM1K,KAAK4J,OAAQ5J,KAAK6hB,MAAO7hB,KAAK6hB,wCAEjD9gB,OAAAC,eAAI0J,EAAAhJ,UAAA,aAAJ,WACE,OAAO,IAAIgJ,EAAM1K,KAAK4J,OAAQ5J,KAAK8hB,IAAK9hB,KAAK8hB,sCAG/C/gB,OAAAC,eAAI0J,EAAAhJ,UAAA,YAAJ,WAGE,IAFA,IAAI+F,EAAOzH,KAAK4J,OAAOnC,KACnBmV,EAAO,EACFy1B,EAAMryC,KAAK6hB,MAAOwwB,GAAO,IAAKA,EACb,IAApB5qC,EAAKua,WAAWqwB,IAA2Bz1B,IAEjD,OAAOA,mCAGT7b,OAAAC,eAAI0J,EAAAhJ,UAAA,cAAJ,WAGE,IAFA,IAAI+F,EAAOzH,KAAK4J,OAAOnC,KACnBoV,EAAS,EACJw1B,EAAMryC,KAAK6hB,MAAQ,EAAGwwB,GAAO,GACZ,IAApB5qC,EAAKua,WAAWqwB,KADqBA,IAEvCx1B,EAEJ,OAAOA,mCAGTnS,EAAAhJ,UAAA4M,SAAA,WACE,OAAOtO,KAAK4J,OAAOnC,KAAK8I,UAAUvQ,KAAK6hB,MAAO7hB,KAAK8hB,MAIvDpX,EAvDA,GAAahL,EAAAgL,QA+Db,IAAA4nC,EAAA,SAAAtvC,GAgBE,SAAAsvC,EAAY1oC,EAAgB3G,QAAA,IAAAA,MAAA,MAA5B,IAAAC,EACEF,EAAAxC,KAAAR,KAAMiD,IAAYjD,KAdpBkD,EAAA4e,IAAW,EAEX5e,EAAAmvC,IAAW,EACXnvC,EAAAusC,OAAgB,EAChBvsC,EAAAqvC,SAAgB,EAEhBrvC,EAAAsvC,WAAoB,EACpBtvC,EAAAuvC,aAAoB,EACpBvvC,EAAAwvC,oBAA2B,EAE3BxvC,EAAAyvC,UAAmC,KAKjCzvC,EAAK0G,OAASA,EACd1G,EAAKmvC,IAAM,EACXnvC,EAAK4e,IAAMlY,EAAOnC,KAAKxC,OACvB/B,EAAKD,YAAcA,GAA4B,IAAI6B,MAEnD,IAAI2C,EAAOmC,EAAOnC,KAWlB,GAPEvE,EAAKmvC,IAAMnvC,EAAK4e,KACS,OAAzBra,EAAKua,WAAW9e,EAAKmvC,QAEnBnvC,EAAKmvC,IAKPnvC,EAAKmvC,IAAM,EAAInvC,EAAK4e,KACK,IAAzBra,EAAKua,WAAW9e,EAAKmvC,MACQ,IAA7B5qC,EAAKua,WAAW9e,EAAKmvC,IAAM,GAG3B,IADAnvC,EAAKmvC,KAAO,EAEVnvC,EAAKmvC,IAAMnvC,EAAK4e,KACS,IAAzBra,EAAKua,WAAW9e,EAAKmvC,QAEnBnvC,EAAKmvC,aA+8Bf,OA3/B+B3uC,EAAA4uC,EAAAtvC,GAkD7BsvC,EAAA5wC,UAAAmG,KAAA,SAAK+qC,GAEH,YAFG,IAAAA,OAAA,GACH5yC,KAAKwyC,WAAa,EACXxyC,KAAKyvC,MAAQzvC,KAAK6yC,WAAWD,IAG9BN,EAAA5wC,UAAAmxC,WAAR,SAAmBD,EAAgCE,QAAhC,IAAAF,OAAA,QAAgC,IAAAE,MAAsB9uC,IAAI02B,WAE3E,IADA,IAAIjzB,EAAOzH,KAAK4J,OAAOnC,KAChBzH,KAAKqyC,IAAMryC,KAAK8hB,KAAK,CAC1B9hB,KAAKuyC,SAAWvyC,KAAKqyC,IACrB,IAAI3xC,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,KAC7B,OAAQ3xC,GACN,UAEMV,KAAKqyC,IAAMryC,KAAK8hB,KACO,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IAET,MAEF,QACA,OACA,QACA,QACA,UACIryC,KAAKqyC,IACP,MAEF,QAEE,QADEryC,KAAKqyC,IAELS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,KACb,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IAELS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,KACb,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IACA/S,EAAM6Q,2BAER7Q,EAAM2Q,oBAER3Q,EAAM4R,YAEf,QACA,QACA,QACE,OAAO5R,EAAMyT,cAEf,QAEE,QADE/yC,KAAKqyC,IAELS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,KACb,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IACA/S,EAAMsS,gBAERtS,EAAMmR,QAEf,QAEE,KADEzwC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAM8R,oBAEf,GAA6B,IAAzB3pC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAM0S,iBAGjB,OAAO1S,EAAMyR,UAEf,QAEE,QADE/wC,KAAKqyC,IACA/S,EAAM0T,UAEf,QAEE,QADEhzC,KAAKqyC,IACA/S,EAAM2T,WAEf,QAEE,KADEjzC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMmS,gBAEf,GAA6B,IAAzBhqC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IAELS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,KACb,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IACA/S,EAAMoS,0BAERpS,EAAMgR,kBAGjB,OAAOhR,EAAMiR,SAEf,QAEE,KADEvwC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMoR,UAEf,GAA6B,IAAzBjpC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMiS,YAGjB,OAAOjS,EAAM8Q,KAEf,QAEE,QADEpwC,KAAKqyC,IACA/S,EAAM6K,MAEf,QAEE,KADEnqC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMqR,YAEf,GAA6B,IAAzBlpC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMkS,aAGjB,OAAOlS,EAAM+Q,MAEf,QAEE,KADErwC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAAI7B,EAAAizB,eAAezrC,EAAKua,WAAWhiB,KAAKqyC,MAEtC,QADEryC,KAAKqyC,IACA/S,EAAM6T,aAEf,GACEL,EAAiB,GAAK9yC,KAAKqyC,IAAM,EAAIryC,KAAK8hB,KACjB,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,MACQ,IAA7B5qC,EAAKua,WAAWhiB,KAAKqyC,IAAM,GAG3B,OADAryC,KAAKqyC,KAAO,EACL/S,EAAMqQ,YAGjB,OAAOrQ,EAAM8T,IAEf,QACE,IAAIC,EAAkBrzC,KAAKqyC,IAE3B,KADEryC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAAwB,CAC/C,IAAIvR,EAAc9+B,EAAA6nC,YAAYyJ,KAQ9B,IANEtzC,KAAKqyC,IAAM,EAAIryC,KAAK8hB,KACS,IAA7Bra,EAAKua,WAAWhiB,KAAKqyC,IAAM,OAEzBryC,KAAKqyC,IACPvR,EAAc9+B,EAAA6nC,YAAY0J,UAEnBvzC,KAAKqyC,IAAMryC,KAAK8hB,KACvB,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAA2B,GAChDryC,KAAKqyC,IACP,MAGAryC,KAAK2yC,WACP3yC,KAAK2yC,UACH7R,EACAr5B,EAAK8I,UAAU8iC,EAAiBrzC,KAAKqyC,KACrCryC,KAAKqH,MAAMgsC,EAAiBrzC,KAAKqyC,MAGrC,MAEF,GAA6B,IAAzB5qC,EAAKua,WAAWhiB,KAAKqyC,KAA2B,CAElD,IADA,IAAImB,GAAS,IACJxzC,KAAKqyC,IAAMryC,KAAK8hB,KAEvB,GACG,KAFHphB,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,OAGvBryC,KAAKqyC,IAAM,EAAIryC,KAAK8hB,KACS,IAA7Bra,EAAKua,WAAWhiB,KAAKqyC,IAAM,GAC3B,CACAryC,KAAKqyC,KAAO,EACZmB,GAAS,EACT,MAGCA,EAKMxzC,KAAK2yC,WACd3yC,KAAK2yC,UACH3wC,EAAA6nC,YAAYgC,MACZpkC,EAAK8I,UAAU8iC,EAAiBrzC,KAAKqyC,KACrCryC,KAAKqH,MAAMgsC,EAAiBrzC,KAAKqyC,MARnCryC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACfzzC,KAAKqH,MAAMrH,KAAKqyC,KAAM,MAS1B,MAEF,GAA6B,IAAzB5qC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMqS,aAGjB,OAAOrS,EAAMkR,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOxwC,KAAK0zC,cACRpU,EAAMqU,eACNrU,EAAM6T,aAEZ,QAEE,QADEnzC,KAAKqyC,IACA/S,EAAMsU,MAEf,QAEE,QADE5zC,KAAKqyC,IACA/S,EAAMuU,UAEf,QAEE,KADE7zC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IAELS,EAAiB,GACjB9yC,KAAKqyC,IAAMryC,KAAK8hB,KACS,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IACA/S,EAAMuS,0BAERvS,EAAMsR,kBAEf,GAA6B,IAAzBnpC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMwQ,gBAGjB,OAAOxQ,EAAMsQ,SAEf,QAEE,KADE5vC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IAELS,EAAiB,GACjB9yC,KAAKqyC,IAAMryC,KAAK8hB,KACS,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IACA/S,EAAM4Q,sBAER5Q,EAAM0Q,cAEf,GAA6B,IAAzBvoC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMwU,mBAGjB,OAAOxU,EAAMgS,OAEf,QAEE,KADEtxC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAA8B,CAErD,KADEryC,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IAELS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,KACb,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IACA/S,EAAMyS,4CAERzS,EAAMwR,oCAEf,GAA6B,IAAzBrpC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMwS,+BAGjB,OAAOxS,EAAMuR,wBAEf,GAA6B,IAAzBppC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAMyQ,mBAGjB,OAAOzQ,EAAMuQ,YAEf,QAEE,QADE7vC,KAAKqyC,IACA/S,EAAMyU,SAEf,QAEE,QADE/zC,KAAKqyC,IACA/S,EAAM0U,YAEf,QAEE,QADEh0C,KAAKqyC,IACA/S,EAAM2U,aAEf,QAEE,QADEj0C,KAAKqyC,IAELS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,KACb,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IACA/S,EAAM4S,cAER5S,EAAM2R,MAEf,SAEE,QADEjxC,KAAKqyC,IACA/S,EAAM4U,UAEf,SAEE,KADEl0C,KAAKqyC,IACHS,EAAiB,GAAK9yC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CAC7C,GAA6B,KAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAM+R,QAEf,GAA6B,IAAzB5pC,EAAKua,WAAWhiB,KAAKqyC,KAEvB,QADEryC,KAAKqyC,IACA/S,EAAM2S,WAGjB,OAAO3S,EAAM0R,IAEf,SAEE,QADEhxC,KAAKqyC,IACA/S,EAAM6U,WAEf,SAEE,QADEn0C,KAAKqyC,IACA/S,EAAM6R,MAEf,QAEE,QADEnxC,KAAKqyC,IACA/S,EAAM8U,GAEf,QACE,GAAIn0B,EAAAo0B,kBAAkB3zC,GAAI,CACxB,GAAIuf,EAAAq0B,mBAAmB5zC,GAAI,CAEzB,IADA,IAAI6zC,EAAYv0C,KAAKqyC,MAEjBryC,KAAKqyC,IAAMryC,KAAK8hB,KAClB7B,EAAAu0B,iBAAiB9zC,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,OAE1C,IAAKpyB,EAAAq0B,mBAAmB5zC,GAEtB,OADAV,KAAKqyC,IAAMkC,EACJjV,EAAMtpB,WAGjB,IACIy+B,EAAehH,EADDhmC,EAAK8I,UAAUgkC,EAAWv0C,KAAKqyC,MAEjD,KACEoC,GAAgBnV,EAAMiQ,SACpBqD,GAAoBpD,EAAsBiF,IAE5C,OAAOA,EAETz0C,KAAKqyC,IAAMkC,EAEb,OAAOjV,EAAMtpB,WACR,GAAIiK,EAAAy0B,aAAah0C,GAAI,GACxBV,KAAKqyC,IACP,MAOF,OALAryC,KAAKiH,MACHnF,EAAAoF,eAAeytC,kBACf30C,KAAKqH,MAAMrH,KAAKqyC,IAAKryC,KAAKqyC,IAAM,MAEhCryC,KAAKqyC,IACA/S,EAAMiQ,SAInB,OAAOjQ,EAAMsV,WAGftC,EAAA5wC,UAAAmzC,KAAA,SACEC,EACAlC,EACAmC,QAFA,IAAAD,OAAA,QACA,IAAAlC,OAAA,QACA,IAAAmC,MAAyB/wC,IAAI02B,WAE7B,IAAIjzB,EAAOzH,KAAK4J,OAAOnC,KACvB,GAAIzH,KAAKwyC,UAAY,EAAG,CACtB,IAAI+B,EAAYv0C,KAAKqyC,IACjB2C,EAAch1C,KAAKyvC,MACnBwF,EAAiBj1C,KAAKuyC,SAG1B,GAFAvyC,KAAKwyC,UAAYxyC,KAAK6yC,WAAWD,EAAkBmC,GACnD/0C,KAAKyyC,aAAezyC,KAAKuyC,SACrBuC,EAEF,IADA90C,KAAK0yC,oBAAqB,IACjB1yC,KAAKuyC,SAAWgC,GACvB,GAAIt0B,EAAA8B,YAAYta,EAAKua,WAAWhiB,KAAKuyC,WAAY,CAC/CvyC,KAAK0yC,oBAAqB,EAC1B,MAIN1yC,KAAKqyC,IAAMkC,EACXv0C,KAAKyvC,MAAQuF,EACbh1C,KAAKuyC,SAAW0C,EAElB,OAAOj1C,KAAKwyC,WAGdF,EAAA5wC,UAAAwzC,KAAA,SAAKzF,GACH,IAAI8E,EAAYv0C,KAAKqyC,IACjB2C,EAAch1C,KAAKyvC,MACnBwF,EAAiBj1C,KAAKuyC,SACtBwC,EAAoB/wC,IAAI02B,UAC5B,OAAQ+U,GACN,KAAKnQ,EAAMuQ,YACTkF,EAAoB,EAKxB,OADA/0C,KAAKyvC,MAAQzvC,KAAK6yC,WAAWpD,GAASnQ,EAAMtpB,WAAY++B,GACpD/0C,KAAKyvC,OAASA,GAChBzvC,KAAKwyC,WAAa,GACX,IAEPxyC,KAAKqyC,IAAMkC,EACXv0C,KAAKyvC,MAAQuF,EACbh1C,KAAKuyC,SAAW0C,GACT,IAIX3C,EAAA5wC,UAAAyzC,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAM/C,IAAMryC,KAAKqyC,IACjB+C,EAAM3F,MAAQzvC,KAAKyvC,MACnB2F,EAAM7C,SAAWvyC,KAAKuyC,SACf6C,GAGT9C,EAAA5wC,UAAA6zC,QAAA,SAAQH,GACNC,EAAgBD,GAGlB9C,EAAA5wC,UAAA8zC,MAAA,SAAMJ,GACJp1C,KAAKqyC,IAAM+C,EAAM/C,IACjBryC,KAAKyvC,MAAQ2F,EAAM3F,MACnBzvC,KAAKuyC,SAAW6C,EAAM7C,SACtBvyC,KAAKwyC,WAAa,EAClB6C,EAAgBD,GAGlB9C,EAAA5wC,UAAA2F,MAAA,SAAMwa,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQ7hB,KAAKuyC,SACbzwB,EAAM9hB,KAAKqyC,KACFvwB,EAAM,IACfA,EAAMD,GAED,IAAInX,EAAM1K,KAAK4J,OAAQiY,EAAOC,IAGvCwwB,EAAA5wC,UAAA+zC,eAAA,WAGE,IAFA,IAAIhuC,EAAOzH,KAAK4J,OAAOnC,KACnBoa,EAAQ7hB,KAAKqyC,MAEbryC,KAAKqyC,IAAMryC,KAAK8hB,KAClB7B,EAAAu0B,iBAAiB/sC,EAAKua,WAAWhiB,KAAKqyC,QAExC,OAAO5qC,EAAK8I,UAAUsR,EAAO7hB,KAAKqyC,MAGpCC,EAAA5wC,UAAAs4B,WAAA,WAKE,IAJA,IAAIvyB,EAAOzH,KAAK4J,OAAOnC,KACnBiuC,EAAQjuC,EAAKua,WAAWhiB,KAAKqyC,OAC7BxwB,EAAQ7hB,KAAKqyC,IACbjkB,EAAS,KACA,CACX,GAAIpuB,KAAKqyC,KAAOryC,KAAK8hB,IAAK,CACxBsM,GAAU3mB,EAAK8I,UAAUsR,EAAO7hB,KAAKqyC,KACrCryC,KAAKiH,MACHnF,EAAAoF,eAAeyuC,4BACf31C,KAAKqH,MAAMwa,EAAQ,EAAG7hB,KAAK8hB,MAE7B,MAEF,IAAIphB,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,KAC7B,GAAI3xC,GAAKg1C,EAAO,CACdtnB,GAAU3mB,EAAK8I,UAAUsR,EAAO7hB,KAAKqyC,OACrC,MAEF,GAAK,IAAD3xC,EAAJ,CAMA,GAAIuf,EAAA8B,YAAYrhB,GAAI,CAClB0tB,GAAU3mB,EAAK8I,UAAUsR,EAAO7hB,KAAKqyC,KACrCryC,KAAKiH,MACHnF,EAAAoF,eAAeyuC,4BACf31C,KAAKqH,MAAMwa,EAAQ,EAAG7hB,KAAKqyC,MAE7B,QAEAryC,KAAKqyC,SAbLjkB,GAAU3mB,EAAK8I,UAAUsR,EAAO7hB,KAAKqyC,KACrCjkB,GAAUpuB,KAAK41C,qBACf/zB,EAAQ7hB,KAAKqyC,IAajB,OAAOjkB,GAGTkkB,EAAA5wC,UAAAk0C,mBAAA,WACE,KAAM51C,KAAKqyC,KAAOryC,KAAK8hB,IAKrB,OAJA9hB,KAAKiH,MACHnF,EAAAoF,eAAe2uC,uBACf71C,KAAKqH,MAAMrH,KAAK8hB,MAEX,GAGT,IAAIra,EAAOzH,KAAK4J,OAAOnC,KACnB/G,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,OAC7B,OAAQ3xC,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAKqyC,IAAMryC,KAAK8hB,KACS,KAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IACAryC,KAAK81C,6BAEP91C,KAAK+1C,oBAEd,QAEI/1C,KAAKqyC,IAAMryC,KAAK8hB,KACS,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,QAEnBryC,KAAKqyC,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOnT,OAAO8W,aAAat1C,KAIxC4xC,EAAA5wC,UAAAu0C,kBAAA,WAIE,IAHA,IAAIxuC,EAAOzH,KAAK4J,OAAOnC,KACnBoa,EAAQ7hB,KAAKqyC,IACb6D,GAAU,IACD,CACX,GAAIl2C,KAAKqyC,KAAOryC,KAAK8hB,IAAK,CACxB9hB,KAAKiH,MACHnF,EAAAoF,eAAeivC,wCACfn2C,KAAKqH,MAAMwa,EAAO7hB,KAAK8hB,MAEzB,MAEF,GAA6B,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAAzB,CAKA,IAAI3xC,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,KAC7B,GAAK,IAAD3xC,IAAwBw1C,EAAS,MACrC,GAAIj2B,EAAA8B,YAAYrhB,GAAI,CAClBV,KAAKiH,MACHnF,EAAAoF,eAAeivC,wCACfn2C,KAAKqH,MAAMwa,EAAO7hB,KAAKqyC,MAEzB,QAEAryC,KAAKqyC,IACP6D,GAAU,QAdNl2C,KAAKqyC,IACP6D,GAAU,EAed,OAAOzuC,EAAK8I,UAAUsR,EAAO7hB,KAAKqyC,MAGpCC,EAAA5wC,UAAA00C,gBAAA,WAIE,IAHA,IAAI3uC,EAAOzH,KAAK4J,OAAOnC,KACnBoa,EAAQ7hB,KAAKqyC,IACb17B,EAAQ,EACL3W,KAAKqyC,IAAMryC,KAAK8hB,KAAK,CAC1B,IAAIphB,EAAS+G,EAAKua,WAAWhiB,KAAKqyC,KAClC,IAAKpyB,EAAAu0B,iBAAiB9zC,GAAI,MAI1B,SAHEV,KAAKqyC,IAGC3xC,GACN,SACEiW,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACF3W,KAAKiH,MACHnF,EAAAoF,eAAemvC,iCACfr2C,KAAKqH,MAAMwa,EAAO7hB,KAAKqyC,MAGpB5qC,EAAK8I,UAAUsR,EAAO7hB,KAAKqyC,MAGpCC,EAAA5wC,UAAAgyC,YAAA,WACE,IAAIjsC,EAAOzH,KAAK4J,OAAOnC,KACvB,GAA6B,IAAzBA,EAAKua,WAAWhiB,KAAKqyC,MAAuBryC,KAAKqyC,IAAM,EAAIryC,KAAK8hB,IAClE,OAAQra,EAAKua,WAAWhiB,KAAKqyC,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SAAiB,OAAO,EAI5B,IADA,IAAIA,EAAMryC,KAAKqyC,IACRA,EAAMryC,KAAK8hB,KAAK,CACrB,IAAIphB,EAAI+G,EAAKua,WAAWqwB,GACxB,GAAK,IAAD3xC,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,EAET,GAAIA,EAAC,IAAkBA,EAAC,GAAgB,MACxC2xC,IAEF,OAAO,GAGTC,EAAA5wC,UAAA40C,YAAA,WACE,IAAI7uC,EAAOzH,KAAK4J,OAAOnC,KACvB,GAA6B,IAAzBA,EAAKua,WAAWhiB,KAAKqyC,MAAuBryC,KAAKqyC,IAAM,EAAIryC,KAAK8hB,IAAK,CACvE,OAAQra,EAAKua,WAAWhiB,KAAKqyC,IAAM,IACjC,QACA,SAEE,OADAryC,KAAKqyC,KAAO,EACLryC,KAAKu2C,iBAEd,QACA,QAEE,OADAv2C,KAAKqyC,KAAO,EACLryC,KAAKw2C,oBAEd,QACA,SAEE,OADAx2C,KAAKqyC,KAAO,EACLryC,KAAKy2C,mBAGhB,GAAIx2B,EAAAy2B,aAAajvC,EAAKua,WAAWhiB,KAAKqyC,IAAM,IAAK,CAC/C,IAAIxwB,EAAQ7hB,KAAKqyC,MACfryC,KAAKqyC,IACP,IAAIhxC,EAAQrB,KAAKy2C,mBAKjB,OAJAz2C,KAAKiH,MACHnF,EAAAoF,eAAeyvC,8CACf32C,KAAKqH,MAAMwa,EAAO7hB,KAAKqyC,MAElBhxC,GAGX,OAAOrB,KAAK42C,sBAGdtE,EAAA5wC,UAAA60C,eAAA,WAKE,IAJA,IAAI9uC,EAAOzH,KAAK4J,OAAOnC,KACnBoa,EAAQ7hB,KAAKqyC,IACbhxC,EAAQqW,QAAQ,EAAG,GACnBm/B,EAASn/B,QAAQ,GAAI,GAClB1X,KAAKqyC,IAAMryC,KAAK8hB,KAAK,CAC1B,IAAIphB,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,KAC7B,GAAI3xC,GAAC,IAAmBA,GAAC,GAEvBW,EAAQy1C,QACNC,QAAQ11C,EAAOw1C,GACfn/B,QAAQhX,EAAC,GAAgB,SAErB,GAAIA,GAAC,IAAkBA,GAAC,GAE9BW,EAAQy1C,QACNC,QAAQ11C,EAAOw1C,GACfn/B,QAAQ,GAAKhX,EAAC,GAAe,QAE1B,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,MALAW,EAAQy1C,QACNC,QAAQ11C,EAAOw1C,GACfn/B,QAAQ,GAAKhX,EAAC,GAAe,MAK/BV,KAAKqyC,IAQT,OANIryC,KAAKqyC,KAAOxwB,GACd7hB,KAAKiH,MACHnF,EAAAoF,eAAe8vC,2BACfh3C,KAAKqH,MAAMwa,IAGRxgB,GAGTixC,EAAA5wC,UAAAk1C,mBAAA,WAKE,IAJA,IAAInvC,EAAOzH,KAAK4J,OAAOnC,KACnBoa,EAAQ7hB,KAAKqyC,IACbhxC,EAAQqW,QAAQ,EAAG,GACnBu/B,EAASv/B,QAAQ,GAAI,GAClB1X,KAAKqyC,IAAMryC,KAAK8hB,KAAK,CAC1B,IAAIphB,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,KAC7B,KAAI3xC,GAAC,IAAmBA,GAAC,IAOvB,MALAW,EAAQy1C,QACNC,QAAQ11C,EAAO41C,GACfv/B,QAAQhX,EAAC,GAAgB,MAK3BV,KAAKqyC,IAQT,OANIryC,KAAKqyC,KAAOxwB,GACd7hB,KAAKiH,MACHnF,EAAAoF,eAAegwC,eACfl3C,KAAKqH,MAAMwa,IAGRxgB,GAGTixC,EAAA5wC,UAAA+0C,iBAAA,WAKE,IAJA,IAAIhvC,EAAOzH,KAAK4J,OAAOnC,KACnBoa,EAAQ7hB,KAAKqyC,IACbhxC,EAAQqW,QAAQ,EAAG,GACnBy/B,EAAQz/B,QAAQ,EAAG,GAChB1X,KAAKqyC,IAAMryC,KAAK8hB,KAAK,CAC1B,IAAIphB,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,KAC7B,KAAI3xC,GAAC,IAAmBA,GAAC,IAOvB,MALAW,EAAQy1C,QACNC,QAAQ11C,EAAO81C,GACfz/B,QAAQhX,EAAC,GAAgB,MAK3BV,KAAKqyC,IAQT,OANIryC,KAAKqyC,KAAOxwB,GACd7hB,KAAKiH,MACHnF,EAAAoF,eAAekwC,qBACfp3C,KAAKqH,MAAMwa,IAGRxgB,GAGTixC,EAAA5wC,UAAA80C,kBAAA,WAME,IALA,IAAI/uC,EAAOzH,KAAK4J,OAAOnC,KACnBoa,EAAQ7hB,KAAKqyC,IACbhxC,EAAQqW,QAAQ,EAAG,GACnB2/B,EAAQ3/B,QAAQ,EAAG,GACnB4/B,EAAQ5/B,QAAQ,EAAG,GAChB1X,KAAKqyC,IAAMryC,KAAK8hB,KAAK,CAC1B,IAAIphB,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,KAC7B,GAAK,IAAD3xC,EAEFW,EAAQ01C,QACN11C,EACAg2C,OAEG,IAAK,IAAD32C,EAOT,MALAW,EAAQy1C,QACNC,QAAQ11C,EAAOg2C,GACfC,KAKFt3C,KAAKqyC,IAQT,OANIryC,KAAKqyC,KAAOxwB,GACd7hB,KAAKiH,MACHnF,EAAAoF,eAAeqwC,sBACfv3C,KAAKqH,MAAMwa,IAGRxgB,GAGTixC,EAAA5wC,UAAA81C,UAAA,WAWE,OAAOx3C,KAAKy3C,oBAGdnF,EAAA5wC,UAAA+1C,iBAAA,WAGE,IAFA,IAAI51B,EAAQ7hB,KAAKqyC,IACb5qC,EAAOzH,KAAK4J,OAAOnC,KAChBzH,KAAKqyC,IAAMryC,KAAK8hB,KAAO7B,EAAAizB,eAAezrC,EAAKua,WAAWhiB,KAAKqyC,SAC9DryC,KAAKqyC,IAET,GAAIryC,KAAKqyC,IAAMryC,KAAK8hB,KAAgC,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,KAE9C,MADEryC,KAAKqyC,IACAryC,KAAKqyC,IAAMryC,KAAK8hB,KAAO7B,EAAAizB,eAAezrC,EAAKua,WAAWhiB,KAAKqyC,SAC9DryC,KAAKqyC,IAGX,GAAIryC,KAAKqyC,IAAMryC,KAAK8hB,IAAK,CACvB,IAAIphB,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,KAC7B,GAAK,IAAD3xC,GAAoB,KAADA,EAUrB,MARIV,KAAKqyC,IAAMryC,KAAK8hB,MACS,IAAzBra,EAAKua,WAAWhiB,KAAKqyC,MACI,IAAzB5qC,EAAKua,WAAWhiB,KAAKqyC,OAEvBpyB,EAAAizB,eAAezrC,EAAKua,WAAWhiB,KAAKqyC,IAAM,OAExCryC,KAAKqyC,IAEFryC,KAAKqyC,IAAMryC,KAAK8hB,KAAO7B,EAAAizB,eAAezrC,EAAKua,WAAWhiB,KAAKqyC,SAC9DryC,KAAKqyC,IAIb,OAAOqF,WAAWjwC,EAAK8I,UAAUsR,EAAO7hB,KAAKqyC,OAG/CC,EAAA5wC,UAAAi2C,aAAA,WACE,MAAM,IAAI/rC,MAAM,oBAGlB0mC,EAAA5wC,UAAAq0C,kBAAA,WAIE,IAHA,IAAI6B,EAAS,EACTv2C,EAAQ,EACRoG,EAAOzH,KAAK4J,OAAOnC,KAChBzH,KAAKqyC,IAAMryC,KAAK8hB,KAAK,CAC1B,IAAIphB,EAAI+G,EAAKua,WAAWhiB,KAAKqyC,OAC7B,GAAI3xC,GAAC,IAAmBA,GAAC,GACvBW,EAAgB,GAARA,EAAaX,EAAC,QACjB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BW,EAAgB,GAARA,EAAa,GAAKX,EAAC,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKiH,MACHnF,EAAAoF,eAAe8vC,2BACfh3C,KAAKqH,MAAMrH,KAAKqyC,IAAM,EAAGryC,KAAKqyC,MAEzB,GANPhxC,EAAgB,GAARA,EAAa,GAAKX,EAAC,GAQ7B,GAAgB,KAAVk3C,EAAa,MAErB,OAAIA,GACF53C,KAAKiH,MACHnF,EAAAoF,eAAe2uC,uBACf71C,KAAKqH,MAAMrH,KAAKqyC,MAEX,IAEFnT,OAAO8W,aAAa30C,IAGrBixC,EAAA5wC,UAAAo0C,0BAAR,WACE,IAAIj0B,EAAQ7hB,KAAKqyC,IACbhxC,EAAQrB,KAAKu2C,iBACbsB,EAAUxgB,QAAQh2B,GAClBy2C,GAAU,EAEdpvC,QAAQ4uB,SAASj2B,IACbw2C,EAAU,UACZ73C,KAAKiH,MACHnF,EAAAoF,eAAe6wC,4EACf/3C,KAAKqH,MAAMwa,EAAO7hB,KAAKqyC,MAEzByF,GAAU,GAGZ,IAAIrwC,EAAOzH,KAAK4J,OAAOnC,KAiBvB,OAhBIzH,KAAKqyC,KAAOryC,KAAK8hB,KACnB9hB,KAAKiH,MACHnF,EAAAoF,eAAe2uC,uBACf71C,KAAKqH,MAAMwa,EAAO7hB,KAAK8hB,MAEzBg2B,GAAU,GACwB,KAAzBrwC,EAAKua,WAAWhiB,KAAKqyC,OAC5BryC,KAAKqyC,KAEPryC,KAAKiH,MACHnF,EAAAoF,eAAe8wC,qCACfh4C,KAAKqH,MAAMwa,EAAO7hB,KAAKqyC,MAEzByF,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACb3Y,OAAO8W,aAAa6B,GACpB3Y,OAAO8W,aAC2B,QAA/B6B,EAAU,OAAS,KAAO,IAC1BA,EAAU,OAAS,KAAY,QAIxCvF,EAAA5wC,UAAAu2C,OAAA,aAEF3F,EA3/BA,CAA+BxwC,EAAA0U,mBAAlB9W,EAAA4yC,YA8/Bb,IAAAgD,EAAA,WAOA,OAPA,gBAAa51C,EAAA41C,QAUb,IAAID,EAA8B,oFCr3ClC,IAAApzC,EAAA9B,EAAA,IAOA,SAAkB+3C,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAxCF,CAAkBx4C,EAAAw4C,WAAAx4C,EAAAw4C,cA4ClB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,gBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBArBF,CAAkBz4C,EAAAy4C,YAAAz4C,EAAAy4C,eAyBlB,IAAAt0C,EAAA,WAoBE,SAAAA,EAAYwB,EAAgBsR,EAAkByhC,GAL9Cp4C,KAAAq4C,aAA4B,KAM1Br4C,KAAKqF,KAAOA,EACZrF,KAAK2W,MAAQA,EACb3W,KAAKo4C,KAAOA,EACZp4C,KAAKqe,SAAgBi6B,KAAeF,EAAO,GAC3Cp4C,KAAK2U,eAAiB,KACtB3U,KAAKoW,mBAAqB,KAC1BpW,KAAKu4C,gBAAkBv4C,KAmU3B,OA/TE6D,EAAAnC,UAAA82C,yBAAA,SAAyBlkC,GACvB,OAAOA,EAAW8jC,KAAOp4C,KAAKo4C,MAIhCv0C,EAAAnC,UAAA+2C,wBAAA,SAAwBnkC,GACtB,OAAO,IAAQA,EAAW8jC,KAAOp4C,KAAKo4C,MAIxCv0C,EAAAnC,UAAA+H,GAAA,SAAGkN,GAA0B,OAAQ3W,KAAK2W,MAAQA,IAAUA,GAE5D9S,EAAAnC,UAAA6J,MAAA,SAAMoL,GAA0B,OAA+B,IAAvB3W,KAAK2W,MAAQA,IAGrD9S,EAAAnC,UAAAgd,QAAA,SAAQjJ,GACN/M,OAAgB,GAAT1I,KAAKqF,OAA2BrF,KAAK2U,gBAC5C,IAAIoH,EAAM,IAAIlY,EAAK7D,KAAKqF,MAAmB,IAAbrF,KAAK2W,MAAwB,IAAwB3W,KAAKo4C,MAExF,OADAr8B,EAAIpH,eAAiBc,EACdsG,GAITlY,EAAAnC,UAAA8Q,WAAA,SAAWH,GACT3J,OAAgB,GAAT1I,KAAKqF,OAAyBrF,KAAKoW,oBAC1C,IAAI2F,EAAM,IAAIlY,EAAK7D,KAAKqF,MAAmB,IAAbrF,KAAK2W,MAAwB,IAAwB3W,KAAKo4C,MAExF,OADAr8B,EAAI3F,mBAAqB/D,EAClB0J,GAITlY,EAAAnC,UAAAg3C,WAAA,WAQE,OAPAhwC,OAAO1I,KAAKyJ,GAAE,MACTzJ,KAAKq4C,eACR3vC,QAAQ1I,KAAKyJ,GAAE,MACfzJ,KAAKq4C,aAAe,IAAIx0C,EAAK7D,KAAKqF,KAAgB,IAAVrF,KAAK2W,MAA4B3W,KAAKo4C,MAC9Ep4C,KAAKq4C,aAAa1jC,eAAiB3U,KAAK2U,eACxC3U,KAAKq4C,aAAajiC,mBAAqBpW,KAAKoW,oBAEvCpW,KAAKq4C,cAIdx0C,EAAAnC,UAAAmd,eAAA,SAAetK,EAAcokC,GAC3B,IAAIC,EACAC,EACAz5B,EACA05B,EACJ,QAL2B,IAAAH,OAAA,GAKvB34C,KAAKyJ,GAAE,MACT,GAAI8K,EAAO9K,GAAE,KACX,GAAImvC,EAAe54C,KAAK2U,gBACtB,GAAIkkC,EAActkC,EAAOI,eACvB,OAAOikC,EAAa/5B,eAAeg6B,QAEhC,IAAIz5B,EAAkBpf,KAAKoW,sBAC5B0iC,EAAiBvkC,EAAO6B,oBAC1B,OAAOgJ,EAAgBP,eAAei6B,QAIvC,IAAKvkC,EAAO9K,GAAE,KACnB,GAAIzJ,KAAKyJ,GAAE,GACT,GAAI8K,EAAO9K,GAAE,IACX,IAAKkvC,GAAyB34C,KAAKyJ,GAAE,IAAsB8K,EAAO9K,GAAE,GAClE,OAAOzJ,KAAKo4C,MAAQ7jC,EAAO6jC,SAExB,IAAe,IAAX7jC,EAAOlP,KAChB,OAAOrF,KAAKo4C,MAAQ,GACf,GAAe,IAAX7jC,EAAOlP,KAChB,OAAOrF,KAAKo4C,MAAQ,QAEjB,GAAIp4C,KAAKyJ,GAAE,IACZ8K,EAAO9K,GAAE,GACX,OAAOzJ,KAAKo4C,MAAQ7jC,EAAO6jC,KAIjC,OAAO,GAIFv0C,EAAAk1C,iBAAP,SAAwBppB,EAAYC,EAAa+oB,GAC/C,OAAI/oB,EAAM/Q,eAAe8Q,EAAMgpB,GACtBhpB,EACEA,EAAK9Q,eAAe+Q,EAAO+oB,GAC7B/oB,EAEF,MAIT/rB,EAAAnC,UAAA4M,SAAA,SAAS0qC,GACP,YADO,IAAAA,OAAA,GACCh5C,KAAKqF,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OACE,IAAI2wB,EAAeh2B,KAAKoW,mBACxB,OAAO4iC,IAAahjB,EAChB,MACAA,EAAa1nB,UAAS,GAE5B,OAAmB,MAAO,MAC1B,OACE,IAAImH,EAAYzV,KAAK2U,eACrB,OAAOqkC,IAAavjC,EAChB,QACAA,EAAUnH,WAEhB,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAEE,OADA5F,QAAO,GACA,KAQb7E,EAAAnC,UAAA+Z,aAAA,WACE,OAAQzb,KAAKqF,MACX,QAAS,OAAOpD,EAAAyZ,WAAWC,IAC3B,OACA,OAAmB,OAAO1Z,EAAAyZ,WAAWE,IACrC,OACA,OAAqB,OAAoB,IAAb5b,KAAKo4C,KAAan2C,EAAAyZ,WAAWE,IAAM3Z,EAAAyZ,WAAWC,IAC1E,QAAmB,OAAO1Z,EAAAyZ,WAAWG,IACrC,QAAmB,OAAO5Z,EAAAyZ,WAAWI,IACrC,QAAqB,OAAO7Z,EAAAyZ,WAAW4W,OAK3CzuB,EAAAnC,UAAAu3C,aAAA,SAAat5C,GACX,OAAQK,KAAKqF,MACX,QAAoBqD,QAAO,GAC3B,QAAS,OAAO/I,EAAOgvB,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAb3uB,KAAKo4C,KAAY,OAAOz4C,EAAOgvB,UAAU,GAClE,OACA,OAAmB,OAAOhvB,EAAOmvB,UAAU,GAC3C,QAAmB,OAAOnvB,EAAOuvB,UAAU,GAC3C,QAAmB,OAAOvvB,EAAOyvB,UAAU,KAK/CvrB,EAAAnC,UAAAw3C,YAAA,SAAYv5C,GACV,OAAQK,KAAKqF,MACX,QAAoBqD,QAAO,GAC3B,QAAS,OAAO/I,EAAOgvB,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAb3uB,KAAKo4C,KAAY,OAAOz4C,EAAOgvB,UAAU,GAClE,OACA,OAAmB,OAAOhvB,EAAOmvB,UAAU,GAC3C,QAAmB,OAAOnvB,EAAOuvB,UAAU,GAC3C,QAAmB,OAAOvvB,EAAOyvB,UAAU,KAK/CvrB,EAAAnC,UAAAy3C,eAAA,SAAex5C,GACb,OAAQK,KAAKqF,MACX,QAAoBqD,QAAO,GAC3B,QAAS,OAAO/I,EAAOgvB,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAb3uB,KAAKo4C,KAAY,OAAOz4C,EAAOgvB,WAAW,GACnE,OACA,OAAmB,OAAOhvB,EAAOmvB,WAAW,GAAI,GAChD,QAAmB,OAAOnvB,EAAOuvB,WAAW,GAC5C,QAAmB,OAAOvvB,EAAOyvB,WAAW,KAKhDvrB,EAAAnC,UAAAqb,kBAAA,WACE,OAAQ/c,KAAKqF,MACX,QAAS,MAAO,IAChB,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAbrF,KAAKo4C,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,MAOfv0C,EAAAC,GAAY,IAAID,EAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,IAAIF,EAAI,EAClC,IAGkB,IAIJA,EAAAG,IAAY,IAAIH,EAAI,EAClC,IAEkB,IAIJA,EAAAI,IAAY,IAAIJ,EAAI,EAClC,IAGkB,IAIJA,EAAAu1C,QAAgB,IAAIv1C,EAAI,EACtC,IAGkB,IAIJA,EAAAw1C,QAAgB,IAAIx1C,EAAI,EACtC,IAIkB,IAIJA,EAAAM,GAAW,IAAIN,EAAI,EACjC,IAGmB,GAILA,EAAAO,IAAY,IAAIP,EAAI,EAClC,IAGkB,IAIJA,EAAAQ,IAAY,IAAIR,EAAI,EAClC,IAEkB,IAIJA,EAAAS,IAAY,IAAIT,EAAI,EAClC,IAGkB,IAIJA,EAAAy1C,QAAgB,IAAIz1C,EAAI,EACtC,IAGkB,IAIJA,EAAA01C,QAAgB,IAAI11C,EAAI,EACtC,IAIkB,IAIJA,EAAAW,KAAa,IAAIX,EAAI,GACnC,IAGmB,GAILA,EAAAY,IAAY,IAAIZ,EAAI,GAClC,IAEkB,IAIJA,EAAAa,IAAY,IAAIb,EAAI,GAClC,IAGkB,IAIJA,EAAAc,KAAa,IAAId,EAAI,KAAgC,GACvEA,EA9VA,GAAanE,EAAAmE,OAiWbnE,EAAA85C,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMx0C,OACjB8W,EAAM,IAAIjX,MAAkB40C,GACvBr5C,EAAI,EAAGA,EAAIq5C,IAAYr5C,EAC9B0b,EAAI1b,GAAKo5C,EAAMp5C,GAAGob,eAEpB,OAAOM,GAITrc,EAAAuT,cAAA,SAA8BwmC,GAC5B,IAAIC,EAAWD,EAAMx0C,OACrB,IAAKy0C,EAAU,MAAO,GAEtB,IADA,IAAIz3B,EAAK,IAAInd,MAAc40C,GAClBr5C,EAAI,EAAGA,EAAIq5C,IAAYr5C,EAC9B4hB,EAAG5hB,GAAKo5C,EAAMp5C,GAAGiO,WAEnB,OAAO2T,EAAGtX,KAAK,OAIjB,IAAA2H,EAAA,WAoBE,SAAAA,EACEd,EACAW,EACAd,QAFA,IAAAG,MAAA,WACA,IAAAW,MAAA,WACA,IAAAd,MAAA,MARFrR,KAAAsW,qBAA8C,KAU5CtW,KAAKwR,eAAiBA,MACtBxR,KAAK0R,eAAiB,KACtB1R,KAAK2R,mBAAqB,EAC1B3R,KAAKmS,WAAaA,GAA0BtO,EAAKc,KACjD3E,KAAKqR,SAAWA,EAChBrR,KAAK4R,SAAU,EACf5R,KAAKgM,KAAOnI,EAAKQ,IAAImO,WAAWxS,MA2GpC,OAvGEsS,EAAA5Q,UAAAwZ,iBAAA,SAAiBhD,GACf,IAAIxG,EAAiB1R,KAAK0R,eAC1B,OAAOA,GAAkBA,EAAezM,OAASiT,EAC7CxG,EAAewG,GACfyhC,EAAwBzhC,IAI9B5F,EAAA5Q,UAAAmd,eAAA,SAAetK,GAIb,IAAIqlC,EAAe55C,KAAKqR,SACpBwoC,EAAiBtlC,EAAOlD,SAC5B,GAAIuoC,GACF,IAAMC,IAAkBD,EAAa/6B,eAAeg7B,GAClD,OAAO,OAEJ,GAAIA,EACT,OAAO,EAIT,GAAI75C,KAAK4R,SAAW2C,EAAO3C,QACzB,OAAO,EAIT,IAAIkoC,EAAqB95C,KAAKwR,eAC1BuoC,EAAuBxlC,EAAO/C,eAC9BC,EAAgBqoC,EAAmB70C,OACvC,GAAIwM,GAAiBsoC,EAAqB90C,OACxC,OAAO,EAET,IAAK,IAAI5E,EAAI,EAAGA,EAAIoR,IAAiBpR,EAAG,CACtC,IAAI25C,EAAoBF,EAAmBz5C,GACvC45C,EAAsBF,EAAqB15C,GAC/C,IAAK25C,EAAkBn7B,eAAeo7B,GACpC,OAAO,EAKX,IAAIC,EAAiBl6C,KAAKmS,WACtBgoC,EAAmB5lC,EAAOpC,WAC9B,OAAO+nC,GAAkBC,GAAoBD,EAAer7B,eAAes7B,IAI7E7nC,EAAA5Q,UAAAqb,kBAAA,WACE,IAAIkF,KACA5Q,EAAWrR,KAAKqR,SAChBA,GACF4Q,EAAGpX,KAAKwG,EAAS0L,qBAGnB,IADA,IAAIvL,EAAiBxR,KAAKwR,eACjBnR,EAAI,EAAG2E,EAAIwM,EAAevM,OAAQ5E,EAAI2E,IAAK3E,EAClD4hB,EAAGpX,KAAK2G,EAAenR,GAAG0c,qBAG5B,OADAkF,EAAGpX,KAAK7K,KAAKmS,WAAW4K,qBACjBkF,EAAGtX,KAAK,KAIjB2H,EAAA5Q,UAAA4M,SAAA,SAAS8rC,QAAA,IAAAA,OAAA,GACP,IAAIn4B,EAAK,IAAInd,MACbmd,EAAGpX,KAAK,KACR,IAAIqN,EAAQ,EACR7G,EAAWrR,KAAKqR,SAChBA,GACE+oC,IACFn4B,EAAGpX,KAAK,UACRoX,EAAGpX,KAAKwG,EAAS/C,YACjB4J,EAAQ,GAGZ,IAAIkoB,EAAapgC,KAAKwR,eAClBC,EAAgB2uB,EAAWn7B,OAC/B,GAAIwM,EAKF,IAJA,IAAIkiB,EAAQ3zB,KAAK0R,eACbmiB,EAAWF,EAAQA,EAAM1uB,OAAS,EAClCo1C,EAAgBr6C,KAAK2R,mBACrB2oC,EAAYt6C,KAAK4R,QAAUH,EAAgB,GAAK,EAC3CpR,EAAI,EAAGA,EAAIoR,IAAiBpR,IAAK6X,EACpCA,GAAO+J,EAAGpX,KAAK,MACfxK,GAAKi6C,GAAWr4B,EAAGpX,KAAK,OACxBxK,EAAIwzB,EACN5R,EAAGpX,KAAgB8oB,EAAOtzB,IAE1B4hB,EAAGpX,KAAK8uC,EAAwBt5C,IAE9BA,GAAKg6C,GAAiBh6C,GAAKi6C,EAC7Br4B,EAAGpX,KAAK,OAERoX,EAAGpX,KAAK,MAEVoX,EAAGpX,KAAKu1B,EAAW//B,GAAGiO,YAK1B,OAFA2T,EAAGpX,KAAK,SACRoX,EAAGpX,KAAK7K,KAAKmS,WAAW7D,YACjB2T,EAAGtX,KAAK,KAEnB2H,EA1IA,GAAa5S,EAAA4S,YA+Ib,IAAIioC,EAA+C,KAGnD,SAAAZ,EAAwCzhC,GACjCqiC,IAA6BA,MAClC,IAAK,IAAIl6C,EAAIk6C,EAA4Bt1C,OAAQ5E,GAAK6X,IAAS7X,EAC7Dk6C,EAA4B1vC,KAAK,OAASxK,EAAEiO,SAAS,KAEvD,OAAOisC,EAA4BriC,EAAQ,GAL7CxY,EAAAi6C,ylBCzlBA,IA8HYxiB,EA9HZqjB,EAAAr6C,EAAA,IAMA2B,EAAA3B,EAAA,GAKA8B,EAAA9B,EAAA,GAaAi/B,EAAAj/B,EAAA,GAyBAk/B,EAAAl/B,EAAA,GAKA6B,EAAA7B,EAAA,GAuDA4B,EAAA5B,EAAA,GASA8f,EAAA9f,EAAA,IAQA,SAAYg3B,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAAz3B,EAAAy3B,SAAAz3B,EAAAy3B,YAQZ,IAAAsjB,EAAA,oBAAAA,IAGEz6C,KAAAuU,OAAiB4iB,EAAOujB,OAExB16C,KAAA26C,eAAsB,EAEtB36C,KAAA46C,UAAiB,EAEjB56C,KAAA66C,UAAiB,EAEjB76C,KAAA86C,cAAqB,EAErB96C,KAAA+6C,aAAoB,EAEpB/6C,KAAAg7C,WAAkB,EAElBh7C,KAAAuc,WAAkB,EAElBvc,KAAAkJ,cAA2C,KAqB7C,OAlBEnI,OAAAC,eAAIy5C,EAAA/4C,UAAA,gBAAJ,WACE,OAAO1B,KAAKuU,QAAU4iB,EAAOC,wCAI/Br2B,OAAAC,eAAIy5C,EAAA/4C,UAAA,iBAAJ,WACE,OAAO1B,KAAKuU,QAAU4iB,EAAOC,OAASr1B,EAAA8B,KAAK01C,QAAUx3C,EAAA8B,KAAKy1C,yCAI5Dv4C,OAAAC,eAAIy5C,EAAA/4C,UAAA,iBAAJ,WACE,OAAO1B,KAAKuU,QAAU4iB,EAAOC,OAASr1B,EAAA8B,KAAKw1C,QAAUt3C,EAAA8B,KAAKu1C,yCAI5Dr4C,OAAAC,eAAIy5C,EAAA/4C,UAAA,sBAAJ,WACE,OAAO1B,KAAKuU,QAAU4iB,EAAOC,OAASn1B,EAAAyZ,WAAWE,IAAM3Z,EAAAyZ,WAAWC,qCAEtE8+B,EAxCA,GAAa/6C,EAAA+6C,UA2Cb,SAAkBQ,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkBv7C,EAAAu7C,iBAAAv7C,EAAAu7C,oBAUlB,IAAAC,EAAA,SAAAl4C,GAqCE,SAAAk4C,EAAYxkC,EAAkB9S,QAAA,IAAAA,MAAA,MAA9B,IAAAV,EACEF,EAAAxC,KAAAR,KAAM0W,EAAQzT,cAAYjD,YA3B5BkD,EAAAi4C,YAA2B,KAE3Bj4C,EAAAk4C,YAAoBr5C,EAAA8B,KAAKc,KAIzBzB,EAAAm4C,qBAIAn4C,EAAAo4C,eAAkC,IAAIx2C,MAEtC5B,EAAAq4C,eAA4C,IAAIz4C,IAEhDI,EAAAs4C,cAA4B,IAAI12C,MAEhC5B,EAAAu4C,iBAA8B,EAE9Bv4C,EAAAw4C,MAAqB,IAAI1rC,IAUvB9M,EAAKwT,QAAUA,EACV9S,IAASA,EAAU,IAAI62C,GAC5Bv3C,EAAKU,QAAUA,EACfV,EAAKga,aAAexF,QAClBikC,IAAI/3C,EAAQo3C,WAAYp3C,EAAQW,UAAU8Z,WAE5Cnb,EAAKvD,OAASsC,EAAAwrB,OAAOrS,WA6jLzB,OA1mL8B1X,EAAAw3C,EAAAl4C,GAgCrBk4C,EAAAU,QAAP,SAAellC,EAAkB9S,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIs3C,EAASxkC,EAAS9S,GAASg4C,WAgBxCV,EAAAx5C,UAAAk6C,QAAA,WACE,IAAIh4C,EAAU5D,KAAK4D,QACfjE,EAASK,KAAKL,OACd+W,EAAU1W,KAAK0W,QAGnBA,EAAQ/S,WAAWC,GAGnB,IAAIi4C,EAAyBnzC,OAAOgO,EAAQtT,eAAejC,IAAI,UAC/DuH,OAAOmzC,EAAuBx2C,MAAQ+5B,EAAAt2B,YAAYsM,oBAClD,IAAI0mC,EAAwB,IAAI1c,EAAA9lB,SACXuiC,EACnBA,EAAuB/0C,aACvB,IAAI/E,EAAAuQ,aAAcvQ,EAAA8B,KAAKc,OAEzB3E,KAAK+7C,cAAgBD,EACrB97C,KAAKof,gBAAkB08B,EAIvB,IADA,IAAIr4C,EAAUiT,EAAQjT,QACbpD,EAAI,EAAG2E,EAAIvB,EAAQwB,OAAQ5E,EAAI2E,IAAK3E,EACvCoD,EAAQpD,GAAG4K,SACbjL,KAAKg8C,cAAcv4C,EAAQpD,IAK/B,IAAIg7C,EAAoBr7C,KAAKq7C,kBAC7B,GAAIA,EAAkBp2C,OAAQ,CAC5B,IACIg3C,EADAC,EAAUl8C,KAAKm8C,mBAAmBL,EAAsBzpC,WAE5D1S,EAAOm4B,SACLmkB,EAAUt8C,EAAOi1B,YACfknB,EAAsBh1C,aACtBo1C,EACAn6C,EAAAy3C,mBAAmBsC,EAAsB9hC,kBACzCra,EAAOwyB,YAAY,KAAMkpB,KAG7BS,EAAsBx/B,SAAS3c,EAAQs8C,GAIzC,IAAKr4C,EAAQi3C,SAAU,CACrB,IAAI39B,EAAeld,KAAKkd,aACxBA,EAAek/B,UAAUl/B,EAActZ,EAAQW,UAAU8Z,UACzDre,KAAKkd,aAAeA,EAChBtZ,EAAQy4C,SACV18C,EAAO80B,UACL,YACAxyB,EAAAyZ,WAAWE,KACX,EACAjc,EAAOmvB,UAAUuI,QAAQna,GAAeoa,SAASpa,KAGnDvd,EAAO80B,UACL,YACAxyB,EAAAyZ,WAAWC,KACX,EACAhc,EAAOgvB,UAAU0I,QAAQna,KAK7B,IAAIo/B,EAAQC,UAAUH,UAAUl/B,EAAc,OAAUxF,QAAQ,GAAI,IACpE/X,EAAOi3B,UACLS,QAAQilB,GACRt8C,KAAK4D,QAAQy4C,SACTp6C,EAAAwrB,OAAOuP,kBACP/6B,EAAAwrB,OAAOsP,kBACX/8B,KAAKs7C,eACL13C,EAAQ2Q,OACR,UAKA3Q,EAAQk3C,cACVn7C,EAAO02B,gBAAgB,IAAK,MAAO,UAIrC,IAAImlB,EAAgBx7C,KAAKw7C,cACrBgB,EAAoBhB,EAAcv2C,OACtC,GAAIu3C,EAAmB,CACrB,IAAIC,EAAU,IAAI33C,MAAmB03C,GACrC,IAASn8C,EAAI,EAAGA,EAAIm8C,IAAqBn8C,EACvCo8C,EAAQp8C,GAAKm7C,EAAcn7C,GAAG8Z,IAEhCxa,EAAOg4B,iBAAiB8kB,GACxB98C,EAAO01B,eAAe,IAAK,SAS7B,OALIzxB,EAAQm3C,cACVp7C,EAAOw2B,eAAe,IAAK,MAAO,SAC7BqmB,GAAmB78C,EAAO01B,eAAe,IAAK,UAG9C11B,GAKTu7C,EAAAx5C,UAAAg7C,oBAAA,SAAoBC,EAAwCljC,GAK1D,IAJA,IAAIhW,EAAUzD,KAAK0W,QAAQjT,QAGvB4tB,EAAWsrB,EAAiC,MACvCt8C,EAAI,EAAG2E,EAAIvB,EAAQwB,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAE9C,IADIuJ,EAASnG,EAAQpD,IACVohB,gBAAkB4P,EAE3B,YADArxB,KAAKg8C,cAAcpyC,GAMvBynB,EAAWsrB,EAAiC,YAC5C,IAASt8C,EAAI,EAAG2E,EAAIvB,EAAQwB,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAE9C,IADIuJ,EAASnG,EAAQpD,IACVohB,gBAAkB4P,EAE3B,YADArxB,KAAKg8C,cAAcpyC,GAMvBynB,EAAW+N,EAAA38B,eAAiBk6C,EAAiC,MAC7D,IAASt8C,EAAI,EAAG2E,EAAIvB,EAAQwB,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAC9C,IAAIuJ,EACJ,IADIA,EAASnG,EAAQpD,IACVohB,gBAAkB4P,EAE3B,YADArxB,KAAKg8C,cAAcpyC,GAKvB5J,KAAKiH,MACHnF,EAAAoF,eAAe01C,iBACfnjC,EAAWpS,MAAOs1C,IAItBzB,EAAAx5C,UAAAs6C,cAAA,SAAcpyC,GACZ,IAAI8xC,EAAQ17C,KAAK07C,MACbj6B,EAAiB7X,EAAO6X,eAC5B,IAAIi6B,EAAM1xC,IAAIyX,GAAd,CACAi6B,EAAMzrC,IAAIwR,GAQV,IALA,IAAIk5B,EAAgB36C,KAAK4D,QAAQ+2C,cAC7B1vC,EAAUrB,EAAOqB,QACjB8wC,EAAgB/7C,KAAK+7C,cACrBV,EAAoBr7C,KAAKq7C,kBACzBn2C,EAAa0E,EAAO1E,WACf7E,EAAI,EAAG2E,EAAIE,EAAWD,OAAQ5E,EAAI2E,IAAK3E,EAAG,CACjD,IAAI+E,EAAYF,EAAW7E,GAC3B,OAAQ+E,EAAUC,MAChB,KAAKrD,EAAAsD,SAASC,kBAETo1C,GAAkB1vC,GAAW7F,EAAUqE,GAAG21B,EAAA11B,YAAY/D,WACnCP,EAAWy3C,WAE/B78C,KAAK88C,wBAA0C13C,MAEjD,MAEF,KAAKpD,EAAAsD,SAASG,iBACRk1C,GAAkB1vC,GAAW7F,EAAUqE,GAAG21B,EAAA11B,YAAY/D,UACxD3F,KAAK+8C,uBAAwC33C,GAE/C,MAEF,KAAKpD,EAAAsD,SAASO,qBAET80C,GAAkB1vC,GAAW7F,EAAUqE,GAAG21B,EAAA11B,YAAY/D,WAChCP,EAAWy3C,WAElC78C,KAAKg9C,2BAAgD53C,MAEvD,MAEF,KAAKpD,EAAAsD,SAASS,OACZ/F,KAAK08C,oBACet3C,EAAWqc,eACXrc,EAAWmC,MAE/B,MAEF,KAAKvF,EAAAsD,SAASa,sBACRw0C,GAAkB1vC,GAAW7F,EAAUqE,GAAG21B,EAAA11B,YAAY/D,UACxD3F,KAAKi9C,4BAAkD73C,GAEzD,MAEF,KAAKpD,EAAAsD,SAASiB,SACZ,IAAI22C,EAAel9C,KAAKm9C,yBAA4C/3C,GAChE83C,GAAc7B,EAAkBxwC,KAAKqyC,GACzC,MAEF,KAAKl7C,EAAAsD,SAASK,OACuC,MAA7BP,EAAWqc,gBAC/BzhB,KAAK08C,oBACuBt3C,EAAWqc,eACMrc,EAAWmC,OAGtDozC,GAAiB1vC,IACnBjL,KAAKo9C,uBAAwCh4C,GAE/C,MAEF,QACE,IAAIi4C,EAAmBr9C,KAAKof,gBAC5Bpf,KAAKof,gBAAkB28B,EACvBV,EAAkBxwC,KAAK7K,KAAKs9C,iBAAiBl4C,IAC7CpF,KAAKof,gBAAkBi+B,MAS/BnC,EAAAx5C,UAAA67C,yBAAA,SAAyBn2C,GAEvB,IAAIV,EAAUgC,OAAO1I,KAAK0W,QAAQtT,eAAejC,IAAIiG,EAAYgD,wBAEjE,OADA1B,OAAOhC,EAAQrB,MAAQ+5B,EAAAt2B,YAAYa,QAC9B3J,KAAKw9C,cAAsB92C,GACjBA,EADkC,MAInDw0C,EAAAx5C,UAAA87C,cAAA,SAAcC,GACZ,GAAIA,EAAOh0C,GAAG21B,EAAA11B,YAAYg0C,WAAaD,EAAOh0C,GAAG21B,EAAA11B,YAAYkR,QAAUwkB,EAAA11B,YAAYQ,SAAU,OAAO,EACpGuzC,EAAO52C,IAAIu4B,EAAA11B,YAAYg0C,UAEvB,IAAI/9C,EAASK,KAAKL,OACdyH,EAAcq2C,EAAOr2C,YACrBu2C,EAA0B,EAE9B,GAAIF,EAAOzxC,MAAQjK,EAAA8B,KAAKc,KAGtB,GAAIyC,EAAY4E,KAAM,CACpB,IAAI6N,EAAe7Z,KAAK0W,QAAQpF,YAAYlK,EAAY4E,MACxD,IAAK6N,EAAc,OAAO,EAC1B,GAAIA,GAAgB9X,EAAA8B,KAAKc,KAKvB,OAJA3E,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACfx2C,EAAY4E,KAAK3E,QAEZ,EAETo2C,EAAOzxC,KAAO6N,MAGT,KAAIzS,EAAY4Q,YAqBrB,OAJAhY,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACfx2C,EAAYxG,KAAKyG,MAAMoM,QAElB,EAfP,GALAkqC,EAAW39C,KAAK69C,kBACdz2C,EAAY4Q,YACZjW,EAAA8B,KAAKc,KAAI,GAGP3E,KAAKo7C,aAAer5C,EAAA8B,KAAKc,KAK3B,OAJA3E,KAAKiH,MACHnF,EAAAoF,eAAe42C,mCACf12C,EAAY4Q,YAAY3Q,MAAOrH,KAAKo7C,YAAY9sC,WAAY,WAEvD,EAETmvC,EAAOzxC,KAAOhM,KAAKo7C,YAYvB,IAAI2C,EAAaN,EAAOzxC,KAAKyP,eACzBuiC,EAAaP,EAAOlyC,MAAM6zB,EAAA11B,YAAYiO,QAAU8lC,EAAOh0C,GAAG21B,EAAA11B,YAAYwC,OAASkzB,EAAA11B,YAAYwlC,UAG/F,GAAIuO,EAAOh0C,GAAG21B,EAAA11B,YAAYkR,SAGxB,OAAIojC,GACFP,EAAO52C,IAAIu4B,EAAA11B,YAAYu0C,eACvBt+C,EAAO42B,gBACLknB,EAAO32C,aACP22C,EAAOtzC,UACHszC,EAAOtzC,UAAUJ,WACjB,MACJ0zC,EAAO1zC,WACPg0C,GAEFN,EAAO52C,IAAIu4B,EAAA11B,YAAYg0C,WAChB,IAIP19C,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfxD,EAAYC,QAGT,GAKT,IAAI62C,GAAoB,EAGpBT,EAAOh0C,GAAG21B,EAAA11B,YAAYkO,SACxB+lC,EAAW39C,KAAKm+C,sBAAsBV,EAAQA,EAAOzxC,MAAM,GAKvD5E,EAAY4Q,aACT2lC,IACHA,EAAW39C,KAAK69C,kBAAkBz2C,EAAY4Q,YAAaylC,EAAOzxC,OAIhE6uB,yBAAyB8iB,IAAa17C,EAAAsgB,aAAauY,QAGjDkjB,GACFL,EAAW39C,KAAKo+C,wBAAwBT,GACpC9iB,yBAAyB8iB,IAAa17C,EAAAsgB,aAAauY,QACrD96B,KAAKsiB,QACHxgB,EAAAoF,eAAem3C,4DACfj3C,EAAYC,OAEd62C,GAAoB,IAGtBA,GAAoB,IAMxBP,EAAWF,EAAOzxC,KAAKitC,aAAat5C,GAIxC,IAAImH,EAAe22C,EAAO32C,aAE1B,GAAIo3C,EACFv+C,EAAO80B,UAAU3tB,EAAci3C,GAAY,EAAMN,EAAOzxC,KAAKitC,aAAat5C,IAC1EK,KAAKq7C,kBAAkBxwC,KAAKlL,EAAOsyB,gBAAgBnrB,EAAc62C,SAIjE,GAAIK,EAAY,CAEd,OADejjB,2BAA2B4iB,IAExC,KAAK17C,EAAAyZ,WAAWC,IACd8hC,EAAOpmC,kBAAiB,EACxBomC,EAAOhmC,qBAAuBC,QAAQsjB,0BAA0B2iB,GAAW,GAC3E,MAEF,KAAK17C,EAAAyZ,WAAWE,IACd6hC,EAAOpmC,kBAAiB,EACxBomC,EAAOhmC,qBAAuBC,QAC5BujB,6BAA6B0iB,GAC7BziB,8BAA8ByiB,IAEhC,MAEF,KAAK17C,EAAAyZ,WAAWG,IACd4hC,EAAOpmC,kBAAiB,EACxBomC,EAAO3lC,mBAAqBqjB,0BAA0BwiB,GACtD,MAEF,KAAK17C,EAAAyZ,WAAWI,IACd2hC,EAAOpmC,kBAAiB,EACxBomC,EAAO3lC,mBAAqBsjB,0BAA0BuiB,GACtD,MAEF,QACEj1C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf6yC,EAAOr2C,YAAYC,OAErBo2C,EAAOpmC,kBAAiB,EACxBomC,EAAOhmC,qBAAuBC,QAAQ,GAI1C+lC,EAAO52C,IAAIu4B,EAAA11B,YAAYkO,SACnBxQ,EAAYk3C,YACd3+C,EAAO80B,UAAU3tB,EAAci3C,GAAY,EAAOJ,GAEhDv2C,EAAYC,MAAMuC,OAAOqB,SAAW7D,EAAYskC,kBAClD/rC,EAAO81B,gBAAgBgoB,EAAO32C,aAAcM,EAAYyE,+BAI1DlM,EAAO80B,UAAU3tB,EAAci3C,GAAaC,EAAYL,GAG5D,OAAO,GAKTzC,EAAAx5C,UAAAq7C,uBAAA,SAAuB31C,GACrB,IAAIV,EAAUgC,OAAO1I,KAAK0W,QAAQtT,eAAejC,IAAIiG,EAAYgD,wBAEjE,OADA1B,OAAOhC,EAAQrB,MAAQ+5B,EAAAt2B,YAAYiO,MAC9B/W,KAAKu+C,YAAkB73C,GACfA,EADgC,MAI/Cw0C,EAAAx5C,UAAA68C,YAAA,SAAY73C,GACV,GAAIA,EAAQ+C,GAAG21B,EAAA11B,YAAYg0C,UAAW,OAAO,EAC7Ch3C,EAAQG,IAAIu4B,EAAA11B,YAAYg0C,UAExB,IAAI/9C,EAASK,KAAKL,OAClBK,KAAKm7C,YAAcz0C,EACnB,QAAI83C,EAAkC,KAEtC,GAAI93C,EAAQoE,YACV,IAAmB,IAAA/C,EAAAJ,EAAAjB,EAAQoE,QAAQwE,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAAtC,IAAIQ,EAAMsW,EAAAtd,MACb,GAAIgH,EAAOhD,MAAQ+5B,EAAAt2B,YAAY8K,UAA/B,CACA,IAAI6qC,GAAc,EACdjgB,EAAiBn2B,EACjBq2C,EAAmBlgB,EAAIp3B,YAE3B,GADAo3B,EAAI33B,IAAIu4B,EAAA11B,YAAYg0C,UAChBlf,EAAI/0B,GAAG21B,EAAA11B,YAAYkO,SACjBlR,EAAQU,YAAYskC,kBACtB/rC,EAAO80B,UACL+J,EAAI13B,aACJ7E,EAAAyZ,WAAWC,KACX,EACAhc,EAAOgvB,UAAU6P,EAAIxnB,oBAGpB,CACL,IAAI2mC,OAAQ,EACRe,EAAiBr9C,OACnBs8C,EAAW39C,KAAK69C,kBAA8Ba,EAAiBr9C,MAAOU,EAAA8B,KAAKG,KACvE62B,yBAAyB8iB,IAAa17C,EAAAsgB,aAAauY,QACrD6iB,EAAW39C,KAAKo+C,wBAAwBT,GACpC9iB,yBAAyB8iB,IAAa17C,EAAAsgB,aAAauY,QACjDp0B,EAAQ+C,GAAG21B,EAAA11B,YAAYiO,QACzB3X,KAAKsiB,QACHxgB,EAAAoF,eAAem3C,4DACfK,EAAiBr3C,OAGrBo3C,GAAc,KAGQ,MAAjBD,EACTb,EAAWh+C,EAAOgvB,UAAU,GACnB6vB,EAAc/0C,GAAG21B,EAAA11B,YAAYkO,SACtC+lC,EAAWh+C,EAAOgvB,UAAU6vB,EAAcxnC,cAAgB,IAG1D2mC,EAAWh+C,EAAO+vB,aAAaztB,EAAA2lB,SAAS+2B,OACtCh/C,EAAO0wB,gBAAgBmuB,EAAc13C,aAAc7E,EAAAyZ,WAAWC,KAC9Dhc,EAAOgvB,UAAU,IAEfjoB,EAAQ+C,GAAG21B,EAAA11B,YAAYiO,QACzB3X,KAAKsiB,QACHxgB,EAAAoF,eAAem3C,4DACfK,EAAiBr3C,OAGrBo3C,GAAc,GAEZA,GACF9+C,EAAO80B,UACL+J,EAAI13B,aACJ7E,EAAAyZ,WAAWC,KACX,EACAhc,EAAOgvB,UAAU,IAEnB3uB,KAAKq7C,kBAAkBxwC,KAAKlL,EAAOsyB,gBAAgBuM,EAAI13B,aAAc62C,MAErEh+C,EAAO80B,UAAU+J,EAAI13B,aAAc7E,EAAAyZ,WAAWC,KAAK,EAAOgiC,GACtD5iB,2BAA2B4iB,IAAa17C,EAAAyZ,WAAWC,KACrD6iB,EAAIxnB,cAAgBgkB,0BAA0B2iB,GAC9Cnf,EAAI33B,IAAIu4B,EAAA11B,YAAYkO,WAEpBlP,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf8zC,EAAiBr3C,OAEnBm3B,EAAIxnB,cAAgB,IAI1BwnC,EAA2BhgB,EAGvB93B,EAAQU,YAAYC,MAAMuC,OAAOqB,SAAWvE,EAAQU,YAAYskC,mBAC9DrjC,EAAOoB,GAAG21B,EAAA11B,YAAYkO,SACxBjY,EAAO81B,gBAAgBptB,EAAOvB,aAAcuB,EAAOvB,cAC1C43C,GACT1+C,KAAKsiB,QACHxgB,EAAAoF,eAAe03C,+BACfF,EAAiBr3C,2GAO3B,OADArH,KAAKm7C,YAAc,MACZ,GAMTD,EAAAx5C,UAAAs7C,2BAAA,SACE51C,EACAyL,EACA3B,QAAA,IAAAA,MAAA,MAEA,IAAIxK,EAAUgC,OAAO1I,KAAK0W,QAAQtT,eAAejC,IAAIiG,EAAYgD,wBAEjE,OADA1B,OAAOhC,EAAQrB,MAAQ+5B,EAAAt2B,YAAYsM,oBAC5BpV,KAAK6+C,kCACSn4C,EACnBmM,EACA3B,EACoBxK,EAASU,YAAYxG,OAK7Cs6C,EAAAx5C,UAAAm9C,kCAAA,SACEn9C,EACAmR,EACA3B,EACAuI,GAEA,IAAI3N,EAAWpK,EAAUkR,0BACvBC,EACA3B,EACAuI,GAEF,OAAM3N,GAAY9L,KAAK8+C,gBAAgBhzC,GAChCA,EADmD,MAKpDovC,EAAAx5C,UAAAy6C,mBAAR,SAA2B9pC,GACzB,IAGIS,EAFArB,EADaY,EAAUb,eACIvM,OAC3BoM,EAAWgB,EAAUhB,SAErB6G,EAAQ,EACR7G,IACFyB,EAAa,IAAIhO,MAAM,EAAI2M,IAChB,GAAKJ,EAASoK,eACzBvD,EAAQ,GAERpF,EAAa,IAAIhO,MAAM2M,GAEzB,IAAK,IAAIpR,EAAI,EAAGA,EAAIoR,IAAiBpR,IAAK6X,EACxCpF,EAAWoF,GAAS7F,EAAUb,eAAenR,GAAGob,eAElD,IAAIsjC,EAAa1sC,EAAUF,WAAWsJ,eAClC9b,EAASK,KAAKL,OACdu8C,EAAUv8C,EAAO8uB,2BAA2BswB,EAAYjsC,GAI5D,OAHKopC,IACHA,EAAUv8C,EAAOwuB,gBAAgB9b,EAAU0K,oBAAqBgiC,EAAYjsC,IAEvEopC,GAIThB,EAAAx5C,UAAAo9C,gBAAA,SAAgBhzC,GACd,GAAIA,EAASrC,GAAG21B,EAAA11B,YAAYg0C,UAAW,OAAO,EAC9Ch1C,QAAQoD,EAASrC,GAAG21B,EAAA11B,YAAYkR,QAAUwkB,EAAA11B,YAAYQ,UAAqC,SAAzB4B,EAAShF,cAC3EgF,EAASjF,IAAIu4B,EAAA11B,YAAYg0C,UAGzB,IAkBIvjC,EAlBA/S,EAAc0E,EAASpK,UAAU0F,YACjC0rB,EAAO1rB,EAAY0rB,KACnBA,EACEhnB,EAASrC,GAAG21B,EAAA11B,YAAYkR,UAC1B5a,KAAKiH,MACHnF,EAAAoF,eAAe83C,yDACf53C,EAAYxG,KAAKyG,OAIhByE,EAASrC,GAAG21B,EAAA11B,YAAYkR,UAC3B5a,KAAKiH,MACHnF,EAAAoF,eAAe+3C,gFACf73C,EAAYxG,KAAKyG,OAMvB,IAAI60C,EAAUl8C,KAAKm8C,mBAAmBrwC,EAASuG,WAC3C1S,EAASK,KAAKL,OAClB,GAAImzB,EAAM,CACR,IAAIosB,EAAgBpzC,EAASrC,GAAG21B,EAAA11B,YAAY8C,aACxC2F,EAAmBrG,EAASuG,UAAUF,WAGtCkrC,EAAmBr9C,KAAKof,gBAC5Bpf,KAAKof,gBAAkBtT,EACvB,IAAIiI,EAAOjI,EAASiI,KAChB0sB,OAAI,EACR,GAAI3N,EAAKztB,MAAQrD,EAAAsD,SAAS+mC,WACxB3jC,QAAQoD,EAASP,MAAM6zB,EAAA11B,YAAY8C,YAAc4yB,EAAA11B,YAAY8B,IAAM4zB,EAAA11B,YAAY+B,MAC/E/C,OAAOoD,EAASrC,GAAG21B,EAAA11B,YAAYo5B,QAC/BrC,EAAOzgC,KAAK69C,kBAAwC/qB,EAAM1e,WAAYjC,GACtE4B,EAAKlN,IAAG,QAKR,GAHA6B,OAAOoqB,EAAKztB,MAAQrD,EAAAsD,SAASumC,OAC7BpL,EAAOzgC,KAAKs9C,iBAAiBxqB,GAC7B/e,EAAKuI,WACD4iC,EAAe,CACjB,IAAIC,EAAiBn/C,KAAK4D,QAAQu7C,eAIlC,GAHAz2C,OAAOoD,EAASrC,GAAG21B,EAAA11B,YAAY6O,YAG1BxE,EAAKtK,GAAE,GAGV,GAAIsK,EAAKtK,GAAE,IACTg3B,EAAO9gC,EAAOwyB,YAAY,MACxBsO,EACA9gC,EAAOswB,eAAe,EAAGkvB,IACxBA,OAGE,CACL,IAAI73C,EAASoB,OAAOoD,EAAS8J,UAC7BlN,OAAOpB,EAAOjC,MAAQ+5B,EAAAt2B,YAAY+L,OAClC4rB,EAAO9gC,EAAOwyB,YAAY,MACxBsO,EACA9gC,EAAOwwB,eAAe,EACpBivB,EAAwBp/C,KAAasH,EAAQF,EAAYxG,QAE1Du+C,SAKEhtC,GAAcpQ,EAAA8B,KAAKc,MAASoP,EAAKtK,GAAE,IAC5CzJ,KAAKiH,MACHnF,EAAAoF,eAAem4C,+DACfj4C,EAAYiL,UAAUF,WAAW9K,OAIvCrH,KAAKof,gBAAkBi+B,EAGvBljC,EAAMxa,EAAOi1B,YACX9oB,EAAShF,aACTo1C,EACAn6C,EAAAy3C,mBAAmB1tC,EAASkO,kBAC5BymB,OAGG,CACL30B,EAASjF,IAAIu4B,EAAA11B,YAAYu0C,eAGzB,IAAI9zC,EAAY2B,EAASpK,UAAUyI,UACnCgQ,EAAMxa,EAAOk2B,kBACX/pB,EAAShF,aACTqD,EACIA,EAAUJ,WACV,MACJ+B,EAAS/B,WACTmyC,GAUJ,OALI90C,EAAYC,MAAMuC,OAAOqB,SAAW7D,EAAYskC,kBAClD/rC,EAAOs1B,kBAAkBnpB,EAAShF,aAAcM,EAAYxG,KAAK6G,MAGnEqE,EAASwQ,SAAS3c,EAAQwa,IACnB,GAKT+gC,EAAAx5C,UAAAu7C,4BAAA,SAA4B71C,GAG1B,IAFA,IAAI0D,EAAU1D,EAAY0D,QACtB6vC,EAAgB36C,KAAK4D,QAAQ+2C,cACxBt6C,EAAI,EAAG2E,EAAI8F,EAAQ7F,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAC9C,IAAIgI,EAASyC,EAAQzK,GACrB,OAAQgI,EAAOhD,MACb,KAAKrD,EAAAsD,SAASC,kBAETo1C,IAAiBtyC,EAAOoB,GAAG21B,EAAA11B,YAAY/D,SACpB0C,EAAQw0C,WAE5B78C,KAAK88C,wBAA0Cz0C,MAEjD,MAEF,KAAKrG,EAAAsD,SAASW,sBAET00C,IAAiBtyC,EAAOoB,GAAG21B,EAAA11B,YAAY/D,SAChB0C,EAAQw0C,WAEhC78C,KAAKs/C,4BAAkDj3C,MAEzD,MAEF,KAAKrG,EAAAsD,SAASG,iBACRk1C,GAAiBtyC,EAAOoB,GAAG21B,EAAA11B,YAAY/D,UACzC3F,KAAK+8C,uBAAwC10C,GAE/C,MAEF,KAAKrG,EAAAsD,SAASO,qBAET80C,IAAiBtyC,EAAOoB,GAAG21B,EAAA11B,YAAY/D,SACjB0C,EAAQw0C,WAE/B78C,KAAKg9C,2BAAgD30C,MAEvD,MAEF,KAAKrG,EAAAsD,SAASa,sBACRw0C,GAAiBtyC,EAAOoB,GAAG21B,EAAA11B,YAAY/D,UACzC3F,KAAKi9C,4BAAkD50C,GAEzD,MAEF,KAAKrG,EAAAsD,SAASiB,SACZ,GAAIo0C,GAAiBtyC,EAAOoB,GAAG21B,EAAA11B,YAAY/D,QAAS,CAClD,IAAIu3C,EAAel9C,KAAKm9C,yBAA4C90C,GAAQ,GACxE60C,GAAcl9C,KAAKq7C,kBAAkBxwC,KAAKqyC,GAEhD,MAEF,QACEx0C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfvC,EAAOhB,UAQjB6zC,EAAAx5C,UAAA69C,iBAAA,SAAiBC,GACf,GAAKA,EAAG10C,QAAR,CAEA,QAAI6vC,EAAgB36C,KAAK4D,QAAQ+2C,kBACjC,IAAoB,IAAA5yC,EAAAJ,EAAA63C,EAAG10C,QAAQwE,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAAlC,IAAInB,EAAOiY,EAAAtd,MACd,OAAQqF,EAAQrB,MACd,KAAK+5B,EAAAt2B,YAAYC,iBAGX4xC,IACiBj0C,EAAS+C,GAAG21B,EAAA11B,YAAY/D,SACpBe,EAAS+C,GAAG21B,EAAA11B,YAAYiQ,UAE/C3Z,KAAKy/C,+BAA+C/4C,MAEtD,MAEF,KAAK04B,EAAAt2B,YAAYiO,KACf/W,KAAKu+C,YAAkB73C,GACvB,MAEF,KAAK04B,EAAAt2B,YAAYsM,oBAGXulC,IAAqCj0C,EAAS+C,GAAG21B,EAAA11B,YAAY/D,SACrCe,EAAS+C,GAAG21B,EAAA11B,YAAYiQ,UAElD3Z,KAAK6+C,kCACgBn4C,KAEnB,KACoBA,EAASU,YAAYxG,MAG7C,MAEF,KAAKw+B,EAAAt2B,YAAYa,OACf3J,KAAKw9C,cAAsB92C,GAC3B,MAEF,KAAK04B,EAAAt2B,YAAYgO,UACf9W,KAAKu/C,iBAA4B74C,yGASzCw0C,EAAAx5C,UAAA07C,uBAAA,SAAuBh4C,GAIrB,IAHA,IAAIzF,EAASK,KAAKL,OACdD,EAAUM,KAAK0W,QAAQnT,iBACvBuH,EAAU1F,EAAU0F,QACfzK,EAAI,EAAG2E,EAAI8F,EAAQ7F,OAAQ5E,EAAI2E,IAAK3E,EAAG,CAC9C,IAAIgI,EAASyC,EAAQzK,GACjBq/C,EACFt6C,EAAUiC,MAAMuC,OAAOgG,aACvBwvB,EAAAl9B,eACAmG,EAAOb,aAAaC,KAElBf,EAAUhH,EAAQyB,IAAIu+C,GAC1B,GAAKh5C,EACL,OAAQA,EAAQrB,MACd,KAAK+5B,EAAAt2B,YAAYC,gBACOrC,EAAS+C,GAAG21B,EAAA11B,YAAYiQ,UAC5C3Z,KAAKy/C,+BAA+C/4C,MAEtD,MAEF,KAAK04B,EAAAt2B,YAAYiO,KACf/W,KAAKu+C,YAAkB73C,GACvB,MAEF,KAAK04B,EAAAt2B,YAAYsM,mBACf,IACuB1O,EAAS+C,GAAG21B,EAAA11B,YAAYiQ,UAC7CvU,EAAUiC,MAAMuC,OAAOqB,QACvB,CACA,IAAI00C,EAAmB3/C,KAAK6+C,kCACPn4C,KAEnB,KACoBA,EAASU,YAAYxG,MAE3C,GAAI++C,EAAkB,CACpB,IAAIC,EAAsBD,EAAiBj+C,UAAU0F,YACjDw4C,GAAuBA,EAAoBjU,oBAAoBtjC,IACjE1I,EAAOs1B,kBAAkB0qB,EAAiB74C,aAAcuB,EAAOb,aAAaC,OAIlF,MAEF,KAAK23B,EAAAt2B,YAAYa,OACf,GAAI3J,KAAKw9C,cAAsB92C,IAAYtB,EAAUiC,MAAMuC,OAAOqB,QAAS,CACzE,IAAI40C,EAA6Bn5C,EAASU,YACtCy4C,GAAqBA,EAAkBlU,oBAAoBtjC,KAChD3B,EAAS+C,GAAG21B,EAAA11B,YAAYkO,SACnCjY,EAAO81B,gBAAgB/uB,EAAQI,aAAcuB,EAAOb,aAAaC,MAEjEzH,KAAKsiB,QACHxgB,EAAAoF,eAAe03C,+BACfv2C,EAAOhB,QAKf,MAEF,KAAK+3B,EAAAt2B,YAAYgO,UACf9W,KAAKu/C,iBAA4B74C,MASzCw0C,EAAAx5C,UAAAo7C,wBAAA,SACE11C,EACAyL,EACA3B,EACAmC,QADA,IAAAnC,MAAA,WACA,IAAAmC,MAAA,MAEA,IAAI3M,EAAUgC,OAAO1I,KAAK0W,QAAQtT,eAAejC,IAAIiG,EAAYgD,wBACjE1B,OAAOhC,EAAQrB,MAAQ+5B,EAAAt2B,YAAYC,iBACnC/I,KAAKy/C,+BACa/4C,EAChBmM,EACA3B,EACAmC,IAIJ6nC,EAAAx5C,UAAA+9C,+BAAA,SACE/9C,EACAmR,EACA3B,EACAmC,QADA,IAAAnC,MAAA,WACA,IAAAmC,MAAA,MAEA,IAAIvH,EAAWpK,EAAUkR,0BACvBC,EACA3B,EACAmC,GAEGvH,GACL9L,KAAK8/C,aAAah0C,IAGpBovC,EAAAx5C,UAAAo+C,aAAA,SAAah0C,GACX,QAAIA,EAASrC,GAAG21B,EAAA11B,YAAYg0C,YAC5B5xC,EAASjF,IAAIu4B,EAAA11B,YAAYg0C,WAClB,IAGTxC,EAAAx5C,UAAA49C,4BAAA,SACEl4C,EACAyL,EACA3B,EACAmC,QADA,IAAAnC,MAAA,WACA,IAAAmC,MAAA,MAGArT,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfxD,EAAYC,QAOhB6zC,EAAAx5C,UAAAq+C,iBAAA,SAAiBzyB,EAAoB0yB,QAAA,IAAAA,MAAA,GACnC,IAAI9iC,EAAek/B,UAAUp8C,KAAKkd,aAAc8iC,GAC5CxyB,EAAUvrB,EAAAorB,cAAcjS,OAAOkS,EAAQpQ,GAG3C,OAFAld,KAAKs7C,eAAezwC,KAAK2iB,GACzBxtB,KAAKkd,aAAe45B,QAAQ55B,EAAcxF,QAAQ4V,EAAOroB,OAAQ,IAC1DuoB,GAMT0tB,EAAAx5C,UAAAu+C,yBAAA,SAAyBloB,GAEvB,GADArvB,OAAOqvB,EAAKtuB,GAAG21B,EAAA11B,YAAYg0C,WACvB3lB,EAAK3d,oBAAsB,EAC7B,OAAO2d,EAAK3d,mBAEd,IAAIohC,EAAgBx7C,KAAKw7C,cACrBtjC,EAAQsjC,EAAcv2C,OAO1B,OANK8yB,EAAKtuB,GAAG21B,EAAA11B,YAAYw2C,aAAenoB,EAAK1lB,UAAUV,mBAAqBomB,EAAK1lB,UAAUb,eAAevM,SAExG8yB,EAAO/3B,KAAKmgD,iBAAiBpoB,IAE/ByjB,EAAc3wC,KAAKktB,GACnBA,EAAK3d,mBAAqBlC,EACnBA,GAKTgjC,EAAAx5C,UAAA47C,iBAAA,SAAiBl4C,GACf,IACIoqB,EADA7vB,EAASK,KAAKL,OAElB,OAAQyF,EAAUC,MAChB,KAAKrD,EAAAsD,SAASumC,MACZrc,EAAOxvB,KAAKogD,sBAAsCh7C,GAClD,MAEF,KAAKpD,EAAAsD,SAASwmC,MACZtc,EAAOxvB,KAAKqgD,sBAAsCj7C,GAClD,MAEF,KAAKpD,EAAAsD,SAASymC,SACZvc,EAAOxvB,KAAKsgD,yBAA4Cl7C,GACxD,MAEF,KAAKpD,EAAAsD,SAAS0mC,GACZxc,EAAOxvB,KAAKugD,mBAAgCn7C,GAC5C,MAEF,KAAKpD,EAAAsD,SAAS2mC,MACZzc,EAAOxvB,KAAKwgD,sBAAsCp7C,GAClD,MAEF,KAAKpD,EAAAsD,SAAS+mC,WACZ7c,EAAOxvB,KAAKygD,2BAAgDr7C,GAC5D,MAEF,KAAKpD,EAAAsD,SAASinC,IACZ/c,EAAOxvB,KAAK0gD,oBAAkCt7C,GAC9C,MAEF,KAAKpD,EAAAsD,SAASknC,GACZhd,EAAOxvB,KAAK2gD,mBAAgCv7C,GAC5C,MAEF,KAAKpD,EAAAsD,SAASonC,OACZld,EAAOxvB,KAAK4gD,uBAAwCx7C,GACpD,MAEF,KAAKpD,EAAAsD,SAASsnC,OACZpd,EAAOxvB,KAAK6gD,uBAAwCz7C,GACpD,MAEF,KAAKpD,EAAAsD,SAASunC,MACZrd,EAAOxvB,KAAK8gD,sBAAsC17C,GAClD,MAEF,KAAKpD,EAAAsD,SAASwnC,IACZtd,EAAOxvB,KAAK+gD,oBAAkC37C,GAC9C,MAEF,KAAKpD,EAAAsD,SAASiB,UACZipB,EAAOxvB,KAAKm9C,yBAA4C/3C,MAC7CoqB,EAAO7vB,EAAOyzB,aACzB,MAEF,KAAKpxB,EAAAsD,SAAS0nC,KACZxd,EAAOxvB,KAAKghD,qBAAoC57C,GAChD,MAEF,KAAKpD,EAAAsD,SAAS2nC,MACZzd,EAAOxvB,KAAKihD,sBAAsC77C,GAClD,MAEF,KAAKpD,EAAAsD,SAASe,gBAGZ,GAAIrG,KAAKof,iBAAmBpf,KAAK+7C,cAC/B,OAAOp8C,EAAOyzB,YAIlB,QACE1qB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfxF,EAAUiC,OAEZmoB,EAAO7vB,EAAO40B,oBAOlB,OAHIv0B,KAAK4D,QAAQ2Y,WACf2kC,EAAiB1xB,EAAMpqB,EAAUiC,MAAO1H,EAAQK,KAAKof,iBAEhDoQ,GAGT0rB,EAAAx5C,UAAAy/C,kBAAA,SAAkBj8C,GAGhB,IAFA,IAAIk8C,EAAgBl8C,EAAWD,OAC3Bo8C,EAAQ,IAAIv8C,MAAqBs8C,GAC5B/gD,EAAI,EAAGA,EAAI+gD,IAAiB/gD,EACnCghD,EAAMhhD,GAAKL,KAAKs9C,iBAAiBp4C,EAAW7E,IAE9C,OAAOghD,GAGTnG,EAAAx5C,UAAA0+C,sBAAA,SAAsBh7C,GACpB,IAAIF,EAAaE,EAAUF,WAOvB6O,EAAO/T,KAAKof,gBAAgBrL,KAAK0L,qBACrCzf,KAAKof,gBAAgBrL,KAAOA,EAE5B,IAAI0sB,EAAOzgC,KAAKL,OAAOwyB,YAAY,KAAMnyB,KAAKmhD,kBAAkBj8C,GAAajD,EAAAyZ,WAAW4W,MACpFgvB,EAAcvtC,EAAKtK,GAAE,GACrB83C,EAAaxtC,EAAKtK,GAAE,GACpB+3C,EAAgBztC,EAAKtK,GAAE,IAQ3B,OALAsK,EAAOA,EAAK4L,qBACZ3f,KAAKof,gBAAgBrL,KAAOA,EACxButC,GAAavtC,EAAKlN,IAAG,GACrB06C,GAAYxtC,EAAKlN,IAAG,GACpB26C,GAAeztC,EAAKlN,IAAG,IACpB45B,GAGTya,EAAAx5C,UAAA2+C,sBAAA,SAAsBj7C,GACpB,IAAIzF,EAASK,KAAKL,OAClB,GAAIyF,EAAUgtB,MAKZ,OAJApyB,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfxF,EAAUgtB,MAAM/qB,OAEX1H,EAAO40B,oBAEhB,IAAIxgB,EAAO/T,KAAKof,gBAAgBrL,KAC5BwL,EAAaxL,EAAKwL,WACtB,OAAkB,MAAdA,GACFvf,KAAKiH,MACHnF,EAAAoF,eAAeu6C,qFACfr8C,EAAUiC,OAEL1H,EAAO40B,sBAEhBxgB,EAAKlN,IAAG,GACDlH,EAAO6yB,YAAYjT,KAG5B27B,EAAAx5C,UAAA4+C,yBAAA,SAAyBl7C,GACvB,IAAIzF,EAASK,KAAKL,OACdyyB,EAAQhtB,EAAUgtB,MACtB,GAAIA,EAKF,OAJApyB,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwnB,EAAM/qB,OAED1H,EAAO40B,oBAGhB,IAAIxgB,EAAO/T,KAAKof,gBAAgBrL,KAC5BuL,EAAgBvL,EAAKuL,cACzB,OAAqB,MAAjBA,GACFtf,KAAKiH,MACHnF,EAAAoF,eAAew6C,8EACft8C,EAAUiC,OAEL1H,EAAO40B,sBAEhBxgB,EAAKlN,IAAG,GACDlH,EAAO6yB,YAAYlT,KAG5B47B,EAAAx5C,UAAA6+C,mBAAA,SAAmBn7C,GAIjB,IAAIga,EAAkBpf,KAAKof,gBACvBgT,EAAQhT,EAAgBjD,oBACxBpI,EAAOqL,EAAgBrL,KACvB4tC,EAAqB5tC,EAAKwL,WAC1BqiC,EAAwB7tC,EAAKuL,cAE7BC,EAAa,SAAW6S,EAC5Bre,EAAKwL,WAAaA,EAClB,IAAID,EAAgB,YAAc8S,EAClCre,EAAKuL,cAAgBA,EAErB,IAAIwT,EAAO9yB,KAAKs9C,iBAAiBl4C,EAAUA,WAG3C2O,EAAKwL,WAAaoiC,EAClB5tC,EAAKuL,cAAgBsiC,EAErB,IAAIjiD,EAASK,KAAKL,OACdkiD,EAAWC,EACb9hD,KAAK69C,kBAAkBz4C,EAAUqtB,UAAW1wB,EAAA8B,KAAKG,IAAG,GACpDhE,KAAKo7C,YACLz7C,GAOF,OAFAK,KAAKof,gBAAgB/C,oBAEd1c,EAAOwyB,YAAY5S,GACxB5f,EAAOkzB,WAAWvT,EAChB3f,EAAOwyB,YAAY,MACjBW,EACAnzB,EAAO6yB,YAAYlT,EAAeuiC,IACjC5/C,EAAAyZ,WAAW4W,QACfrwB,EAAAyZ,WAAW4W,OAGhB4oB,EAAAx5C,UAAA8+C,sBAAA,SAAsBp7C,GACpB,OAAOpF,KAAKL,OAAOyzB,aAGrB8nB,EAAAx5C,UAAA++C,2BAAA,SAA2Br7C,GACzB,IAAIoqB,EAAOxvB,KAAK69C,kBAAkBz4C,EAAUgP,WAAYrS,EAAA8B,KAAKc,KAAI,GAKjE,OAJI3E,KAAKo7C,aAAer5C,EAAA8B,KAAKc,OAC3B6qB,EAAOxvB,KAAKL,OAAOgzB,WAAWnD,GAC9BxvB,KAAKo7C,YAAcr5C,EAAA8B,KAAKc,MAEnB6qB,GAGT0rB,EAAAx5C,UAAAg/C,oBAAA,SAAoBt7C,GAIlB,IAAIga,EAAkBpf,KAAKof,gBACvB2iC,EAAU3iC,EAAgBjD,oBAC1BpI,EAAOqL,EAAgBrL,KAAK0L,qBAChCL,EAAgBrL,KAAOA,EACvB,IAAIwL,EAAaxL,EAAKwL,WAAa,SAAWwiC,EAC9ChuC,EAAKwL,WAAaA,EAClB,IAAID,EAAgB,YAAcyiC,EAClChuC,EAAKuL,cAAgBA,EAGrB,IAAI3f,EAASK,KAAKL,OACdqY,EAAc5S,EAAU4S,YACxBhY,KAAKs9C,iBAA4Bl4C,EAAU4S,aAC3CrY,EAAOyzB,YACPX,EAAYrtB,EAAUqtB,UACtBzyB,KAAK69C,kBAA8Bz4C,EAAUqtB,UAAW1wB,EAAA8B,KAAKG,KAC7DrE,EAAOgvB,UAAU,GACjB4Y,EAAcniC,EAAUmiC,YACxBvnC,KAAK69C,kBAA8Bz4C,EAAUmiC,YAAaxlC,EAAA8B,KAAKc,MAC/DhF,EAAOyzB,YACPN,EAAO9yB,KAAKs9C,iBAAiBl4C,EAAUA,WAEvC48C,GAAiB58C,EAAUqtB,WAAa1e,EAAKtK,GAAE,GAC/Cw4C,GAAgB78C,EAAUqtB,WAAa1e,EAAKtK,GAAE,GAC9Cy4C,GAAmB98C,EAAUqtB,WAAa1e,EAAKtK,GAAE,IAGjDu4C,GAAejuC,EAAKlN,IAAG,GACvBo7C,GAAcluC,EAAKlN,IAAG,GACtBq7C,GAAiBnuC,EAAKlN,IAAG,IAG7BuY,EAAgBrL,KAAOA,EAAK4L,qBAC5BP,EAAgB/C,oBAEhB,IAAImT,EAAO7vB,EAAOwyB,YAAY5S,GAC5BvH,EACArY,EAAOkzB,WAAWvT,EAAe3f,EAAOwyB,YAAY,MAClDxyB,EAAOqzB,SAASP,EAAW9yB,EAAOwyB,YAAY,MAC5CW,EACAyU,EACA5nC,EAAO6yB,YAAYlT,IAClBrd,EAAAyZ,WAAW4W,QACbrwB,EAAAyZ,WAAW4W,QACbrwB,EAAAyZ,WAAW4W,MASd,OANI0vB,GAAiBC,KACnBzyB,EAAO7vB,EAAOwyB,YAAY,MACxB3C,EACA7vB,EAAO40B,uBAGJ/E,GAGT0rB,EAAAx5C,UAAAi/C,mBAAA,SAAmBv7C,GACjB,IAAIzF,EAASK,KAAKL,OACdyf,EAAkBpf,KAAKof,gBACvB6T,EAAS7tB,EAAU6tB,OACnBC,EAAU9tB,EAAU8tB,QAGpB2uB,EAAWC,EACb9hD,KAAK69C,kBAAkBz4C,EAAUqtB,UAAW1wB,EAAA8B,KAAKG,IAAG,GACpDhE,KAAKo7C,YACLz7C,GAIF,GACEK,KAAKof,gBAAgB7T,MAAM6zB,EAAA11B,YAAYiQ,QAAUylB,EAAA11B,YAAYy4C,kBAC7DtnB,yBAAyBgnB,EAAW7hD,KAAKo+C,wBAAwByD,KAAc5/C,EAAAsgB,aAAauY,OAC5FC,2BAA2B8mB,IAAa5/C,EAAAyZ,WAAWC,IACnD,CASA,OAPIqf,0BAA0B6mB,GACtB7hD,KAAKs9C,iBAAiBrqB,GACnBC,EACHlzB,KAAKs9C,iBAAiBpqB,GAEtBvzB,EAAOyzB,YAMjB,IAAIrf,EAAOqL,EAAgBrL,KAAK0L,qBAChCL,EAAgBrL,KAAOA,EACvB,IAAIquC,EAAapiD,KAAKs9C,iBAAiBrqB,GACnCovB,EAAgBtuC,EAAKtK,GAAE,GACvB64C,EAAevuC,EAAKtK,GAAE,GACtB84C,EAAkBxuC,EAAKtK,GAAE,IAC7BsK,EAAOA,EAAK4L,qBACZP,EAAgBrL,KAAOA,EAEvB,IAAIyuC,EAA6B,EAC7BC,GAAiB,EACjBC,GAAgB,EAChBC,GAAmB,EAgBvB,OAfIzvB,IACFnf,EAAOA,EAAK0L,qBACZL,EAAgBrL,KAAOA,EACvByuC,EAAcxiD,KAAKs9C,iBAAiBpqB,GACpCuvB,EAAiB1uC,EAAKtK,GAAE,GACxBi5C,EAAgB3uC,EAAKtK,GAAE,GACvBk5C,EAAmB5uC,EAAKtK,GAAE,IAC1BsK,EAAOA,EAAK4L,qBACZP,EAAgBrL,KAAOA,GAGrBsuC,GAAiBI,GAAgB1uC,EAAKlN,IAAG,GACzCy7C,GAAgBI,GAAe3uC,EAAKlN,IAAG,GACvC07C,GAAmBI,GAAkB5uC,EAAKlN,IAAG,IAE1ClH,EAAOqzB,SAAS6uB,EAAUO,EAAYI,IAG/CtH,EAAAx5C,UAAAk/C,uBAAA,SAAuBx7C,GACrB,IAAIga,EAAkBpf,KAAKof,gBACvBhL,EAA4B,EAWhC,OAVIhP,EAAU/D,QACZ+S,EAAapU,KAAK69C,kBAChBz4C,EAAU/D,MACV+d,EAAgB/M,UAAUF,aAK9BiN,EAAgBrL,KAAKlN,IAAG,GAEjB7G,KAAKL,OAAO2zB,aAAalf,IAGlC8mC,EAAAx5C,UAAAm/C,uBAAA,SAAuBz7C,GACrB,IAAIzF,EAASK,KAAKL,OACdyf,EAAkBpf,KAAKof,gBAGvB2iC,EAAU3iC,EAAgBjD,oBAG1BymC,EAAYxjC,EAAgB7D,aAAaxZ,EAAA8B,KAAKQ,KAC9Cw+C,EAAiBD,EAAU1qC,MAC3BgwB,EAAQ9iC,EAAU8iC,MAClB4a,EAAW5a,EAAMjjC,OAGjB89C,EAAS,IAAIj+C,MAAqB,EAAIg+C,GAC1CC,EAAO,GAAKpjD,EAAOoyB,eACjB8wB,EACA7iD,KAAK69C,kBAAkBz4C,EAAUqtB,UAAW1wB,EAAA8B,KAAKQ,MAMnD,IAFA,IAAI2+C,EAAa,EACbC,GAAgB,EACX5iD,EAAI,EAAGA,EAAIyiD,IAAYziD,EAAG,CACjC,IACI+xB,EADQ8V,EAAM7nC,GACA+xB,MACdA,EACF2wB,EAAOC,KAAgBrjD,EAAO6yB,YAAY,OAASnyB,EAAEiO,SAAS,IAAM,IAAMyzC,EACxEpiD,EAAO+vB,aAAaztB,EAAA2lB,SAASs7B,MAC3BvjD,EAAOswB,eAAe4yB,EAAgB5gD,EAAAyZ,WAAWC,KACjD3b,KAAK69C,kBAAkBzrB,EAAOrwB,EAAA8B,KAAKG,OAIvCi/C,EAAe5iD,EAInB+e,EAAgBnD,cAAc2mC,GAG9BG,EAAOC,GAAcrjD,EAAO6yB,aAAaywB,GAAgB,EACnD,OAASA,EAAa30C,SAAS,IAC/B,SACA,IAAMyzC,GAGZ,IAAIoB,EAAexjD,EAAOwyB,YAAY,SAAW4vB,EAASgB,EAAQ9gD,EAAAyZ,WAAW4W,MACzE0vB,GAAgB,EAChBC,GAAe,EACfC,GAAkB,EACtB,IAAS7hD,EAAI,EAAGA,EAAIyiD,IAAYziD,EAAG,CACjC,IACI6E,EADQgjC,EAAM7nC,GACK6E,WACnBk8C,EAAgBl8C,EAAWD,OAC3B6tB,EAAO,IAAIhuB,MAAqB,EAAIs8C,GACxCtuB,EAAK,GAAKqwB,EAGV,IAAIpvC,EAAOqL,EAAgBrL,KAAK0L,qBAChCL,EAAgBrL,KAAOA,EACvB,IAAIwL,EAAa,SAAWwiC,EAC5BhuC,EAAKwL,WAAaA,EAIlB,IAFA,IAAI6jC,EAAe/iD,GAAKyiD,EAAW,EAC/BO,EAAaD,EAA4B,QAAU/iD,EAAI,GAAGiO,SAAS,IAAM,IAAMyzC,EAAnDxiC,EACvBpa,EAAI,EAAGA,EAAIi8C,IAAiBj8C,EACnC2tB,EAAK3tB,EAAI,GAAKnF,KAAKs9C,iBAAiBp4C,EAAWC,IAE3Ci+C,GAAgBrvC,EAAKtK,GAAE,KAC3Bu4C,GAAgB,GAEZoB,GAAgBrvC,EAAKtK,GAAE,KAC3Bw4C,GAAe,GAEXmB,GAAgBrvC,EAAKtK,GAAE,MAC3By4C,GAAkB,GAIpB9iC,EAAgBrL,KAAOA,EAAK4L,qBAE5BwjC,EAAexjD,EAAOwyB,YAAYkxB,EAAWvwB,EAAM7wB,EAAAyZ,WAAW4W,MAKhE,GAHAlT,EAAgB/C,oBAGZ4mC,GAAgB,EAAG,CACjBlvC,EAAOqL,EAAgBrL,KACvBiuC,GAAejuC,EAAKlN,IAAG,GACvBo7C,GAAcluC,EAAKlN,IAAG,GACtBq7C,GAAiBnuC,EAAKlN,IAAG,IAE/B,OAAOs8C,GAGTjI,EAAAx5C,UAAAo/C,sBAAA,SAAsB17C,GACpB,IAAI2O,EAAO/T,KAAKof,gBAAgBrL,KAShC,OANAA,EAAKlN,IAAG,GAGRkN,EAAKlN,IAAG,GAGD7G,KAAKL,OAAO40B,qBAGrB2mB,EAAAx5C,UAAAq/C,oBAAA,SAAoB37C,GAQlB,OAJApF,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfxF,EAAUiC,OAELrH,KAAKL,OAAO40B,qBAOrB2mB,EAAAx5C,UAAAy7C,yBAAA,SAAyB/3C,EAA8Bk+C,QAAA,IAAAA,OAAA,GACrD,IAAI5sC,EAAU1W,KAAK0W,QACf0I,EAAkBpf,KAAKof,gBACvBlP,EAAe9K,EAAU8K,aACzBqzC,EAAkBrzC,EAAajL,OAGnC,GAAIq+C,GACFlkC,GAAmBpf,KAAK+7C,eACxB32C,EAAUkC,QAAUlC,EAAUkC,OAAOjC,MAAQrD,EAAAsD,SAASwE,OACrD,CAMD,IAAK,IAAIzJ,EAAI,EAAGA,EAAIkjD,IAAmBljD,EACrCL,KAAKu9C,yBAAyBrtC,EAAa7P,IAE7C,OAAO,EAIT,IAAImjD,EAAe,IAAI1+C,MACvB,IAASzE,EAAI,EAAGA,EAAIkjD,IAAmBljD,EAAG,CACxC,IAAI+G,EAAc8I,EAAa7P,GAC3BO,EAAOwG,EAAYxG,KAAK6G,KACxBuE,EAAoB,KACpBy3C,EAAsB,EAC1B,GAAIr8C,EAAY4E,KAAM,CAKpB,KAJAA,EAAO0K,EAAQpF,YACblK,EAAY4E,KACZoT,EAAgBlO,0BAEP,SACP9J,EAAY4Q,cACdyrC,EAAOzjD,KAAK69C,kBAAkBz2C,EAAY4Q,YAAahM,QAEpD,KAAI5E,EAAY4Q,YAchB,CACLhY,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACfx2C,EAAYxG,KAAKyG,MAAMoM,OAEzB,SAbA,GALAgwC,EAAOzjD,KAAK69C,kBACVz2C,EAAY4Q,YACZjW,EAAA8B,KAAKc,KAAI,GAGP3E,KAAKo7C,aAAer5C,EAAA8B,KAAKc,KAAM,CACjC3E,KAAKiH,MACHnF,EAAAoF,eAAe42C,mCACf12C,EAAYC,MAAOrH,KAAKo7C,YAAY9sC,WAAY,UAElD,SAEFtC,EAAOhM,KAAKo7C,YAQd,IAAIsI,GAAY,EAChB,GAAIt8C,EAAYqC,GAAG21B,EAAA11B,YAAYiO,OAC7B,GAAI8rC,EAEF,GADAA,EAAOzjD,KAAKo+C,wBAAwBqF,GAChC5oB,yBAAyB4oB,IAASxhD,EAAAsgB,aAAauY,MAAO,CACxD,IAAIxf,EAAQ,IAAI8jB,EAAAnnB,MAAMvB,EAAS9V,GAAO,EAAGoL,GACzC,OAAQ+uB,2BAA2B0oB,IACjC,KAAKxhD,EAAAyZ,WAAWC,IACdL,EAAQA,EAAMhE,yBAAyB0jB,0BAA0ByoB,GAAO,GACxE,MAEF,KAAKxhD,EAAAyZ,WAAWE,IACdN,EAAQA,EAAMhE,yBACZ2jB,6BAA6BwoB,GAC7BvoB,8BAA8BuoB,IAEhC,MAEF,KAAKxhD,EAAAyZ,WAAWG,IACdP,EAAQA,EAAMzD,uBAA4BsjB,0BAA0BsoB,IACpE,MAEF,KAAKxhD,EAAAyZ,WAAWI,IACdR,EAAQA,EAAMzD,uBAAuBujB,0BAA0BqoB,IAC/D,MAEF,QAME,OALA/6C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfxD,EAAYC,OAEPrH,KAAKL,OAAO40B,oBAIvB,IAAIpV,EAAeC,EAAgBrL,KAAKoL,aACxC,GAAKA,GACA,GAAIA,EAAanV,IAAIpJ,GAKxB,OAJAZ,KAAKiH,MACHnF,EAAAoF,eAAe+C,uBACf7C,EAAYxG,KAAKyG,MAAOzG,GAEnBZ,KAAKL,OAAO40B,yBANFnV,EAAgBrL,KAAKoL,aAAeA,EAAe,IAAIrc,IAQ1Eqc,EAAatY,IAAIjG,EAAM0a,GACvBooC,GAAY,OAEZ1jD,KAAKsiB,QACHxgB,EAAAoF,eAAem3C,4DACfj3C,EAAYC,YAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAey8C,wCACfv8C,EAAYC,OAIbq8C,IACCt8C,EAAYmE,MAAM6zB,EAAA11B,YAAYilC,IAAMvP,EAAA11B,YAAYiO,OAClDyH,EAAgBrL,KAAK8L,eAAejf,EAAMoL,EAAM5E,EAAYxG,MAE5Dwe,EAAgB/D,SAASrP,EAAMpL,GAE7B6iD,GACFD,EAAa34C,KAAK7K,KAAK4jD,2BAA2Bx8C,EAAYxG,KAAM6iD,KAI1E,OAAOD,EAAav+C,OACO,GAAvBu+C,EAAav+C,OACXu+C,EAAa,GACbxjD,KAAKL,OAAOwyB,YAAY,KAAMqxB,EAAcvhD,EAAAyZ,WAAW4W,MACzD,GAGN4oB,EAAAx5C,UAAAs/C,qBAAA,SAAqB57C,GACnB,OAAOpF,KAAK69C,kBAAkBz4C,EAAUgP,WAAYrS,EAAA8B,KAAKc,KAAI,GAA2B,IAG1Fu2C,EAAAx5C,UAAAu/C,sBAAA,SAAsB77C,GACpB,IAAIzF,EAASK,KAAKL,OAGdkiD,EAAWC,EACb9hD,KAAK69C,kBAAkBz4C,EAAUqtB,UAAW1wB,EAAA8B,KAAKG,IAAG,GACpDhE,KAAKo7C,YACLz7C,GAIF,GACEK,KAAKof,gBAAgB7T,MAAM6zB,EAAA11B,YAAYiQ,QAAUylB,EAAA11B,YAAYy4C,kBAC7DtnB,yBAAyBgnB,EAAW7hD,KAAKo+C,wBAAwByD,KAAc5/C,EAAAsgB,aAAauY,OAC5FC,2BAA2B8mB,IAAa5/C,EAAAyZ,WAAWC,MAE9Cqf,0BAA0B6mB,GAC7B,OAAOliD,EAAOyzB,YAKlB,IAAIhU,EAAkBpf,KAAKof,gBACvBgT,EAAQhT,EAAgBjD,oBACxBpI,EAAOqL,EAAgBrL,KAAK0L,qBAChCL,EAAgBrL,KAAOA,EACvB,IAAIwL,EAAa,SAAW6S,EAC5Bre,EAAKwL,WAAaA,EAClB,IAAID,EAAgB,YAAc8S,EAClCre,EAAKuL,cAAgBA,EAErB,IAAIwT,EAAO9yB,KAAKs9C,iBAAiBl4C,EAAUA,WAK3Cga,EAAgBrL,KAAOA,EAAK4L,qBAC5BP,EAAgB/C,oBAEhB,IAAImT,EAAO7vB,EAAOwyB,YAAY5S,GAC5B5f,EAAOkzB,WAAWvT,EAChB3f,EAAOqzB,SAAS6uB,EAAUliD,EAAOwyB,YAAY,MAC3CW,EACAnzB,EAAO6yB,YAAYlT,IAClBrd,EAAAyZ,WAAW4W,SAEfrwB,EAAAyZ,WAAW4W,MASd,OAAO9C,GAUT0rB,EAAAx5C,UAAAy8C,sBAAA,SACEz3C,EACAm9C,EACAC,GAEAp7C,OAAOhC,EAAQ+C,GAAG21B,EAAA11B,YAAYkO,UAC9B,IAAI5L,EAAOtF,EAAQsF,KACnB,QACG83C,GACD93C,EAAKvC,GAAE,IACPo6C,EAAep6C,GAAE,IACjBuC,EAAKosC,KAAOyL,EAAezL,MACtBp4C,KAAKo7C,YAAcyI,GAAgBx+C,MACnCrF,KAAKo7C,YAAcpvC,GAAM3G,MAE9B,OACA,OACE,IAAI0+C,EAAQ/3C,EAAKwsC,yBAAyBz2C,EAAA8B,KAAKG,KAC/C,OAAOhE,KAAKL,OAAOgvB,UACQ,GAAzBjoB,EAAQ2Q,kBACJggB,QAAQ3wB,EAAQ+Q,uBAAyBssC,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIC,EAAOt9C,EAAQsF,KAAKysC,wBAAwB12C,EAAA8B,KAAKG,KACrD,OAAOhE,KAAKL,OAAOgvB,UACQ,GAAzBjoB,EAAQ2Q,kBACJggB,QAAQ3wB,EAAQ+Q,sBAAwBusC,EACxC,GAGR,OACA,OACE,OAAOhkD,KAAKL,OAAOgvB,UACQ,GAAzBjoB,EAAQ2Q,kBACJggB,QAAQ3wB,EAAQ+Q,sBAChB,GAGR,OACA,OACE,IAAK/Q,EAAQgQ,QAAQ9S,QAAQy4C,SAC3B,OAAOr8C,KAAKL,OAAOgvB,UACQ,GAAzBjoB,EAAQ2Q,kBACJggB,QAAQ3wB,EAAQ+Q,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzB/Q,EAAQ2Q,kBACXrX,KAAKL,OAAOmvB,UACVuI,QAAQ3wB,EAAQ+Q,sBAChB6f,SAAS5wB,EAAQ+Q,uBAEnBzX,KAAKL,OAAOmvB,UAAU,GAE5B,QACE,OAAO9uB,KAAKL,OAAOuvB,UAAgCxoB,EAASoR,oBAE9D,QACE,OAAO9X,KAAKL,OAAOyvB,UAAgC1oB,EAASoR,oBAE9D,QAME,OALApP,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACflE,EAAQU,YAAYC,OAEfrH,KAAKL,OAAO40B,sBAKzB2mB,EAAAx5C,UAAAm8C,kBAAA,SACEzpC,EACAyvC,EACAI,EACAC,GAIA,IAAI10B,EACJ,YANA,IAAAy0B,MAAA,QACA,IAAAC,OAAA,GAEAlkD,KAAKo7C,YAAcyI,EAGXzvC,EAAW/O,MACjB,KAAKrD,EAAAsD,SAASiQ,UACZia,EAAOxvB,KAAKmkD,2BAAgD/vC,EAAYyvC,GACxE,MAEF,KAAK7hD,EAAAsD,SAASoQ,OACZ8Z,EAAOxvB,KAAKokD,wBAA0ChwC,EAAYyvC,EAAgBK,GAClF,MAEF,KAAKliD,EAAAsD,SAAS6Q,KACZqZ,EAAOxvB,KAAKqkD,sBAAsCjwC,EAAYyvC,GAC9D,MAEF,KAAK7hD,EAAAsD,SAAS6kC,MACZ3a,EAAOxvB,KAAKskD,uBAAwClwC,EAAYyvC,GAChE,MAEF,KAAK7hD,EAAAsD,SAAS4Q,cACZsZ,EAAOxvB,KAAKukD,+BAAwDnwC,EAAYyvC,GAChF,MAEF,KAAK7hD,EAAAsD,SAASwU,SACZ0V,EAAOxvB,KAAKwkD,0BAA8CpwC,EAAYyvC,GACtE,MAEF,KAAK7hD,EAAAsD,SAAS0Q,WACd,KAAKhU,EAAAsD,SAASqlC,MACd,KAAK3oC,EAAAsD,SAASilC,KACd,KAAKvoC,EAAAsD,SAASqQ,KACd,KAAK3T,EAAAsD,SAASolC,KACZlb,EAAOxvB,KAAKykD,4BACYrwC,EACtByvC,EACc,GAAdI,GAEF,MAEF,KAAKjiD,EAAAsD,SAAS+H,QACZmiB,EAAOxvB,KAAK0kD,yBAA4CtwC,EAAYyvC,GACpE,MAEF,KAAK7hD,EAAAsD,SAASglC,IACZ9a,EAAOxvB,KAAK2kD,qBAAoCvwC,EAAYyvC,GAC5D,MAEF,KAAK7hD,EAAAsD,SAASgQ,cACZka,EAAOxvB,KAAK4kD,+BACexwC,EACzByvC,EACAK,GAEF,MAEF,KAAKliD,EAAAsD,SAAS2Q,eACZuZ,EAAOxvB,KAAK6kD,gCACgBzwC,EAC1ByvC,EACc,GAAdI,GAEF,MAEF,KAAKjiD,EAAAsD,SAASmlC,QACZjb,EAAOxvB,KAAK8kD,yBAA4C1wC,EAAYyvC,GACpE,MAEF,KAAK7hD,EAAAsD,SAASulC,aACZrb,EAAOxvB,KAAK+kD,8BAAsD3wC,EAAYyvC,GAC9E,MAEF,KAAK7hD,EAAAsD,SAASwlC,YACZtb,EAAOxvB,KAAKglD,6BAAoD5wC,EAAYyvC,EAAgBK,GAC5F,MAEF,QACEx7C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAOxvB,KAAKL,OAAO40B,oBAKvB,IAAI6mB,EAAcp7C,KAAKo7C,YASvB,OARkB,GAAd6I,GAAyC7I,GAAeyI,IAC1Dr0B,EAAOxvB,KAAKilD,kBAAkBz1B,EAAM4rB,EAAayI,EAAgBI,EAAgB7vC,GACjFpU,KAAKo7C,YAAcyI,GAGjB7jD,KAAK4D,QAAQ2Y,WACf2kC,EAAiB1xB,EAAMpb,EAAW/M,MAAOrH,KAAKL,OAAQK,KAAKof,iBAEtDoQ,GAGT0rB,EAAAx5C,UAAAwjD,4BAAA,SACE9wC,EACAyvC,EACAK,GAEA,YAFA,IAAAA,OAAA,GAEOlkD,KAAK69C,kBACVzpC,EACAyvC,GAAkB9hD,EAAA8B,KAAKc,KACnB5C,EAAA8B,KAAKG,IACL6/C,EAAc,EAElBK,IAIJhJ,EAAAx5C,UAAAyjD,qBAAA,SACE/wC,EACAyvC,EACAI,GAEA,YAFA,IAAAA,MAAA,GAEOjkD,KAAKo+C,wBAAwBp+C,KAAK69C,kBAAkBzpC,EAAYyvC,EAAgBI,KAGzF/I,EAAAx5C,UAAA08C,wBAAA,SAAwB5uB,GACtB,IAAI7vB,EAASK,KAAKL,OACdqM,EAAOhM,KAAKo7C,YACZ2C,EAAa/xC,EAAKyP,eAClBygC,EAAUv8C,EAAO8uB,2BAA2BsvB,EAAY,MAEvD7B,IACHA,EAAUv8C,EAAOwuB,gBAAgBniB,EAAK+Q,oBAAqBghC,EAAY,OAGzE,IAAI9B,EAAUt8C,EAAOi1B,YAAY,eAAgBsnB,EAAS,KAAM1sB,GAChE7vB,EAAOi5B,WAAY,cAAgBqjB,GACnC,IAAIlgC,EAAMqpC,yBAAyBnJ,GAMnC,OALAt8C,EAAOo1B,eAAe,gBAKfhZ,GAGTm/B,EAAAx5C,UAAAujD,kBAAA,SACEz1B,EACA61B,EACA7vC,EACAyuC,EACAxqC,GAEA/Q,OAAqB,GAAdu7C,GACP,IAAItkD,EAASK,KAAKL,OAGlB,OAAiB,IAAb0lD,EAAShgD,MACXqD,OAAkB,IAAX8M,EAAOnQ,MACdrF,KAAKiH,MACHnF,EAAAoF,eAAe42C,mCACfrkC,EAAWpS,MAAOg+C,EAAS/2C,WAAYkH,EAAOlH,YAEzC3O,EAAO40B,qBAID,IAAX/e,EAAOnQ,KACF1F,EAAOgzB,WAAWnD,IAGT,GAAdy0B,GAA8CoB,EAASxmC,eAAerJ,IACxExV,KAAKiH,MACHnF,EAAAoF,eAAeo+C,sDACf7rC,EAAWpS,MAAOg+C,EAAS/2C,WAAYkH,EAAOlH,YAK9C+2C,EAAS57C,GAAE,GAGT+L,EAAO/L,GAAE,GACM,IAAb47C,EAAShgD,KAGI,IAAXmQ,EAAOnQ,OACTmqB,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ2gC,WAAY/1B,IAM5B,IAAXha,EAAOnQ,OAChBmqB,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ4gC,UAAWh2B,IAMtCha,EAAO/L,GAAE,GAGD,IAAb47C,EAAShgD,KACPmQ,EAAO/L,GAAE,GACP+L,EAAO/L,GAAE,IACX+lB,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ6gC,cAAej2B,IAEjDA,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ8gC,cAAel2B,GAC7Cha,EAAO/L,GAAE,MACX+lB,EAAOm2B,EAAqBn2B,EAAMha,EAAQ7V,KAI1C6V,EAAO/L,GAAE,IACX+lB,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQghC,cAAep2B,IAEjDA,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQihC,cAAer2B,GAC7Cha,EAAO/L,GAAE,MACX+lB,EAAOm2B,EAAqBn2B,EAAMha,EAAQ7V,KAO5C6V,EAAO/L,GAAE,GACP+L,EAAO/L,GAAE,IACX+lB,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQkhC,cAAet2B,IAEjDA,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQmhC,cAAev2B,GAC7Cha,EAAO/L,GAAE,MACX+lB,EAAOm2B,EAAqBn2B,EAAMha,EAAQ7V,KAI1C6V,EAAO/L,GAAE,IACX+lB,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQohC,cAAex2B,IAEjDA,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQqhC,cAAez2B,GAC7Cha,EAAO/L,GAAE,MACX+lB,EAAOm2B,EAAqBn2B,EAAMha,EAAQ7V,MAQlD+I,OAAmB,GAAZ8M,EAAOmB,MAAyB,sBACvC6Y,EAAO7vB,EAAOgzB,WAAWnD,IAIlB61B,EAAS57C,GAAE,IAAuB+L,EAAO/L,GAAE,GAKhD+lB,EAFW,IAAXha,EAAOnQ,KACLggD,EAAS57C,GAAE,IACN9J,EAAO2vB,YACZ+1B,EAAS57C,GAAE,GACPxH,EAAA2iB,QAAQshC,gBACRjkD,EAAA2iB,QAAQuhC,gBACZ32B,GAGK7vB,EAAO2vB,YACZ+1B,EAAS57C,GAAE,GACPxH,EAAA2iB,QAAQwhC,gBACRnkD,EAAA2iB,QAAQyhC,gBACZ72B,GAMA61B,EAAS57C,GAAE,IACN9J,EAAO2vB,YACZ+1B,EAAS57C,GAAE,GACPxH,EAAA2iB,QAAQ0hC,gBACRrkD,EAAA2iB,QAAQ2hC,gBACZ/2B,GAGK7vB,EAAO2vB,YACZ+1B,EAAS57C,GAAE,GACPxH,EAAA2iB,QAAQ4hC,gBACRvkD,EAAA2iB,QAAQ6hC,gBACZj3B,GAOF61B,EAAS57C,GAAE,IAGR+L,EAAO/L,GAAE,MACZ+lB,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ8hC,QAASl3B,GACvCha,EAAO/L,GAAE,MACX+lB,EAAOm2B,EAAqBn2B,EAAMha,EAAQ7V,KAKrC6V,EAAO/L,GAAE,IAClB+lB,EAAO7vB,EAAO2vB,YAAY9Z,EAAO/L,GAAE,GAAqBxH,EAAA2iB,QAAQ+hC,UAAY1kD,EAAA2iB,QAAQgiC,UAAWp3B,GAI/Fha,EAAO/L,GAAE,MAEP47C,EAASjN,KAAO5iC,EAAO4iC,MAErBiN,EAASjN,MAAQ5iC,EAAO4iC,MACxBiN,EAAS57C,GAAE,IAAsB+L,EAAO/L,GAAE,MAI9C+lB,EAAOm2B,EAAqBn2B,EAAMha,EAAQ7V,IAM9CK,KAAKo7C,YAAc5lC,EACZga,IAGT0rB,EAAAx5C,UAAAyiD,2BAAA,SAA2B/vC,EAAiCyvC,GAC1D,IAAIruC,EAASxV,KAAK0W,QAAQpF,YACxB8C,EAAWoB,OACXxV,KAAKof,gBAAgBlO,yBAEvB,OAAKsE,EACExV,KAAK69C,kBAAkBzpC,EAAWA,WAAYoB,EAAM,GADvCxV,KAAKL,OAAO40B,qBAIlC2mB,EAAAx5C,UAAA0iD,wBAAA,SACEhwC,EACAyvC,EACAK,QAAA,IAAAA,OAAA,GAEA,IAII2C,EACAC,EACAC,EACAC,EACAC,EAEApF,EACAryB,EAXA7vB,EAASK,KAAKL,OACdgwB,EAAOvb,EAAWub,KAClBC,EAAQxb,EAAWwb,MAUnBs3B,GAAW,EACXC,GAAoB,EACpBvE,EAA0B,KAE9B,OAAQxuC,EAAWutB,UACjB,KAAKtC,EAAAC,MAAMsQ,SAKT,GAJAiX,EAAW7mD,KAAKklD,4BAA4Bv1B,EAAMk0B,GAClDiD,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BAA4Bt1B,EAAOk3B,GACpDE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBAEhB,OAVEsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GASxFq3B,EAAW5hD,MACjB,OACA,OACA,OACEmqB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASy/B,MAAOR,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS0/B,MAAOT,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS0/B,MACTrlD,EAAA2lB,SAASy/B,MACbR,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS2/B,MAAOV,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS4/B,MACTvlD,EAAA2lB,SAAS2/B,MACbV,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS4/B,MAAOX,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS6/B,MAAOZ,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS8/B,MAAOb,EAAUE,GACrD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlBv0B,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACxB,MAEF,KAAK66B,EAAAC,MAAMuQ,YAKT,GAJAgX,EAAW7mD,KAAKklD,4BAA4Bv1B,EAAMk0B,GAClDiD,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BAA4Bt1B,EAAOk3B,GACpDE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBAEhB,OAVEsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GASxFq3B,EAAW5hD,MACjB,OACA,OACA,OACEmqB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+/B,MAAOd,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASggC,MACT3lD,EAAA2lB,SAAS+/B,MACbd,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASggC,MAAOf,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASigC,MAAOhB,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASkgC,MACT7lD,EAAA2lB,SAASigC,MACbhB,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASkgC,MAAOjB,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASmgC,MAAOlB,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASogC,MAAOnB,EAAUE,GACrD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlBv0B,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACxB,MAEF,KAAK66B,EAAAC,MAAMwQ,gBAKT,GAJA+W,EAAW7mD,KAAKklD,4BAA4Bv1B,EAAMk0B,GAClDiD,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BAA4Bt1B,EAAOk3B,GACpDE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,KAAMy/C,EAASx4C,WAAY04C,EAAU14C,YAEzDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBAEhB,OAVEsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GASxFq3B,EAAW5hD,MACjB,OACA,OACA,OACEmqB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASqgC,MAAOpB,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASsgC,MACTjmD,EAAA2lB,SAASqgC,MACbpB,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASsgC,MAAOrB,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASugC,MAAOtB,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASwgC,MACTnmD,EAAA2lB,SAASugC,MACbtB,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASwgC,MAAOvB,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASygC,MAAOxB,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS0gC,MAAOzB,EAAUE,GACrD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlBv0B,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACxB,MAEF,KAAK66B,EAAAC,MAAMyQ,mBAKT,GAJA8W,EAAW7mD,KAAKklD,4BAA4Bv1B,EAAMk0B,GAClDiD,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BAA4Bt1B,EAAOk3B,GACpDE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,KAAMy/C,EAASx4C,WAAY04C,EAAU14C,YAEzDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBAEhB,OAVEsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GASxFq3B,EAAW5hD,MACjB,OACA,OACA,OACEmqB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS2gC,MAAO1B,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS4gC,MACTvmD,EAAA2lB,SAAS2gC,MACb1B,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS4gC,MAAO3B,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS6gC,MAAO5B,EAAUE,GACrD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS8gC,MACTzmD,EAAA2lB,SAAS6gC,MACb5B,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS8gC,MAAO7B,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+gC,MAAO9B,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASghC,MAAO/B,EAAUE,GACrD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlBv0B,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACxB,MAGF,KAAK66B,EAAAC,MAAM4Q,qBAEX,KAAK7Q,EAAAC,MAAM0Q,cAUT,GAJA6W,EAAW7mD,KAAKklD,4BAA4Bv1B,EAAMk0B,GAClDiD,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BAA4Bt1B,EAAOk3B,GACpDE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAOg4B,EAAAqQ,sBAAsBt7B,EAAWutB,UAAWmlB,EAASx4C,WAAY04C,EAAU14C,YAE/FtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBAEhB,OAVEsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GASxFq3B,EAAW5hD,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmqB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASs7B,MAAO2D,EAAUE,GACrD,MAEF,OACE,GAAI/mD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUyM,UACjB,CACxBqhB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3Er+C,OAAO1I,KAAKo7C,aAAer5C,EAAA8B,KAAKW,MAChC,MAKN,OACEgrB,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASmhC,MACT9mD,EAAA2lB,SAASs7B,MACb2D,EACAE,GAEF,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASmhC,MAAOlC,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASohC,MAAOnC,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASqhC,MAAOpC,EAAUE,GACrD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlBv0B,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACxB,MAEF,KAAK66B,EAAAC,MAAM6Q,0BAEX,KAAK9Q,EAAAC,MAAM2Q,mBAKT,GAJA4W,EAAW7mD,KAAKklD,4BAA4Bv1B,EAAMk0B,GAClDiD,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BAA4Bt1B,EAAOk3B,GACpDE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAOg4B,EAAAqQ,sBAAsBt7B,EAAWutB,UAAWmlB,EAASx4C,WAAY04C,EAAU14C,YAE/FtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBAEhB,OAVEsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GASxFq3B,EAAW5hD,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmqB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASshC,MAAOrC,EAAUE,GACrD,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASuhC,MACTlnD,EAAA2lB,SAASshC,MACbrC,EACAE,GAEF,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASuhC,MAAOtC,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASwhC,MAAOvC,EAAUE,GACrD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASyhC,MAAOxC,EAAUE,GACrD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAGlBv0B,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACxB,MAEF,KAAK66B,EAAAC,MAAMgS,OACT,OAAOtxC,KAAKspD,kBAAkB35B,EAAMC,EAAOi0B,GAE7C,KAAKxkB,EAAAC,MAAMiS,YAAa2V,GAAW,EACnC,KAAK7nB,EAAAC,MAAM8Q,KAMT,GALAyW,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEEqD,EACFH,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,OAEG,CAQL,GAPA0L,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BACft1B,EACAk3B,GACA,GAEFE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBARdsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GAUlG,OAAQ5vB,KAAKo7C,YAAY/1C,MACvB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,OACA,OACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+2B,OAAQkI,EAAUE,GACtD,MAEF,OACE,GAAI/mD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUiM,UACjB,CACxB6hB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3E,MAKN,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS2hC,OACTtnD,EAAA2lB,SAAS+2B,OACbkI,EACAE,GAEF,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS2hC,OAAQ1C,EAAUE,GACtD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS4hC,OAAQ3C,EAAUE,GACtD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS6hC,OAAQ5C,EAAUE,GACtD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAMkS,aAAc0V,GAAW,EACpC,KAAK7nB,EAAAC,MAAM+Q,MAMT,GALAwW,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEEqD,EACFH,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,OAEG,CAQL,GAPA0L,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BACft1B,EACAk3B,GACA,GAEFE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBARdsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GAUlG,OAAQ5vB,KAAKo7C,YAAY/1C,MACvB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,OACA,OACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS8hC,OAAQ7C,EAAUE,GACtD,MAEF,OACE,GAAI/mD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUkM,YACjB,CACxB4hB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3E,MAKN,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS+hC,OACT1nD,EAAA2lB,SAAS8hC,OACb7C,EACAE,GAEF,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+hC,OAAQ9C,EAAUE,GACtD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASgiC,OAAQ/C,EAAUE,GACtD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASiiC,OAAQhD,EAAUE,GACtD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAMmS,gBAAiByV,GAAW,EACvC,KAAK7nB,EAAAC,MAAMiR,SAMT,GALAsW,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEEqD,EACFH,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,OAEG,CAQL,GAPA0L,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BACft1B,EACAk3B,GACA,GAEFE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBARdsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GAUlG,OAAQ5vB,KAAKo7C,YAAY/1C,MACvB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,OACA,OACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASkiC,OAAQjD,EAAUE,GACtD,MAEF,OACE,GAAI/mD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUmM,YACjB,CACxB2hB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3E,MAKN,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASmiC,OACT9nD,EAAA2lB,SAASkiC,OACbjD,EACAE,GAEF,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASmiC,OAAQlD,EAAUE,GACtD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASoiC,OAAQnD,EAAUE,GACtD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASqiC,OAAQpD,EAAUE,GACtD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAMqS,aAAcuV,GAAW,EACpC,KAAK7nB,EAAAC,MAAMkR,MAMT,GALAqW,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEEqD,EACFH,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,OAEG,CAQL,GAPA0L,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BACft1B,EACAk3B,GACA,GAEFE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBARdsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GAUlG,OAAQ5vB,KAAKo7C,YAAY/1C,MACvB,OACA,OAAmB8hD,GAAoB,EACvC,OACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASsiC,OAAQrD,EAAUE,GACtD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASuiC,OACTloD,EAAA2lB,SAASsiC,OACbrD,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASuiC,OAAQtD,EAAUE,GACtD,MAEF,OACA,OACA,QAAoBI,GAAoB,EACxC,OACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASwiC,OAAQvD,EAAUE,GACtD,MAEF,OACE,GAAI/mD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUoM,UACjB,CACxB0hB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3E,MAIJv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASyiC,OACTpoD,EAAA2lB,SAASwiC,OACbvD,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASyiC,OAAQxD,EAAUE,GACtD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS0iC,OAAQzD,EAAUE,GACtD,MAEF,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS2iC,OAAQ1D,EAAUE,GACtD,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAMsS,eAAgBsV,GAAW,EACtC,KAAK7nB,EAAAC,MAAMmR,QAMT,GALAoW,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEEqD,EACFH,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,OAEG,CAQL,GAPA0L,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BACft1B,EACAk3B,GACA,GAEFE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBARdsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GAUlG,OAAQ5vB,KAAKo7C,YAAY/1C,MACvB,OACA,OACA,OACEmqB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS4iC,OAAQ3D,EAAUE,GACtD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS6iC,OACTxoD,EAAA2lB,SAAS4iC,OACb3D,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS6iC,OAAQ5D,EAAUE,GACtD,MAEF,OACA,OACA,OACA,QACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS8iC,OAAQ7D,EAAUE,GACtD,MAEF,OACE,GAAI/mD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUqM,cACjB,CACxByhB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3E,MAIJv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS+iC,OACT1oD,EAAA2lB,SAAS8iC,OACb7D,EACAE,GAEF,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+iC,OAAQ9D,EAAUE,GACtD,MAEF,QAEE,KADI6D,EAAgB5qD,KAAK0W,QAAQtT,eAAejC,IAAI,UAChC,CAClBnB,KAAKiH,MACHnF,EAAAoF,eAAeqB,mBACf6L,EAAW/M,MAAO,QAEpBmoB,EAAO7vB,EAAO40B,oBACd,MAEF7rB,OAAOkiD,EAAcvlD,MAAQ+5B,EAAAt2B,YAAYsM,oBAKvCoa,GAJEq7B,EAAmCD,EAAe7+C,YAChC/L,KAAK8+C,gBAAgB+L,GAGlC7qD,KAAK8qD,eAAeD,GAAgBhE,EAAUE,IAF9CpnD,EAAO40B,oBAIhB,MAEF,QACE,IAAIq2B,EAUAC,EATJ,KADID,EAAgB5qD,KAAK0W,QAAQtT,eAAejC,IAAI,SAChC,CAClBnB,KAAKiH,MACHnF,EAAAoF,eAAeqB,mBACf6L,EAAW/M,MAAO,QAEpBmoB,EAAO7vB,EAAO40B,oBACd,MAEF7rB,OAAOkiD,EAAcvlD,MAAQ+5B,EAAAt2B,YAAYsM,oBAKvCoa,GAJEq7B,EAAmCD,EAAe7+C,YAChC/L,KAAK8+C,gBAAgB+L,GAGlC7qD,KAAK8qD,eAAeD,GAAgBhE,EAAUE,IAF9CpnD,EAAO40B,oBAIhB,MAEF,QACE7rB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAMuS,yBAA0BqV,GAAW,EAChD,KAAK7nB,EAAAC,MAAMsR,kBAYT,OAXAiW,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEFkD,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,GAEMp7C,KAAKo7C,YAAY/1C,MACvB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASmjC,OAAQlE,EAAUE,GACtD,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASojC,OAAQnE,EAAUE,GACtD,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASojC,OACT/oD,EAAA2lB,SAASmjC,OACblE,EACAE,GAEF,MAEF,QACA,QAKE,OAJA/mD,KAAKiH,MACHnF,EAAAoF,eAAe+jD,2CACf72C,EAAW/M,MAAOg4B,EAAAqQ,sBAAsBt7B,EAAWutB,UAAW3hC,KAAKo7C,YAAY9sC,YAE1E3O,EAAO40B,oBAEhB,QACE7rB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAMwS,+BAAgCoV,GAAW,EACtD,KAAK7nB,EAAAC,MAAMuR,wBAYT,OAXAgW,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEFkD,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,GAEMp7C,KAAKo7C,YAAY/1C,MACvB,QAEEmqB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASsjC,OAAQrE,EAAUE,GACtD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASujC,OAAQtE,EAAUE,GACtD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASujC,OACTlpD,EAAA2lB,SAASsjC,OACbrE,EACAE,GAEF,MAEF,OACA,OACA,QACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASwjC,OAAQvE,EAAUE,GACtD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASyjC,OAAQxE,EAAUE,GACtD,MAEF,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASyjC,OACTppD,EAAA2lB,SAASwjC,OACbvE,EACAE,GAEF,MAEF,QACA,QAKE,OAJA/mD,KAAKiH,MACHnF,EAAAoF,eAAe+jD,2CACf72C,EAAW/M,MAAOg4B,EAAAqQ,sBAAsBt7B,EAAWutB,UAAW3hC,KAAKo7C,YAAY9sC,YAE1E3O,EAAO40B,oBAEhB,QACE7rB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAMyS,2CAA4CmV,GAAW,EAClE,KAAK7nB,EAAAC,MAAMwR,oCAYT,OAXA+V,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEFkD,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,GAEMp7C,KAAKo7C,YAAY/1C,MACvB,OACA,OAAmB8hD,GAAoB,EACvC,QAEE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASwjC,OAAQvE,EAAUE,GACtD,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASyjC,OAAQxE,EAAUE,GACtD,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAASyjC,OACTppD,EAAA2lB,SAASwjC,OACbvE,EACAE,GAEF,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAM0S,iBAAkBkV,GAAW,EACxC,KAAK7nB,EAAAC,MAAMyR,UAMT,GALA8V,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEEqD,EACFH,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,OAEG,CAQL,GAPA0L,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BACft1B,EACAk3B,GACA,GAEFE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBARdsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GAUlG,OAAQ5vB,KAAKo7C,YAAY/1C,MACvB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS0jC,OAAQzE,EAAUE,GACtD,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS2jC,OAAQ1E,EAAUE,GACtD,MAEF,OACE,GAAI/mD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUsM,cACjB,CACxBwhB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3E,MAKN,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS2jC,OACTtpD,EAAA2lB,SAAS0jC,OACbzE,EACAE,GAEF,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAM2S,WAAYiV,GAAW,EAClC,KAAK7nB,EAAAC,MAAM0R,IAMT,GALA6V,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEEqD,EACFH,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,OAEG,CAQL,GAPA0L,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BACft1B,EACAk3B,GACA,GAEFE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBARdsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GAUlG,OAAQ5vB,KAAKo7C,YAAY/1C,MACvB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS4jC,MAAO3E,EAAUE,GACrD,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS6jC,MAAO5E,EAAUE,GACrD,MAEF,OACE,GAAI/mD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUuM,aACjB,CACxBuhB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3E,MAKN,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS6jC,MACTxpD,EAAA2lB,SAAS4jC,MACb3E,EACAE,GAEF,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAEF,KAAK8K,EAAAC,MAAM4S,aAAcgV,GAAW,EACpC,KAAK7nB,EAAAC,MAAM2R,MAMT,GALA4V,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GACA,GAEEqD,EACFH,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,OAEG,CAQL,GAPA0L,EAAW9mD,KAAKo7C,YAChB2L,EAAY/mD,KAAKklD,4BACft1B,EACAk3B,GACA,GAEFE,EAAYhnD,KAAKo7C,cACb6L,EAAallD,EAAA8B,KAAKk1C,iBAAiB+N,EAAUE,GAAW,IAS1D,OALAhnD,KAAKiH,MACHnF,EAAAoF,eAAekgD,8CACfhzC,EAAW/M,MAAO,IAAKy/C,EAASx4C,WAAY04C,EAAU14C,YAExDtO,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,oBARdsyB,EAAW7mD,KAAKilD,kBAAkB4B,EAAUC,EAAUG,EAAU,EAA2Bt3B,GAC3Fo3B,EAAY/mD,KAAKilD,kBAAkB8B,EAAWC,EAAWC,EAAU,EAA2Br3B,GAUlG,OAAQ5vB,KAAKo7C,YAAY/1C,MACvB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS8jC,OAAQ7E,EAAUE,GACtD,MAEF,OACA,OACEv3B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+jC,OAAQ9E,EAAUE,GACtD,MAEF,OAEI,IAAI7tC,EACA2vC,EAFN,GAAI7oD,KAAKo7C,YAAY3xC,GAAE,KAGrB,GAAoB,OADhBo/C,GADA3vC,EAAgBxQ,OAAO1I,KAAKo7C,YAAYzmC,iBACXjT,UAAUwM,cACjB,CACxBshB,EAAOxvB,KAAK8oD,wBAAwB5vC,EAAe2vC,EAAchC,EAAUE,GAC3E,MAKN,OACEv3B,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS+jC,OACT1pD,EAAA2lB,SAAS8jC,OACb7E,EACAE,GAEF,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAO7vB,EAAO40B,oBAIlB,MAKF,KAAK8K,EAAAC,MAAM8R,oBACTyV,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GAEFkD,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,IAIF5rB,EAAO7vB,EAAO46B,gBAAgBssB,GAAU,EAAM,MAI5CjE,EAAY5iD,KAAKof,gBAAgBlD,oBAAoBlc,KAAKo7C,aAC1DyL,EAAWlnD,EAAOwwB,eAAeyyB,EAAU1qC,MAAO2uC,IAGpDM,EAAoBnnD,KAAKo7C,YAAY3xC,GAAG,IACxCo4C,EAAWC,EAAc+E,EAAU7mD,KAAKo7C,YAAaz7C,GAInD6vB,EADEA,EACK7vB,EAAOqzB,SACZ6uB,EACAkF,EACAv3B,GAMK7vB,EAAOqzB,SACZ6uB,EACAkF,EACApnD,EAAOswB,eACLvnB,OAAOk6C,GAAW1qC,MAClBlY,KAAKo7C,YAAY3/B,iBAIvB,MAEF,KAAK4jB,EAAAC,MAAM+R,QACTwV,EAAW7mD,KAAKklD,4BACdv1B,EACAk0B,GAEFkD,EAAY/mD,KAAK69C,kBACfjuB,EACA5vB,KAAKo7C,YAAW,GAEhB,IAIF5rB,EAAOxvB,KAAKL,OAAO46B,gBAAgBssB,GAAU,EAAM,MAIjDjE,EAAY5iD,KAAKof,gBAAgBlD,oBAAoBlc,KAAKo7C,aAC1DyL,EAAWlnD,EAAOwwB,eAAeyyB,EAAU1qC,MAAO2uC,IAGpDM,EAAoBnnD,KAAKo7C,YAAY3xC,GAAG,IACxCo4C,EAAWC,EAAc+E,EAAU7mD,KAAKo7C,YAAaz7C,GAInD6vB,EADEA,EACKxvB,KAAKL,OAAOqzB,SACjB6uB,EACAryB,EACAu3B,GAMKpnD,EAAOqzB,SACZ6uB,EACAliD,EAAOswB,eACLvnB,OAAOk6C,GAAW1qC,MAClBlY,KAAKo7C,YAAY3/B,gBAEnBsrC,GAGJ,MAEF,QACEr+C,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbmoB,EAAOxvB,KAAKL,OAAO40B,oBAQvB,OAJI4yB,GAAqBjD,IACvBx7C,OAAO1I,KAAKo7C,YAAY3xC,GAAG,KAC3B+lB,EAAOm2B,EAAqBn2B,EAAMxvB,KAAKo7C,YAAaz7C,IAE/CunD,EACHlnD,KAAK4jD,2BAA2Bj0B,EAAMH,EAAMq0B,GAAkB9hD,EAAA8B,KAAKc,MACnE6qB,GAGN0rB,EAAAx5C,UAAAonD,wBAAA,SACE5vC,EACA2vC,EACAhC,EACAE,GAEA,IAAI96C,EAAiBiN,EAAcxX,UAC/BkqD,EAAoBljD,OAAOA,OAAOuD,EAAenB,SAAS3J,IAAI0nD,IAClEngD,OAAOkjD,EAAkBvmD,MAAQ+5B,EAAAt2B,YAAYsM,oBAC7C,IAAIy2C,EAAuCD,EAAmB7/C,UAC9D,OAAK8/C,EACE7rD,KAAK8qD,eAAee,GAAoBhF,EAAUE,IAD3B/mD,KAAKL,OAAO40B,qBAI5C2mB,EAAAx5C,UAAA4nD,kBAAA,SAAkBl1C,EAAwB03C,EAA6BjI,GACrE,IAAIzkC,EAAkBpf,KAAKof,gBACvBxW,EAAW5I,KAAK0W,QAAQrC,kBAAkBD,EAAYgL,GAC1D,IAAKxW,EAAU,OAAO5I,KAAKL,OAAO40B,oBAGlC,IACIw3B,EADArlD,EAAUkC,EAASlC,QAEvB,OAAQA,EAAQrB,MACd,KAAK+5B,EAAAt2B,YAAYa,OACf,IAAK3J,KAAKw9C,cAAsB92C,GAC9B,OAAO1G,KAAKL,OAAO40B,oBAErB7rB,OAAgBhC,EAASsF,MAAQjK,EAAA8B,KAAKc,KAAM,0BAG9C,KAAKy6B,EAAAt2B,YAAY2L,MACjB,KAAK2qB,EAAAt2B,YAAY4L,MACfq3C,EAAoCrlD,EAASsF,KAC7C,MAEF,KAAKozB,EAAAt2B,YAAY8F,SACf,IAAIlN,EAAuBgF,EAASoI,gBACpC,GAAIpN,EAAW,CACb,IAAIoK,EAAWpK,EAAUqK,UACzB,IAAKD,EAAU,OAAO9L,KAAKL,OAAO40B,oBAClC7rB,OAAmD,GAA5CoD,EAASuG,UAAUb,eAAevM,QACzC8mD,EAAcjgD,EAASuG,UAAUb,eAAe,GAChD,MAMF,OAJAxR,KAAKiH,MACHnF,EAAAoF,eAAe8kD,oEACf53C,EAAW/M,MAAkBX,EAASI,cAEjC9G,KAAKL,OAAO40B,oBAErB,KAAK6K,EAAAt2B,YAAYsM,mBACf,GAAIhB,EAAW/O,MAAQrD,EAAAsD,SAAS4Q,eAC1BtN,EAAS2L,QAAU3L,EAAS2L,OAAOlP,MAAQ+5B,EAAAt2B,YAAY+L,MAAO,CAChE,GAAInO,EAAQqD,YAAsBnB,EAAS2L,OAAQ7S,UAAU+L,aAW3D,OAJAzN,KAAKiH,MACHnF,EAAAoF,eAAemO,qCACfjB,EAAW/M,MAAeuB,EAAS2L,OAAQjG,YAEtCtO,KAAKL,OAAO40B,oBAVnB,IAAI03B,EAAyCvlD,EAASqF,QAAQ,MAC9D,GAAIkgD,EAAoB,CACtBF,EAAcE,EAAmB55C,UAAUF,WAC3C,OAaV,QAKE,OAJAnS,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAENrH,KAAKL,OAAO40B,oBAKvB,IAAI23B,EAAYlsD,KAAK69C,kBAAkBiO,EAAiBC,GACxD,OAAO/rD,KAAK4jD,2BACVxvC,EACA83C,EACArI,GAAkB9hD,EAAA8B,KAAKc,OAI3Bu2C,EAAAx5C,UAAAkiD,2BAAA,SACExvC,EACA+3C,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAIzsD,EAASK,KAAKL,OACdiJ,EAAW5I,KAAK0W,QAAQrC,kBAAkBD,EAAYpU,KAAKof,iBAC/D,IAAKxW,EAAU,OAAOjJ,EAAO40B,oBAE7B,IAAI7tB,EAAUkC,EAASlC,QACvB,OAAQA,EAAQrB,MACd,KAAK+5B,EAAAt2B,YAAY2L,MAEf,OADAzU,KAAKo7C,YAAcgR,EAAc1lD,EAASsF,KAAOjK,EAAA8B,KAAKc,KAC1C+B,EAAS+C,GAAG21B,EAAA11B,YAAYiO,QAClC3X,KAAKiH,MACHnF,EAAAoF,eAAe8kD,oEACf53C,EAAW/M,MAAeX,EAASI,cAE9BnH,EAAO40B,qBAET63B,EACHzsD,EAAOwwB,eAAuBzpB,EAASwR,MAAOi0C,GAC9CxsD,EAAOoyB,eAAuBrrB,EAASwR,MAAOi0C,GAEpD,KAAK/sB,EAAAt2B,YAAYa,OACf,IAAK3J,KAAKw9C,cAAsB92C,GAAU,OAAO/G,EAAO40B,oBACxD,IAAIvoB,EAAgBtF,EAASsF,KAG7B,GAFAtD,OAAOsD,GAAQjK,EAAA8B,KAAKc,MACpB3E,KAAKo7C,YAAcgR,EAAMpgD,EAAOjK,EAAA8B,KAAKc,KACzB+B,EAAS+C,GAAG21B,EAAA11B,YAAYiO,OAMlC,OALA3X,KAAKiH,MACHnF,EAAAoF,eAAe8kD,oEACf53C,EAAW/M,MACHX,EAASI,cAEZnH,EAAO40B,oBAEhB,GAAI63B,EAAK,CACP,IAAIrO,EAAa/xC,EAAKyP,eAClB3U,EAAwBJ,EAASI,aACrC,OAAOnH,EAAOwyB,YAAY,MACxBxyB,EAAOsyB,gBAAgBnrB,EAAcqlD,GACrCxsD,EAAO0wB,gBAAgBvpB,EAAci3C,IACpCA,GAEH,OAAOp+C,EAAOsyB,gBAAyBvrB,EAASI,aAAcqlD,GAGlE,KAAK/sB,EAAAt2B,YAAY4L,MACf,GAAYhO,EAAS+C,GAAG21B,EAAA11B,YAAYwlC,UAKlC,OAJAlvC,KAAKiH,MACHnF,EAAAoF,eAAe8kD,oEACf53C,EAAW/M,MAAeX,EAASI,cAE9BnH,EAAO40B,oBAEhB7rB,OAAOE,EAASyjD,kBAChB,IAAIC,EAAatsD,KAAK69C,kBACRj1C,EAASuL,iBACbvL,EAAS2L,OAAQvI,MAEvBA,EAAetF,EAASsF,KAC5BhM,KAAKo7C,YAAcgR,EAAMpgD,EAAOjK,EAAA8B,KAAKc,KACjCo5C,EAAa/xC,EAAKyP,eACtB,GAAI2wC,EAAK,CACP,IACIvJ,EADY7iD,KAAKof,gBAAgBlD,oBAAoBlQ,GAC1BkM,MAE/B,OAAOvY,EAAOwyB,YAAY,MACxBxyB,EAAOoyB,eAAe8wB,EAAgBsJ,GACtCxsD,EAAOixB,YACL5kB,EAAKosC,MAAQ,EACbkU,EACA3sD,EAAOswB,eAAe4yB,EAAgB9E,GACtCA,EACQr3C,EAASwW,cAEnBvd,EAAOswB,eAAe4yB,EAAgB9E,IACrCA,GAEH,OAAOp+C,EAAOixB,YACZ5kB,EAAKosC,MAAQ,EACbkU,EACAH,EACApO,EACQr3C,EAASwW,cAIvB,KAAKkiB,EAAAt2B,YAAY8F,SACf,IAAIE,EAA6BpI,EAASoI,gBAC1C,GAAIA,EAAiB,CAEnB,KADIy9C,EAAiBz9C,EAAgB/C,WAChB,OAAOpM,EAAO40B,oBAGnC,IAAK63B,EAAK,CACR,GAAIG,EAAe9iD,GAAG21B,EAAA11B,YAAY6O,UAAW,CAC3C7P,OAAOE,EAASyjD,kBAChB,IAAIG,EAAUxsD,KAAK69C,kBACLj1C,EAASuL,iBACbvL,EAAS2L,OAAQvI,MAE3B,OAAOhM,KAAK8qD,eAAeyB,GAAkBC,EAASL,IAEtD,OAAOnsD,KAAK8qD,eAAeyB,GAAkBJ,IAKjD,IAAIt9C,EAA6BnI,EAASmI,gBAG1C,GAFAnG,OAA0B,MAAnBmG,KACH49C,EAAqC59C,EAAiB9C,WACrC,OAAOpM,EAAO40B,oBACnC,IACIm4B,GADAv6C,EAAas6C,EAAep6C,UAAUF,YACRsJ,eAClC,GAAI8wC,EAAe9iD,GAAG21B,EAAA11B,YAAY6O,UAAW,CAC3C7P,OAAOE,EAASyjD,kBACZG,EAAUxsD,KAAK69C,kBACLj1C,EAASuL,iBACbvL,EAAS2L,OAAQvI,MAGvB62C,EADY7iD,KAAKof,gBAAgBlD,oBAAoB/J,GAC1B+F,MAC/B,OAAOvY,EAAOwyB,YAAY,MACxBnyB,KAAK8qD,eAAeyB,GAClB5sD,EAAOwwB,eAAe0yB,EAAgB2J,GACtCL,IAEFnsD,KAAK8qD,eAAe2B,GAClB9sD,EAAOswB,eAAe4yB,EAAgB6J,MAEvCA,GAGH,OAAO/sD,EAAOwyB,YAAY,MACxBnyB,KAAK8qD,eAAeyB,GAAkBJ,IACtCnsD,KAAK8qD,eAAe2B,IACnBC,GAQP,OALE1sD,KAAKiH,MACHnF,EAAAoF,eAAe8kD,oEACf53C,EAAW/M,MAAkBX,EAASI,cAGnCnH,EAAO40B,oBAEhB,KAAK6K,EAAAt2B,YAAYsM,mBACf,GAAIhB,EAAW/O,MAAQrD,EAAAsD,SAAS4Q,cAAe,CAE7C,IAAIu2C,EACJ,GAFA/jD,OAAOE,EAASyjD,oBACZI,EAAqC/lD,EAASqF,WAC7B,OAAOpM,EAAO40B,oBAEnC,IAAIo4B,EAAyB/jD,EAAS2L,OAAQ7S,UAAUgM,aACpDk/C,OAAU,EACd,GACoB,MAAlBD,GACQ/jD,EAAS2L,OAAQzJ,UACxB8hD,EAA2ChkD,EAAS2L,OAAQzJ,QAAS3J,IAAIwrD,KAC1EC,EAAWvnD,MAAQ+5B,EAAAt2B,YAAYsM,mBAC/B,CACA,IAAIm3C,EACJ,KADIA,EAAqCK,EAAY7gD,WAChC,OAAOpM,EAAO40B,oBACnC,IAAIjgB,EAAqB1L,EAAS2L,OAAQvI,KAKtC6gD,GAJAP,EAAatsD,KAAK69C,kBACRj1C,EAASuL,iBACrBG,GAEgBtU,KAAK69C,kBACKzpC,EAAYmuB,kBACtCxgC,EAAA8B,KAAKG,MAEP,GAAIooD,EAAK,CACP,IAAIU,EAAkB9sD,KAAKof,gBAAgB7D,aAAajH,GACpDy4C,EAAmB/sD,KAAKof,gBAAgBlD,oBAAoBlc,KAAKo7C,aACjEjpC,EAAas6C,EAAep6C,UAAUF,WAE1C,OADAnS,KAAKof,gBAAgBnD,cAAc6wC,GAC5BntD,EAAOwyB,YAAY,MACxBnyB,KAAK8qD,eAAeyB,GAClB5sD,EAAOwwB,eAAe28B,EAAgB50C,MAAOo0C,GAC7C3sD,EAAOwwB,eAAe48B,EAAiB70C,MAAO20C,GAC9CV,IAEFnsD,KAAK8qD,eAAe2B,GAClB9sD,EAAOswB,eAAe68B,EAAgB50C,MAAO40C,EAAgB9gD,KAAKyP,gBAClE9b,EAAOswB,eAAe88B,EAAiB70C,MAAO60C,EAAiB/gD,KAAKyP,mBAErEtJ,EAAWsJ,gBAEd,OAAOzb,KAAK8qD,eAAeyB,GACzBD,EACAO,EACAV,IAQJ,OAJAnsD,KAAKiH,MACHnF,EAAAoF,eAAe8lD,+CACf54C,EAAW/M,MAAeuB,EAAS2L,OAAQzN,cAEtCnH,EAAO40B,qBAUtB,OAJAv0B,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,qBAGhB2mB,EAAAx5C,UAAA2iD,sBAAA,SAAsBjwC,EAA4ByvC,GAChD,IAAIlkD,EAASK,KAAKL,OACdyf,EAAkBpf,KAAKof,gBACvBxW,EAAW5I,KAAK0W,QAAQrC,kBAAkBD,EAAWA,WAAYgL,GACrE,IAAKxW,EAAU,OAAOjJ,EAAO40B,oBAE7B,IACIliB,EACA46C,EAFAvmD,EAAUkC,EAASlC,QAGvB,OAAQA,EAAQrB,MAGd,KAAK+5B,EAAAt2B,YAAYsM,mBACf,IAAI1T,EAA+BgF,EAGnC,GAAIhF,EAAU+H,GAAG21B,EAAA11B,YAAYkR,QAAUwkB,EAAA11B,YAAYQ,SAAU,CAC3D,IAAIslB,EAAOgrB,EAAA0S,YACTltD,KACA0B,EACAA,EAAUkY,4BACRxF,EAAWvB,cACXuM,EAAgBlO,yBAElBkD,EAAWjH,UACX02C,EACAzvC,GAEF,OAAKob,IACHxvB,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,qBAMhB,IAAIzoB,EAAWpK,EAAUkR,0BACvBwB,EAAWvB,cACXuM,EAAgBlO,wBAChBkD,GAEF,IAAKtI,EAAU,OAAOnM,EAAO40B,oBAC7B,IAAIi4B,EAAyB,EAC7B,GAAI1gD,EAASrC,GAAG21B,EAAA11B,YAAY6O,WAM1B,GALA7P,OAAOE,EAASyjD,oBAChBG,EAAUxsD,KAAK69C,kBACDj1C,EAASuL,iBACbvL,EAAS2L,OAAQvI,OAEb,OAAOrM,EAAO40B,yBAE5B7rB,QAAQE,EAASyjD,kBAEnB,OAAOrsD,KAAKmtD,kBAAkBrhD,EAAUsI,EAAWjH,UAAWiH,EAAYo4C,GAK9E,KAAKptB,EAAAt2B,YAAY2L,MACf,GAAIpC,EAAoB3L,EAASsF,KAAKoK,mBAAoB,CACxD62C,EAAWttD,EAAOswB,eAAuBvpB,EAASwR,MAAOjW,EAAAyZ,WAAWC,KACpE,MAMA,OAJA3b,KAAKiH,MACHnF,EAAAoF,eAAekmD,uGACfh5C,EAAW/M,MAAeX,EAASsF,KAAKsC,YAEnC3O,EAAO40B,oBAGlB,KAAK6K,EAAAt2B,YAAYa,OACf,GAAI0I,EAAqB3L,EAASsF,KAAKoK,mBAAoB,CACzD62C,EAAWttD,EAAO0wB,gBAAyB3pB,EAASI,aAAuBJ,EAASsF,KAAKyP,gBACzF,MAMA,OAJAzb,KAAKiH,MACHnF,EAAAoF,eAAekmD,uGACfh5C,EAAW/M,MAAgBX,EAASsF,KAAKsC,YAEpC3O,EAAO40B,oBAGlB,KAAK6K,EAAAt2B,YAAY4L,MACf,IAAI1I,EAAetF,EAASsF,KAC5B,GAAIqG,EAAYrG,EAAKoK,mBAAoB,CACvC,IAAIk2C,EAAatsD,KAAK69C,kBAAkBn1C,OAAOE,EAASuL,kBAAmBnI,GAC3EihD,EAAWttD,EAAO4wB,WAChB,GACA,EACA+7B,EACArqD,EAAAyZ,WAAWC,IACHjV,EAASwW,cAEnB,MAMA,OAJAld,KAAKiH,MACHnF,EAAAoF,eAAekmD,uGACfh5C,EAAW/M,MAAeX,EAASsF,KAAKsC,YAEnC3O,EAAO40B,oBAGlB,KAAK6K,EAAAt2B,YAAYgU,gBACfzK,EAA6B3L,EAAS2L,UACtC46C,EAAWjtD,KAAK69C,kBAAkBzpC,EAAWA,WAA6B1N,EAASsF,MACnF,MAEF,KAAKozB,EAAAt2B,YAAY8F,SAGjB,QAKE,OAJA5O,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAGlB,OAAOv0B,KAAKqtD,oBACVh7C,EACA46C,EACA74C,EAAWjH,UACXiH,IAQJ8mC,EAAAx5C,UAAA4rD,mBAAA,SACEj7C,EACAk7C,EACAC,EACA/zC,GAKA,GAAI+zC,IAAwB,MADbn7C,EAAUhB,UAMvB,OAJArR,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf6O,EAAWpS,QAEN,EAIT,IAAIuK,EAAUS,EAAUT,QACxB,GAAIA,EAKF,OAJA5R,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf6O,EAAWpS,QAEN,EAGT,IAAIomD,EAAUp7C,EAAUV,mBACpBmlB,EAAUzkB,EAAUb,eAAevM,OAGvC,OAAIsoD,EAAeE,GACjBztD,KAAKiH,MACHwmD,EAAU32B,EACNh1B,EAAAoF,eAAewmD,wCACf5rD,EAAAoF,eAAemH,+BACnBoL,EAAWpS,MAAOomD,EAAQn/C,WAAYi/C,EAAaj/C,aAE9C,KAILi/C,EAAez2B,IAAYllB,KAC7B5R,KAAKiH,MACHnF,EAAAoF,eAAemH,+BACfoL,EAAWpS,MAAOyvB,EAAQxoB,WAAYi/C,EAAaj/C,aAE9C,IAOX4sC,EAAAx5C,UAAAyrD,kBAAA,SACErhD,EACA6hD,EACAl0C,EACA+yC,QAAA,IAAAA,MAAA,GAEA,IAAIe,EAAeI,EAAoB1oD,OACnCoN,EAAYvG,EAASuG,UAEzB,IAAKrS,KAAKstD,mBACRj7C,EACAk7C,EACW,GAAXf,EACA/yC,GAEA,OAAOzZ,KAAKL,OAAO40B,oBAGrB,IAAIq5B,EAAuBpB,EAAUe,EAAe,EAAIA,EACpDx9B,EAAW,IAAIjrB,MAAqB8oD,GACpC11C,EAAQ,EACRs0C,IACFz8B,EAAS,GAAKy8B,EACdt0C,EAAQ,GAGV,IADA,IAAI1G,EAAiBa,EAAUb,eACtBnR,EAAI,EAAGA,EAAIktD,IAAgBltD,IAAK6X,EACvC6X,EAAS7X,GAASlY,KAAK69C,kBACrB8P,EAAoBttD,GACpBmR,EAAenR,IAInB,OADAqI,OAAOwP,GAAS01C,GACT5tD,KAAK8qD,eAAeh/C,EAAUikB,IAIvCmrB,EAAAx5C,UAAAy+C,iBAAA,SAAiB0N,GAQf,IAAIxzC,EAAawzC,EAASxzC,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIyzC,EAAoBD,EAASx7C,UAC7B07C,EAAeF,EAAS/mD,aACxBknD,EAAyBF,EAAkBt8C,eAC3Cy8C,EAAgCJ,EAASnsD,UAAU0F,YAAYiL,UAAUb,eACzE08C,EAAmBJ,EAAkB37C,WACrCg8C,EAAiBL,EAAkBz8C,SACnCiH,EAAau1C,EAASpkD,GAAG21B,EAAA11B,YAAY6O,UAGrC61C,EAAeN,EAAkBn8C,mBACjC08C,EAAcD,EACdE,EAAeN,EAAuB/oD,OACtCspD,EAAcD,EACdh2C,MACA+1C,IACAE,GAEJ,IAAIC,EAAc9lD,OAAO6lD,EAAcF,GAEnCI,EAAoB,IAAI3pD,MAAqBupD,GAC7CK,EAAe,EAGf/uD,EAASK,KAAKL,OACd2Y,IACFm2C,EAAkB,GAAK9uD,EAAOswB,eAAe,EAAGjwB,KAAK4D,QAAQu7C,gBAC7DuP,EAAe,GAIjB,IAAK,IAAIruD,EAAI,EAAGA,EAAI+tD,IAAgB/tD,IAAKquD,EACvCD,EAAkBC,GAAgB/uD,EAAOswB,eAAey+B,EAAcV,EAAuB3tD,GAAGob,gBAElG/S,OAAOgmD,GAAgBL,GAGvB,IAAIM,EAAsB,IAAI5sD,EAAAuQ,UAAU07C,EAAwBE,EAAkBC,GAC9ES,EAAiBb,EAAe,cACpCY,EAAoBh9C,mBAAqB28C,GACzCj0C,EAAa,IAAI+kB,EAAA9lB,SAASu0C,EAASnsD,UAAWktD,EAAgBD,EAAqBd,EAASj4C,WACjF/O,IAAIgnD,EAASl3C,MAAQyoB,EAAA11B,YAAYw2C,WAAa9gB,EAAA11B,YAAYg0C,UACrErjC,EAAWnJ,wBAA0B28C,EAAS38C,wBAC9C28C,EAASxzC,WAAaA,EAItB,IAAIgjC,EAAmBr9C,KAAKof,gBAC5Bpf,KAAKof,gBAAkB/E,EAGvB,IAAIwZ,EAAW26B,EAAc,EACzB76B,EAAQ,IAAI7uB,MAAc+uB,GAC1Bg7B,EAAM,KAAOL,EAAYlgD,SAAS,IACtC,IAASjO,EAAI,EAAGA,EAAIwzB,IAAYxzB,EAAG,CACjC,IAAI+xB,EAAQ/xB,EAAEiO,SAAS,IAAMugD,EAC7Bl7B,EAAMtzB,GAAK+xB,EAEb,IAAIU,EAAOnzB,EAAOwyB,YAAYwB,EAAM,IAClCh0B,EAAOwyB,YAAY,OACjBxyB,EAAO+zB,aAAaC,EAAO,MAEzBy6B,EACIzuD,EAAO+vB,aACLztB,EAAA2lB,SAAS8hC,OACT/pD,EAAO0wB,gBAAgB,gBAAiBpuB,EAAAyZ,WAAWC,KACnDhc,EAAOgvB,UAAUy/B,IAEnBzuD,EAAO0wB,gBAAgB,gBAAiBpuB,EAAAyZ,WAAWC,QAG3Dhc,EAAO40B,sBAET,IAASl0B,EAAI,EAAGA,EAAImuD,IAAenuD,IAAKquD,EAAc,CACpD,IAAI1iD,EAAOgiD,EAAuBI,EAAe/tD,GACjDyyB,EAAOnzB,EAAOwyB,YAAYwB,EAAMtzB,EAAI,IAClCyyB,EACAnzB,EAAOoyB,eAAe28B,EACpB1uD,KAAK69C,kBACHn1C,OAAOulD,EAA8BG,EAAe/tD,GAAG2X,aACvDhM,MAINyiD,EAAkBC,GAAgB/uD,EAAOswB,eAAey+B,EAAc1iD,EAAKyP,gBAE7Ezb,KAAKof,gBAAkBi+B,EACvB30C,OAAOgmD,GAAgBH,GAEvB,IAAIrS,EAAUl8C,KAAKm8C,mBAAmBwS,GAClC1S,EAAUt8C,EAAOi1B,YAAYg6B,EAAgB1S,EAASn6C,EAAAy3C,mBAAmBn/B,EAAWL,kBACtFra,EAAOwyB,YAAY,MACjBW,EACAnzB,EAAOq0B,WACL+5B,EACAU,EACAP,EAAiBzyC,iBAElByyC,EAAiBzyC,iBAGtB,OADApB,EAAWiC,SAAS3c,EAAQs8C,GACrB5hC,GAIT6gC,EAAAx5C,UAAAopD,eAAA,SACEh/C,EACAikB,QAAA,IAAAA,MAAA,MAEA,IAAI++B,EAAc/+B,EAAWA,EAAS9qB,OAAS,EAC3CsoD,EAAeuB,EAEfT,EADeviD,EAASuG,UAAUV,mBAElC28C,EAAexiD,EAASuG,UAAUb,eAAevM,OACjDspD,EAAcD,EACdxiD,EAASrC,GAAG21B,EAAA11B,YAAY6O,cACxB81C,IACAE,IACAhB,GAEJ7kD,OAAOomD,GAAeT,GAEtB,IAAI1uD,EAASK,KAAKL,OAClB,IAAKK,KAAK8+C,gBAAgBhzC,GAAW,OAAOnM,EAAO40B,oBACnD,IAAIpiB,EAAarG,EAASuG,UAAUF,WAChC48C,EAAejjD,EAASrC,GAAG21B,EAAA11B,YAAYu0C,eAG3C,GAAI6Q,EAAcP,EAAa,CACxBx+B,KACHA,EAAW,IAAIjrB,MAAMypD,IACZtpD,OAAS,GAGpB,IADA,IAAIuM,EAAiB1F,EAASuG,UAAUb,eAC/BnR,EAAIktD,EAAcltD,EAAIiuD,IAAgBjuD,EAC7C0vB,EAASllB,KAAK2G,EAAenR,GAAG44C,aAAat5C,IAE/C,IAAKovD,EAAc,CAEjB,GADAjjD,EAAW9L,KAAKmgD,iBAAiBr0C,IAC5B9L,KAAK8+C,gBAAgBhzC,GAAW,OAAOnM,EAAO40B,oBACnD,IAAIm4B,EAAmBv6C,EAAWsJ,eAElC,OADAzb,KAAKo7C,YAAcjpC,EACZxS,EAAOwyB,YAAY,MACxBnyB,KAAKgvD,oBAAoBzB,GACzB5tD,EAAOq0B,WAAWloB,EAAShF,aAAcipB,EAAU28B,IAClDA,IAMP,OADA1sD,KAAKo7C,YAAcjpC,EACZ48C,EACHpvD,EAAOu0B,iBAAiBpoB,EAAShF,aAAcipB,EAAU5d,EAAWsJ,gBACpE9b,EAAOq0B,WAAWloB,EAAShF,aAAcipB,EAAU5d,EAAWsJ,iBAIpEy/B,EAAAx5C,UAAA2rD,oBAAA,SACEh7C,EACA46C,EACAU,EACAl0C,EACA+yC,QAAA,IAAAA,MAAA,GAEA,IAAIe,EAAeI,EAAoB1oD,OAEvC,IAAKjF,KAAKstD,mBACRj7C,EACAk7C,EACW,GAAXf,EACA/yC,GAEA,OAAOzZ,KAAKL,OAAO40B,oBAGrB,IAAIq5B,EAAuBpB,EAAUe,EAAe,EAAIA,EACpDx9B,EAAW,IAAIjrB,MAAqB8oD,GACpC11C,EAAQ,EACRs0C,IACFz8B,EAAS,GAAKy8B,EACdt0C,EAAQ,GAGV,IADA,IAAI1G,EAAiBa,EAAUb,eACtBnR,EAAI,EAAGA,EAAIktD,IAAgBltD,IAAK6X,EACvC6X,EAAS7X,GAASlY,KAAK69C,kBACrB8P,EAAoBttD,GACpBmR,EAAenR,IAInB,OADAqI,OAAOwP,GAAS01C,GACT5tD,KAAKivD,iBAAiB58C,EAAW46C,EAAUl9B,IAIpDmrB,EAAAx5C,UAAAutD,iBAAA,SACE58C,EACA46C,EACAl9B,QAAA,IAAAA,MAAA,MAEA,IAAI++B,EAAc/+B,EAAWA,EAAS9qB,OAAS,EAC3CsoD,EAAeuB,EAEfT,EADeh8C,EAAUV,mBAEzB28C,EAAej8C,EAAUb,eAAevM,OACxCspD,EAAcD,EACdj8C,EAAUhB,aACVg9C,IACAE,IACAhB,GAEJ7kD,OAAOomD,GAAeT,GAEtBruD,KAAKm8C,mBAAmB9pC,GACxB,IAAI1S,EAASK,KAAKL,OAGlB,GAAImvD,EAAcP,EAAa,CACxBx+B,KACHA,EAAW,IAAIjrB,MAAMypD,IACZtpD,OAAS,GAGpB,IADA,IAAIuM,EAAiBa,EAAUb,eACtBnR,EAAIktD,EAAcltD,EAAIiuD,IAAgBjuD,EAC7C0vB,EAASllB,KAAK2G,EAAenR,GAAG44C,aAAat5C,IAIjD,IAAIwS,EAAaE,EAAUF,WAE3B,OADAnS,KAAKo7C,YAAcjpC,EACZxS,EAAOwyB,YAAY,MACxBnyB,KAAKgvD,oBAAoBzB,GACzB5tD,EAAOy0B,mBAAmB64B,EAAUl9B,EAAU1d,EAAU0K,sBACvD5K,EAAWsJ,iBAIRy/B,EAAAx5C,UAAAstD,oBAAR,SAA4Bz7C,GAC1B,IAAI5T,EAASK,KAAKL,OASlB,OARKK,KAAKy7C,mBACRz7C,KAAKy7C,iBAAmB97C,EAAO80B,UAC7B,gBACAxyB,EAAAyZ,WAAWC,KACX,EACAhc,EAAOgvB,UAAU,KAGdhvB,EAAOsyB,gBAAgB,gBAAiBtyB,EAAOgvB,UAAUpb,KAGlE2nC,EAAAx5C,UAAA4iD,uBAAA,SAAuBlwC,EAA6ByvC,GAIlD,IAHA,IAAI5hB,EAAc7tB,EAAW6tB,YACzBitB,EAAiBjtB,EAAYh9B,OAC7BkqD,EAAQ,IAAIrqD,MAAqBoqD,KAC5B7uD,EAAI,EAAGA,EAAI6uD,IAAkB7uD,EACpC8uD,EAAM9uD,GAAKL,KAAK69C,kBAAkB5b,EAAY5hC,GAAI0B,EAAA8B,KAAKc,MAGzD,OADAwqD,EAAMD,GAAkBlvD,KAAK69C,kBAAkB5b,EAAYitB,GAAiBrL,GACrE7jD,KAAKL,OAAOwyB,YAAY,KAAMg9B,EAAOnvD,KAAKo7C,YAAY3/B,iBAG/Dy/B,EAAAx5C,UAAA6iD,+BAAA,SAA+BnwC,EAAqCyvC,GAClE,IAAIj7C,EAAW5I,KAAK0W,QAAQ1B,qBAAqBZ,EAAYpU,KAAKof,iBAClE,IAAKxW,EAAU,OAAO5I,KAAKL,OAAO40B,oBAElC7rB,OACEE,EAASlC,QAAQrB,MAAQ+5B,EAAAt2B,YAAYsM,oBACrCxM,EAAS2L,QACT3L,EAAS2L,OAAOlP,MAAQ+5B,EAAAt2B,YAAY+L,OAEtC,IAAIN,EAAgB3L,EAAS2L,OACzBzI,EAA+BlD,EAASlC,QAASqF,QACnD,KACAwI,EAAOrD,yBAET,IAAKpF,EAAU,OAAO9L,KAAKL,OAAO40B,oBAClC,IAAIi4B,EAAUxsD,KAAK69C,kBAAkBzpC,EAAWA,WAAYG,EAAOvI,MACnE,OAAOhM,KAAKmtD,kBAAkBrhD,GAC5BsI,EAAWmuB,mBACVnuB,EAAYo4C,IAGjBtR,EAAAx5C,UAAA8iD,0BAAA,SAA0BpwC,EAAgCyvC,GACxD,IAAIz8C,EAAcgN,EAAWhN,YACzBxG,EAAOwG,EAAYxG,KACnBmJ,GAAcnJ,EAAK6G,KAAKxC,OACxBrE,EAAK6G,KACL,aAAe,IAAMzH,KAAKw7C,cAAcv2C,OAAOqJ,SAAS,IACxD8Q,EAAkBpf,KAAKof,gBACvB1d,EAAY,IAAI09B,EAAA3yB,kBAClBzM,KAAK0W,QACL3M,EACAqV,EAAgBtY,aAAe,IAAMiD,EACrC3C,GAEE0E,EAAW9L,KAAK6+C,kCAClBn9C,KAEA0d,EAAgBlO,wBAChB9J,GAEF,IAAK0E,EAAU,OAAO9L,KAAKL,OAAO40B,oBAClCv0B,KAAKo7C,YAActvC,EAASuG,UAAUrG,KAGtC,IAAIkM,EAAQlY,KAAKigD,yBAAyBn0C,GAC1C,OAAOoM,EAAQ,EACXlY,KAAKL,OAAO40B,oBACZv0B,KAAKL,OAAOgvB,UAAUzW,IAQ5BgjC,EAAAx5C,UAAA+iD,4BAAA,SACErwC,EACAyvC,EACAuL,GAEA,IAAIzvD,EAASK,KAAKL,OAElB,OAAQyU,EAAW/O,MACjB,KAAKrD,EAAAsD,SAASilC,KACZ,IAAI3mC,EAAU5D,KAAK4D,QAInB,OAHKigD,EAAelvC,iBAClB3U,KAAKo7C,YAAcx3C,EAAQW,WAEtBX,EAAQy4C,SACX18C,EAAOmvB,UAAU,GACjBnvB,EAAOgvB,UAAU,GAEvB,KAAK3sB,EAAAsD,SAASolC,KAEZ,OADA1qC,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACjB7E,EAAOgvB,UAAU,GAE1B,KAAK3sB,EAAAsD,SAASqlC,MAEZ,OADA3qC,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACjB7E,EAAOgvB,UAAU,GAE1B,KAAK3sB,EAAAsD,SAASqQ,KAEZ,IADIyJ,EAAkBpf,KAAKof,iBACP3V,GAAG21B,EAAA11B,YAAY6O,UAAW,CAC5C,IAAIjR,EAASoB,OAAO0W,EAAgBxJ,UACpClN,OAAOpB,EAAOjC,MAAQ+5B,EAAAt2B,YAAY+L,OAClC,IAAIxD,EAAmB/J,EAAQ0E,KAC/B,GAAIoT,EAAgB3V,GAAG21B,EAAA11B,YAAY8C,aAAc,CAC/C,IAAIuH,EAAOqL,EAAgBrL,KAC3B,IAAKA,EAAKtK,GAAE,IAIV,OAHAsK,EAAKlN,IAAG,IAER7G,KAAKo7C,YAAc/pC,EACZ1R,EAAOwwB,eAAe,EAC3BivB,EAAwBp/C,KAAasH,EAAQ8M,IAKnD,OADApU,KAAKo7C,YAAc/pC,EACZ1R,EAAOswB,eAAe,EAAG5e,EAASoK,gBAO3C,OALAzb,KAAKiH,MACHnF,EAAAoF,eAAe2O,+CACfzB,EAAW/M,OAEbrH,KAAKo7C,YAAcp7C,KAAK4D,QAAQW,UACzB5E,EAAO40B,oBAEhB,KAAKvyB,EAAAsD,SAASwQ,MACZ,IAAIsJ,EACJ,IADIA,EAAkBpf,KAAKof,iBACP3V,GAAG21B,EAAA11B,YAAY6O,UAAW,CACxCjR,EAASoB,OAAO0W,EAAgBxJ,UACpClN,OAAOpB,EAAOjC,MAAQ+5B,EAAAt2B,YAAY+L,OAClC,IAAIE,EAAezN,EAAQyN,KAC3B,GAAIA,EAAM,CACR,IAAIs6C,EAAYt6C,EAAK/I,KAErB,OADAhM,KAAKo7C,YAAciU,EACZ1vD,EAAOswB,eAAe,EAAGo/B,EAAU5zC,iBAQ9C,OALAzb,KAAKiH,MACHnF,EAAAoF,eAAe6O,iDACf3B,EAAW/M,OAEbrH,KAAKo7C,YAAcp7C,KAAK4D,QAAQW,UACzB5E,EAAO40B,oBAKlB,IAAI3rB,EAAW5I,KAAK0W,QAAQ7N,kBAC1BuL,EACApU,KAAKof,gBACLpf,KAAKm7C,aAEP,IAAKvyC,EAAU,OAAOjJ,EAAO40B,oBAE7B,IAAI7tB,EAAUkC,EAASlC,QACvB,OAAQA,EAAQrB,MACd,KAAK+5B,EAAAt2B,YAAY2L,MACf,GAAY/N,EAAS+C,GAAG21B,EAAA11B,YAAYkO,SAClC,OAAO5X,KAAKm+C,sBAA6Bz3C,EAASm9C,EAAgBuL,GAEpE,IAAIE,EAAoB5oD,EAASsF,KAC7B8O,EAAqBpU,EAASwR,MAGlC,OAFAxP,OAAOoS,GAAc,GACrB9a,KAAKo7C,YAAckU,EACZtvD,KAAKL,OAAOswB,eAAenV,EAAYw0C,EAAU7zC,gBAE1D,KAAK2jB,EAAAt2B,YAAYa,OACf,GAAIjD,EAAQ+C,GAAG21B,EAAA11B,YAAYkR,QAAUwkB,EAAA11B,YAAYQ,SAC/C,OAAOswC,EAAA+U,mBAA0BvvD,KAAc0G,EAAS0N,GAE1D,IAAKpU,KAAKw9C,cAAsB92C,GAC9B,OAAO1G,KAAKL,OAAO40B,oBAErB,IAAIiC,EAAsB9vB,EAASsF,KAEnC,OADAtD,OAAO8tB,GAAcz0B,EAAA8B,KAAKc,MACb+B,EAAS+C,GAAG21B,EAAA11B,YAAYkO,SAC5B5X,KAAKm+C,sBAA8Bz3C,EAASm9C,EAAgBuL,IAErEpvD,KAAKo7C,YAAc5kB,EACZx2B,KAAKL,OAAO0wB,gBAAyB3pB,EAASI,aAAc0vB,EAAW/a,iBAEhF,KAAK2jB,EAAAt2B,YAAY8K,UACf,OAAKlN,EAAQ+C,GAAG21B,EAAA11B,YAAYg0C,WAQ5B19C,KAAKo7C,YAAcr5C,EAAA8B,KAAKG,IACR0C,EAAS+C,GAAG21B,EAAA11B,YAAYkO,SAC/B5X,KAAKL,OAAOgvB,UAAsBjoB,EAASsQ,eAE7ChX,KAAKL,OAAO0wB,gBAA4B3pB,EAASI,aAAc7E,EAAAyZ,WAAWC,OAX/E3b,KAAKiH,MACHnF,EAAAoF,eAAesoD,+HACfp7C,EAAW/M,OAEbrH,KAAKo7C,YAAcr5C,EAAA8B,KAAKG,IACjBhE,KAAKL,OAAO40B,qBAQvB,KAAK6K,EAAAt2B,YAAYsM,mBACf,IAAItJ,EAA+BpF,EAASqF,QAC1C,KACA/L,KAAKof,gBAAgBlO,yBAEvB,IAAMpF,IAAY9L,KAAK8+C,gBAAgBhzC,GAAY,OAAOnM,EAAO40B,oBACjE,IAAIrc,EAAQlY,KAAKigD,yBAAyBn0C,GAE1C,OADA9L,KAAKo7C,YAActvC,EAASuG,UAAUrG,KAC/BhM,KAAKL,OAAOgvB,UAAUzW,GAOjC,OAJAlY,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAENrH,KAAKL,OAAO40B,qBAGrB2mB,EAAAx5C,UAAAgjD,yBAAA,SACEtwC,EACAyvC,EACA4L,QAAA,IAAAA,OAAA,GAEA,IAAI9vD,EAASK,KAAKL,OAElB,OAAQyU,EAAW9G,aACjB,KAAKtL,EAAAuL,YAAY08B,MACfvhC,QAAQ+mD,GACR,IAAIh6C,EAAYouC,EAAelvC,eAC/B,OACEc,GACAA,EAAU/T,WAAa1B,KAAK0W,QAAQtT,eAAejC,IAAI,SAEhDnB,KAAK0vD,mBACVhnD,OAAO+M,EAAU5C,eAAe,GACPuB,EAAYgtB,mBACrChtB,IAGJpU,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,qBAEhB,KAAKvyB,EAAAuL,YAAY68B,MACf,IAAIulB,EAAsCv7C,EAAY/S,MAItD,OAHIouD,IACFE,GAAcA,GAEZ9L,GAAkB9hD,EAAA8B,KAAKY,IAClB9E,EAAOuvB,UAAeygC,IAE/B3vD,KAAKo7C,YAAcr5C,EAAA8B,KAAKa,IACjB/E,EAAOyvB,UAAUugC,IAE1B,KAAK3tD,EAAAuL,YAAY88B,QACf,IAAIulB,EAAsCx7C,EAAY/S,MAOtD,OANIouD,IACFG,EAAWC,QACTn4C,QAAQ,GACRk4C,IAGI/L,EAAex+C,MAIrB,OACE,GAAIyqD,UAAUF,GAAW,OAAOjwD,EAAOgvB,UAAU0I,QAAQu4B,IACzD,MAEF,OACE,GAAIG,UAAUH,GAAW,OAAOjwD,EAAOgvB,UAAU0I,QAAQu4B,IACzD,MAEF,OACE,GAAII,WAAWJ,GAAW,OAAOjwD,EAAOgvB,UAAU0I,QAAQu4B,IAC1D,MAEF,OACE,GAAIK,WAAWL,GAAW,OAAOjwD,EAAOgvB,UAAU0I,QAAQu4B,IAC1D,MAEF,OACA,OACE,GAAIM,WAAWN,IAAaO,WAAWP,GAAW,OAAOjwD,EAAOgvB,UAAU0I,QAAQu4B,IAClF,MAEF,QACE,GAAIQ,YAAYR,GAAW,OAAOjwD,EAAOgvB,UAAU0I,QAAQu4B,IAC3D,MAEF,OAOA,OACE,IAAK5vD,KAAK4D,QAAQy4C,SAAU,CAC1B,GAAI6T,WAAWN,IAAaO,WAAWP,GAAW,OAAOjwD,EAAOgvB,UAAU0I,QAAQu4B,IAClF,MAEF,OAAOjwD,EAAOmvB,UAAUuI,QAAQu4B,GAAWt4B,SAASs4B,IAEtD,OACA,OACE,OAAOjwD,EAAOmvB,UAAUuI,QAAQu4B,GAAWt4B,SAASs4B,IAEtD,QACE,GAAIS,WAAWT,GAAW,OAAOjwD,EAAOuvB,UAAUohC,WAAWV,IAC7D,MAEF,QACE,GAAIW,WAAWX,GAAW,OAAOjwD,EAAOyvB,UAAUohC,WAAWZ,IAC7D,MAEF,QACE,MAEF,QAME,OALAlnD,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAMlB,OAAI27B,WAAWN,IACb5vD,KAAKo7C,YAAcr5C,EAAA8B,KAAKG,IACjBrE,EAAOgvB,UAAU0I,QAAQu4B,MAEhC5vD,KAAKo7C,YAAcr5C,EAAA8B,KAAKI,IACjBtE,EAAOmvB,UAAUuI,QAAQu4B,GAAWt4B,SAASs4B,KAGxD,KAAK5tD,EAAAuL,YAAYC,OAEf,OADA9E,QAAQ+mD,GACDzvD,KAAKywD,oBAA8Cr8C,EAAY/S,OAU1E,OALArB,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEbrH,KAAKo7C,YAAcyI,EACZlkD,EAAO40B,qBAGhB2mB,EAAAx5C,UAAA+uD,oBAAA,SAAoBC,GAClB,IAAI/wD,EAASK,KAAKL,OACdiE,EAAU5D,KAAK4D,QACf23C,EAAiBv7C,KAAKu7C,eAEtBoV,EAAsCpV,EAAep6C,IAAIuvD,GAC7D,IAAKC,EAAe,CAClB,IAAIC,EAAeF,EAAYzrD,OAC3B4rD,EAAe,IAAIh3B,WAAW,EAAmB,EAAf+2B,GACtCC,EAAa,GAA6B,IAAvBD,EACnBC,EAAa,GAAMD,IAAkB,EAAK,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1C,IAAK,IAAIvwD,EAAI,EAAGA,EAAIuwD,IAAgBvwD,EAClCwwD,EAAa,EAAQ,EAAJxwD,GAA6C,IAAnCqwD,EAAY1uC,WAAW3hB,GAClDwwD,EAAa,EAAQ,EAAJxwD,GAAUqwD,EAAY1uC,WAAW3hB,KAAO,EAAK,IAEhEswD,EAAgB3wD,KAAK+/C,iBAAiB8Q,EAAcjtD,EAAQW,UAAU8Z,UACtEk9B,EAAe10C,IAAI6pD,EAAaC,GAElC,IAAIG,EAAeH,EAAcpjC,OAC7BwjC,EAAa/wD,KAAK0W,QAAQrT,YAAYlC,IAAI,UAE9C,OADAnB,KAAKo7C,YAAc2V,GAA0BntD,EAAQW,UACjDX,EAAQy4C,SACH18C,EAAOmvB,UAAUuI,QAAQy5B,GAAex5B,SAASw5B,KAE1DpoD,OAAOwnD,WAAWY,IACXnxD,EAAOgvB,UAAU0I,QAAQy5B,MAGlC5V,EAAAx5C,UAAAguD,mBAAA,SAAmB3D,EAAmB9pB,EAAoCxoB,GACxE,IAAIu3C,GAAW,EACXrxD,EAASK,KAAKL,OAGdsxD,EAAiBvoD,OAAO1I,KAAK0W,QAAQtT,eAAejC,IAAI,UAC5D,IAAK8vD,GAAkBA,EAAe5rD,MAAQ+5B,EAAAt2B,YAAYC,gBAAiB,OAAOpJ,EAAO40B,oBACzF,IAAI28B,EAA6BD,EAAgBllD,SAAUggD,IAC3D,IAAKmF,EAAW,OAAOvxD,EAAO40B,oBAE9B,IAEIjlB,EACA6hD,EAHAC,EAAcnvB,EAAYh9B,OAC1B84C,EAAagO,EAAYtwC,eAG7B,OAAQsiC,GACN,KAAK97C,EAAAyZ,WAAWC,IACdrM,EAAS4e,WAAkB,IAAImjC,WAAWD,IAC1CD,EAA2B,EAAdC,EACb,MAEF,KAAKnvD,EAAAyZ,WAAWE,IACdtM,EAAS4e,WAAkB,IAAIppB,MAAWssD,IAC1CD,EAA2B,EAAdC,EACb,MAEF,KAAKnvD,EAAAyZ,WAAWG,IACdvM,EAAS4e,WAAkB,IAAIojC,aAAaF,IAC5CD,EAA2B,EAAdC,EACb,MAEF,KAAKnvD,EAAAyZ,WAAWI,IACdxM,EAAS4e,WAAkB,IAAIqjC,aAAaH,IAC5CD,EAA2B,EAAdC,EACb,MAEF,QAME,OALA1oD,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf6O,EAAWpS,OAEN1H,EAAO40B,oBAOlB,IAFA,IACI/E,EADA2/B,EAAQ,IAAIrqD,MAAqBssD,GAE5B/wD,EAAI,EAAGA,EAAI+wD,IAAe/wD,EAIjC,GAHA8uD,EAAM9uD,GAAK4hC,EAAY5hC,GACnBL,KAAK69C,kBAA8B5b,EAAY5hC,GAAI0rD,GACnDA,EAAY9S,aAAat5C,GACzBqxD,EAEF,GADAxhC,EAAOxvB,KAAKo+C,wBAAwB+Q,EAAM9uD,IACtCw6B,yBAAyBrL,IAASvtB,EAAAsgB,aAAauY,MAEjD,OADApyB,OAAOqyB,2BAA2BvL,IAASuuB,GACnCA,GACN,KAAK97C,EAAAyZ,WAAWC,IACduS,WAAkB5e,GAAQjP,GAAK26B,0BAA0BxL,GACzD,MAEF,KAAKvtB,EAAAyZ,WAAWE,IACdsS,WAAkB5e,GAAQjP,GAAKqX,QAC7BujB,6BAA6BzL,GAC7B0L,8BAA8B1L,IAEhC,MAEF,KAAKvtB,EAAAyZ,WAAWG,IACdqS,WAAkB5e,GAAQjP,GAAK86B,0BAA0B3L,GACzD,MAEF,KAAKvtB,EAAAyZ,WAAWI,IACdoS,WAAkB5e,GAAQjP,GAAK+6B,0BAA0B5L,GACzD,MAEF,QACE9mB,QAAO,QAKXsoD,GAAW,EAKjB,IAAIQ,EAAgBxxD,KAAK4D,QAAQW,UAAU8Z,SACvCozC,EAAaD,EAAgB,EAAI,EAErC,GAAIR,EAAU,CACZ,IAAI1jC,EAAS,IAAIuM,WAAW43B,EAAaN,GACrC3jC,EAAUxtB,KAAK+/C,iBAAiBzyB,GAGhCC,EAAS,EAeb,OAdqB,GAAjBikC,EACFvxC,EAAAyxC,SAAS5a,QAAQtpB,EAAQD,OAAQ7V,QAAQ+5C,IAAcnkC,EAAQ,IAE/D5kB,OAAmC,GAA5B4uB,SAAS9J,EAAQD,SACxBtN,EAAA0xC,SAASt6B,QAAQ7J,EAAQD,QAAUkkC,EAAYnkC,EAAQ,IAEzDC,GAAUikC,EACVvxC,EAAA0xC,SAASP,EAAa9jC,EAAQC,GAC9BA,GAAU,EACVtN,EAAA0xC,SAASP,EAAa9jC,EAAQC,GAC9BA,GAAU,EACV7kB,OAAO6kB,GAAUkkC,GAGT1T,GACN,KAAK97C,EAAAyZ,WAAWC,IACd,IAAStb,EAAI,EAAGA,EAAI+wD,IAAe/wD,EACjC4f,EAAA0xC,SAASzjC,WAAkB5e,GAAQjP,GAAIitB,EAAQC,GAASA,GAAU,EAEpE,MAEF,KAAKtrB,EAAAyZ,WAAWE,IACd,IAASvb,EAAI,EAAGA,EAAI+wD,IAAe/wD,EACjC4f,EAAAyxC,SAASxjC,WAAkB5e,GAAQjP,GAAIitB,EAAQC,GAASA,GAAU,EAEpE,MAEF,KAAKtrB,EAAAyZ,WAAWG,IACd,IAASxb,EAAI,EAAGA,EAAI+wD,IAAe/wD,EACjC4f,EAAA2xC,SAAS1jC,WAAkB5e,GAAQjP,GAAIitB,EAAQC,GAASA,GAAU,EAEpE,MAEF,KAAKtrB,EAAAyZ,WAAWI,IACd,IAASzb,EAAI,EAAGA,EAAI+wD,IAAe/wD,EACjC4f,EAAA4xC,SAAS3jC,WAAkB5e,GAAQjP,GAAIitB,EAAQC,GAASA,GAAU,EAEpE,MAEF,QAME,OALA7kB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf6O,EAAWpS,OAEN1H,EAAO40B,oBAKlB,OAFA7rB,OAAO6kB,GAAUkkC,EAAaN,GAC9BnxD,KAAKo7C,YAAc8V,EAAUllD,KACL,GAAjBwlD,EACH7xD,EAAOmvB,UACLuI,QAAQ7J,EAAQD,QAChB+J,SAAS9J,EAAQD,SAEnB5tB,EAAOgvB,UACL0I,QAAQ7J,EAAQD,SAKtB,MAAM,IAAI3hB,MAAM,oBAIpBsvC,EAAAx5C,UAAAijD,qBAAA,SAAqBvwC,EAA2ByvC,GAC9C,IAAIlkD,EAASK,KAAKL,OACdiE,EAAU5D,KAAK4D,QACfwb,EAAkBpf,KAAKof,gBAGvBxW,EAAW5I,KAAK0W,QAAQrC,kBAC1BD,EAAWA,WACXgL,GAEF,IAAKxW,EAAU,OAAOjJ,EAAO40B,oBAC7B,GAAI3rB,EAASlC,QAAQrB,MAAQ+5B,EAAAt2B,YAAYC,gBAKvC,OAJA/I,KAAKiH,MACHnF,EAAAoF,eAAe4qD,yEACf19C,EAAWA,WAAW/M,OAEjBrH,KAAKL,OAAO40B,oBAErB,IAQI/E,EAPAtW,EADiCtQ,EAASlC,QACXkM,0BACjCwB,EAAWvB,cACX,KACAuB,GAEF,IAAK8E,EAAe,OAAOvZ,EAAO40B,oBAGlC,IAAIxW,EAAsB7E,EAAc6E,oBAcxC,OAVEyR,EADEzR,EACK/d,KAAKmtD,kBAAkBpvC,EAAqB3J,EAAWjH,UAAWiH,EACvExQ,EAAQW,UAAU00C,aAAat5C,IAK1BoyD,EAAa/xD,KAAMkZ,EAAe9E,GAG3CpU,KAAKo7C,YAAcliC,EAAclN,KAC1BwjB,GAGT0rB,EAAAx5C,UAAAkjD,+BAAA,SACExwC,EACAyvC,EACAK,GAGA,YAHA,IAAAA,OAAA,GAGOlkD,KAAK69C,kBACVzpC,EAAWA,WACXyvC,EAAc,EAEdK,IASJhJ,EAAAx5C,UAAAmjD,gCAAA,SACE3wC,EACA2vC,EACAuL,GAEA,IAAI14C,EAAU1W,KAAK0W,QACf/W,EAASK,KAAKL,OAEdiJ,EAAW8N,EAAQzC,sBAAsBC,EAAgBlU,KAAKof,iBAClE,IAAKxW,EAAU,OAAOjJ,EAAO40B,oBAE7B,IACI+3B,EADA5lD,EAAUkC,EAASlC,QAEvB,OAAQA,EAAQrB,MACd,KAAK+5B,EAAAt2B,YAAYa,OACf,GAAIjD,EAAQ+C,GAAG21B,EAAA11B,YAAYkR,QAAUwkB,EAAA11B,YAAYQ,SAC/C,OAAOswC,EAAA+U,mBAA0BvvD,KAAc0G,EAASwN,GAE1D,IAAKlU,KAAKw9C,cAAsB92C,GAC9B,OAAO/G,EAAO40B,oBAEhB,IAAIiC,EAAsB9vB,EAASsF,KAEnC,OADAtD,OAAO8tB,GAAcz0B,EAAA8B,KAAKc,MACb+B,EAAS+C,GAAG21B,EAAA11B,YAAYkO,SAC5B5X,KAAKm+C,sBAA8Bz3C,EAASm9C,EAAgBuL,IAErEpvD,KAAKo7C,YAAc5kB,EACZ72B,EAAO0wB,gBAAyB3pB,EAASI,aAAc0vB,EAAW/a,iBAE3E,KAAK2jB,EAAAt2B,YAAY8K,UACf,OAAK5T,KAAKu+C,YAAwB73C,EAASuQ,OAG3CjX,KAAKo7C,YAAcr5C,EAAA8B,KAAKG,IACR0C,EAAS+C,GAAG21B,EAAA11B,YAAYkO,SAC/BjY,EAAOgvB,UAAsBjoB,EAASsQ,eAExCrX,EAAO0wB,gBAA4B3pB,EAASI,aAAc7E,EAAAyZ,WAAWC,MANnE3b,KAAKL,OAAO40B,oBAQvB,KAAK6K,EAAAt2B,YAAY4L,MASf,OARAhM,OAAOE,EAASyjD,kBAChB3jD,OAAehC,EAASwW,cAAgB,GACxCovC,EAAatsD,KAAK69C,kBACJj1C,EAASuL,iBACrBnU,KAAK4D,QAAQW,UAAS,GAGxBvE,KAAKo7C,YAAsB10C,EAASsF,KAC7BrM,EAAO4wB,WACJ7pB,EAASsF,KAAKosC,MAAQ,EACtB1xC,EAASsF,KAAKvC,GAAG,GACzB6iD,EACQ5lD,EAASsF,KAAKyP,eACd/U,EAASwW,cAGrB,KAAKkiB,EAAAt2B,YAAY8F,SACf,IAAIlN,EAAuBgF,EAASmI,gBACpC,GAAInN,EAAW,CACb,IAAIoK,EAAWpK,EAAUqK,QAAQ,MACjC,IAAKD,EAAU,OAAOnM,EAAO40B,oBAC7B,IAAIliB,EAAYvG,EAASuG,UACzB,IAAKrS,KAAKstD,mBACRj7C,EACA,EACAvG,EAASrC,GAAG21B,EAAA11B,YAAY6O,UACxBrE,GAEA,OAAOvU,EAAO40B,oBAEhB,GAAIzoB,EAASrC,GAAG21B,EAAA11B,YAAY6O,UAAW,CACrC,IAAIjR,EAASoB,OAAOoD,EAAS8J,UAO7B,OANAlN,OAAOpB,EAAOjC,MAAQ+5B,EAAAt2B,YAAY+L,OAClCy3C,EAAatsD,KAAK69C,kBACJj1C,EAASuL,iBACb7M,EAAQ0E,MAElBhM,KAAKo7C,YAAc/oC,EAAUF,WACtBnS,KAAKmtD,kBAAkBrhD,KAAcoI,EAAgBo4C,GAG5D,OADAtsD,KAAKo7C,YAAc/oC,EAAUF,WACtBnS,KAAKmtD,kBAAkBrhD,KAAcoI,GAO9C,OAJAlU,KAAKiH,MACHnF,EAAAoF,eAAe0N,oCACfV,EAAe7M,MAAkBX,EAASqD,WAAuBrD,EAASY,OAAOgH,YAE5E3O,EAAO40B,oBAQpB,OAJAv0B,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfsJ,EAAe7M,OAEV1H,EAAO40B,qBAGhB2mB,EAAAx5C,UAAAojD,yBAAA,SAAyB1wC,EAA+ByvC,GACtD,IAAI/f,EAAS1vB,EAAW0vB,OACpBC,EAAS3vB,EAAW2vB,OAEpB8d,EAAWC,EACb9hD,KAAK69C,kBAAkBzpC,EAAWqe,UAAW1wB,EAAA8B,KAAKQ,IAAG,GACrDrE,KAAKo7C,YACLp7C,KAAKL,QAIP,GACEK,KAAKof,gBAAgB7T,MAAM6zB,EAAA11B,YAAYiQ,QAAUylB,EAAA11B,YAAYy4C,kBAC7DtnB,yBAAyBgnB,EAAW7hD,KAAKo+C,wBAAwByD,KAAc5/C,EAAAsgB,aAAauY,OAC5FC,2BAA2B8mB,IAAa5/C,EAAAyZ,WAAWC,IAEnD,OAAOqf,0BAA0B6mB,GAC7B7hD,KAAK69C,kBAAkB/Z,EAAQ+f,GAC/B7jD,KAAK69C,kBAAkB9Z,EAAQ8f,GAGrC,IACImO,EACAC,EAFA7yC,EAAkBpf,KAAKof,gBAK3B,GAAIA,EAAgB3V,GAAG21B,EAAA11B,YAAY8C,aAAc,CAC/C,IAAIuH,EAAOqL,EAAgBrL,KAE3BA,EAAOA,EAAK0L,qBACZL,EAAgBrL,KAAOA,EACvBi+C,EAAahyD,KAAK69C,kBAAkB/Z,EAAQ+f,GAC5C,IAAIqO,EAAkBn+C,EAAKtK,GAAE,IAC7BsK,EAAOA,EAAK4L,qBACZP,EAAgBrL,KAAOA,EAEvBA,EAAOA,EAAK0L,qBACZL,EAAgBrL,KAAOA,EACvBk+C,EAAajyD,KAAK69C,kBAAkB9Z,EAAQ8f,GAC5C,IAAIsO,EAAkBp+C,EAAKtK,GAAE,IAC7BsK,EAAOA,EAAK4L,qBACZP,EAAgBrL,KAAOA,EAEnBm+C,GAAmBC,GAAiBp+C,EAAKlN,IAAG,SAIhDmrD,EAAahyD,KAAK69C,kBAAkB/Z,EAAQ+f,GAC5CoO,EAAajyD,KAAK69C,kBAAkB9Z,EAAQ8f,GAG9C,OAAO7jD,KAAKL,OAAOqzB,SAAS6uB,EAAUmQ,EAAYC,IAGpD/W,EAAAx5C,UAAAqjD,8BAAA,SAA8B3wC,EAAoCyvC,GAChE,IAcIt0B,EACAwuB,EACAqU,EAsIAC,EAtJA1yD,EAASK,KAAKL,OACdyf,EAAkBpf,KAAKof,gBAGvBkzC,EAAWtyD,KAAK69C,kBAClBzpC,EAAWswB,QACXmf,GAAkB9hD,EAAA8B,KAAKc,KACnB5C,EAAA8B,KAAKG,IACL6/C,EAAc,GAElB,GAEEzI,EAAcp7C,KAAKo7C,YAKnB+L,GAAoB,EAExB,OAAQ/yC,EAAWutB,UACjB,KAAKtC,EAAAC,MAAMoR,UACT,GAAI0K,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAEhB,OAAQ6mB,EAAY/1C,MAClB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE53B,EAAKttB,EAAA2lB,SAAS+2B,OACdZ,EAAa97C,EAAAyZ,WAAWC,IACxBy2C,EAAYzyD,EAAOgvB,UAAU,GAC7B,MAEF,OACA,OAEEY,GADI3rB,EAAU5D,KAAK4D,SACNy4C,SACTp6C,EAAA2lB,SAAS2hC,OACTtnD,EAAA2lB,SAAS+2B,OACbZ,EAAan6C,EAAQu7C,eACrBiT,EAAYhX,EAAYlC,YAAYv5C,GACpC,MAEF,OACA,OACE4vB,EAAKttB,EAAA2lB,SAAS2hC,OACdxL,EAAa97C,EAAAyZ,WAAWE,IACxBw2C,EAAYzyD,EAAOmvB,UAAU,GAC7B,MAEF,QACES,EAAKttB,EAAA2lB,SAAS4hC,OACdzL,EAAa97C,EAAAyZ,WAAWG,IACxBu2C,EAAYzyD,EAAOuvB,UAAU,GAC7B,MAEF,QACEK,EAAKttB,EAAA2lB,SAAS6hC,OACd1L,EAAa97C,EAAAyZ,WAAWI,IACxBs2C,EAAYzyD,EAAOyvB,UAAU,GAC7B,MAEF,QAME,OALA1mB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAGlB,MAEF,KAAK8K,EAAAC,MAAMqR,YACT,GAAIyK,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAEhB,OAAQ6mB,EAAY/1C,MAClB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE53B,EAAKttB,EAAA2lB,SAAS8hC,OACd3L,EAAa97C,EAAAyZ,WAAWC,IACxBy2C,EAAYzyD,EAAOgvB,UAAU,GAC7B,MAEF,OACA,OACE,IAAI/qB,EACJ2rB,GADI3rB,EAAU5D,KAAK4D,SACNy4C,SACTp6C,EAAA2lB,SAAS+hC,OACT1nD,EAAA2lB,SAAS8hC,OACb3L,EAAan6C,EAAQu7C,eACrBiT,EAAYhX,EAAYlC,YAAYv5C,GACpC,MAEF,OACA,OACE4vB,EAAKttB,EAAA2lB,SAAS+hC,OACd5L,EAAa97C,EAAAyZ,WAAWE,IACxBw2C,EAAYzyD,EAAOmvB,UAAU,GAC7B,MAEF,QACES,EAAKttB,EAAA2lB,SAASgiC,OACd7L,EAAa97C,EAAAyZ,WAAWG,IACxBu2C,EAAYzyD,EAAOuvB,UAAU,GAC7B,MAEF,QACEK,EAAKttB,EAAA2lB,SAASiiC,OACd9L,EAAa97C,EAAAyZ,WAAWI,IACxBs2C,EAAYzyD,EAAOyvB,UAAU,GAC7B,MAEF,QAME,OALA1mB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAGlB,MAEF,QAME,OALA7rB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAKlB,IAAIquB,EAA0B,KAyB9B,GAtBIiB,GAAkB9hD,EAAA8B,KAAKc,KACzB0tD,EAAW1yD,EAAO+vB,aAAaH,EAC7B+iC,EACAF,IAKFxP,EAAYxjC,EAAgB7D,aAAa6/B,GACzCiX,EAAW1yD,EAAO+vB,aAAaH,EAC7BvvB,KAAKL,OAAOswB,eAAe2yB,EAAU1qC,MAAO6lC,GAC5CqU,IAIAjL,IACFz+C,OAAO0yC,EAAY3xC,GAAG,KACtB4oD,EAAW1M,EAAqB0M,EAAUjX,EAAaz7C,IAGzD0yD,EAAWryD,KAAK4jD,2BAA2BxvC,EAAWswB,QAAS2tB,GAAU,GAErExO,GAAkB9hD,EAAA8B,KAAKc,KAEzB,OADA+D,QAAQk6C,GACDyP,EAGTryD,KAAKo7C,YAAc1yC,OAAOk6C,GAAW52C,KACrCoT,EAAgBnD,cAAqB2mC,GACrC,IAAI9nC,EAAqB8nC,EAAW1qC,MACpC,OAAOvY,EAAOwyB,YAAY,MACxBxyB,EAAOoyB,eAAejX,EAAYw3C,GAClCD,EACA1yD,EAAOswB,eAAenV,EAAYijC,IACjCA,IAGL7C,EAAAx5C,UAAAsjD,6BAAA,SACE5wC,EACAyvC,EACAK,QAAA,IAAAA,OAAA,GAEA,IAKI10B,EALA7vB,EAASK,KAAKL,OACdy7C,EAAcp7C,KAAKo7C,YAEnB+L,GAAoB,EACpBD,GAAW,EAGf,OAAQ9yC,EAAWutB,UACjB,KAAKtC,EAAAC,MAAM8Q,KACT,GAAIgL,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAEhB/E,EAAOxvB,KAAK69C,kBACVzpC,EAAWswB,QACXmf,GAAkB9hD,EAAA8B,KAAKc,KACnB5C,EAAA8B,KAAKG,IACL6/C,EAAc,GAElB,GAGFsD,GADA/L,EAAcp7C,KAAKo7C,aACa3xC,GAAG,IACnC,MAEF,KAAK41B,EAAAC,MAAM+Q,MACT,GAAI+K,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAEhB,GAAIngB,EAAWswB,QAAQr/B,MAAQrD,EAAAsD,SAAS+H,SAClB+G,EAAWswB,QAASp3B,aAAetL,EAAAuL,YAAY88B,SAC/Cj2B,EAAWswB,QAASp3B,aAAetL,EAAAuL,YAAY68B,MAmBnE,OATA5a,EAAOxvB,KAAK69C,kBACVzpC,EAAWswB,QACXmf,GAAkB9hD,EAAA8B,KAAKc,KACnB5C,EAAA8B,KAAKG,IACL6/C,EAAc,GAElB,IAEFzI,EAAcp7C,KAAKo7C,aACC/1C,MAClB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS8hC,OAAQ/pD,EAAOgvB,UAAU,GAAIa,GACjE,MAEF,OACE,GAAI4rB,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAIlB,OACE/E,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS+hC,OACT1nD,EAAA2lB,SAAS8hC,OACbtO,EAAYnC,aAAat5C,GACzB6vB,GAEF,MAEF,OACA,OACEA,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+hC,OAAQhqD,EAAOmvB,UAAU,GAAIU,GACjE,MAEF,QACEA,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ2tC,OAAQ/iC,GAC1C,MAEF,QACEA,EAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ4tC,OAAQhjC,QAxD9CA,EAAOxvB,KAAK0kD,yBAA4CtwC,EAAWswB,QAASmf,GAAgB,GACxF7jD,KAAK4D,QAAQ2Y,WAEf2kC,EAAiB1xB,EAAMpb,EAAW/M,MAAO1H,EAAQK,KAAKof,iBAExDg8B,EAAcp7C,KAAKo7C,YAwDrB,MAEF,KAAK/b,EAAAC,MAAMoR,UACT,GAAI0K,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAYhB,OAVA2yB,GAAW,EACX13B,EAAOxvB,KAAK69C,kBACVzpC,EAAWswB,QACXmf,GAAkB9hD,EAAA8B,KAAKc,KACnB5C,EAAA8B,KAAKG,IACL6/C,EAAc,GAElB,IAEFzI,EAAcp7C,KAAKo7C,aACC/1C,MAClB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+2B,OAAQnvB,EAAMxvB,KAAKL,OAAOgvB,UAAU,IACxE,MAEF,OACE,GAAIysB,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAIlB,OACE/E,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS2hC,OACTtnD,EAAA2lB,SAAS+2B,OACbnvB,EACA4rB,EAAYlC,YAAYv5C,IAE1B,MAEF,OACA,OACE6vB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS2hC,OAAQ/5B,EAAM7vB,EAAOmvB,UAAU,IACnE,MAEF,QACEU,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS4hC,OAAQh6B,EAAM7vB,EAAOuvB,UAAU,IACnE,MAEF,QACEM,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS6hC,OAAQj6B,EAAM7vB,EAAOyvB,UAAU,IAIvE,MAEF,KAAKiQ,EAAAC,MAAMqR,YACT,GAAIyK,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAYhB,OAVA2yB,GAAW,EACX13B,EAAOxvB,KAAK69C,kBACVzpC,EAAWswB,QACXmf,GAAkB9hD,EAAA8B,KAAKc,KACnB5C,EAAA8B,KAAKG,IACL6/C,EAAc,GAElB,IAEFzI,EAAcp7C,KAAKo7C,aACC/1C,MAClB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS8hC,OAAQl6B,EAAM7vB,EAAOgvB,UAAU,IACnE,MAEF,OACE,GAAIysB,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAIlB,OACE/E,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS+hC,OACT1nD,EAAA2lB,SAAS8hC,OACbl6B,EACA4rB,EAAYlC,YAAYv5C,IAE1B,MAEF,OACA,OACE6vB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+hC,OAAQn6B,EAAM7vB,EAAOmvB,UAAU,IACnE,MAEF,QACEU,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASgiC,OAAQp6B,EAAM7vB,EAAOuvB,UAAU,IACnE,MAEF,QACEM,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASiiC,OAAQr6B,EAAM7vB,EAAOyvB,UAAU,IAIvE,MAEF,KAAKiQ,EAAAC,MAAM4R,YAST1hB,EAAOijC,EARPjjC,EAAOxvB,KAAK69C,kBACVzpC,EAAWswB,QACXmf,GAAkB9hD,EAAA8B,KAAKc,KACnB5C,EAAA8B,KAAKG,IACL6/C,EAAc,GAElB,GAE0B7jD,KAAKo7C,YAAaz7C,GAC9CK,KAAKo7C,YAAcr5C,EAAA8B,KAAKW,KACxB,MAEF,KAAK66B,EAAAC,MAAM6R,MACT,GAAIiK,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAehB,OAbA/E,EAAOxvB,KAAK69C,kBACVzpC,EAAWswB,QACXmf,GAAkB9hD,EAAA8B,KAAKc,KACnB5C,EAAA8B,KAAKG,IACL6/C,EAAep6C,GAAE,GACf1H,EAAA8B,KAAKI,IACL4/C,EACNA,GAAkB9hD,EAAA8B,KAAKc,KACpB,EACA,GACH,IAEFy2C,EAAcp7C,KAAKo7C,aACC/1C,MAClB,OACA,OACA,OACA,OACA,QAAoB8hD,GAAoB,EACxC,QACE33B,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS8jC,OAAQl8B,EAAM7vB,EAAOgvB,WAAW,IACpE,MAEF,OACE,GAAIysB,EAAY3xC,GAAE,KAKhB,OAJAzJ,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAIlB,OACE/E,EAAO7vB,EAAO+vB,aACZ1vB,KAAK4D,QAAQy4C,SACTp6C,EAAA2lB,SAAS+jC,OACT1pD,EAAA2lB,SAAS8jC,OACbl8B,EACA4rB,EAAYjC,eAAex5C,IAE7B,MAEF,OACA,OACE6vB,EAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAAS+jC,OAAQn8B,EAAM7vB,EAAOmvB,WAAW,GAAI,IAI5E,MAEF,KAAKuQ,EAAAC,MAAM6P,OAUT,OAJAnvC,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAEhB,QAME,OALA7rB,QAAO,GACP1I,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACfwJ,EAAW/M,OAEN1H,EAAO40B,oBAOlB,OAJI4yB,GAAqBjD,IACvBx7C,OAAO0yC,EAAY3xC,GAAG,KACtB+lB,EAAOm2B,EAAqBn2B,EAAM4rB,EAAaz7C,IAE1CunD,EACHlnD,KAAK4jD,2BAA2BxvC,EAAWswB,QAASlV,EAAMq0B,GAAkB9hD,EAAA8B,KAAKc,MACjF6qB,GAER0rB,EA1mLA,CAA8Bp5C,EAAA0U,mBA+mL9B,SAAA0qC,EAA0B1xB,EAAqBnoB,EAAc1H,EAAgByf,GAC3E,IAAIxV,EAASvC,EAAMuC,OACfA,EAAO+S,eAAiB,IAC1B/S,EAAO+S,eAAiBhd,EAAO48B,iBAAiB3yB,EAAO6X,iBAEzDpa,EAAMqV,aAAe8S,EAChBpQ,EAAgBlF,iBAAgBkF,EAAgBlF,mBACrDkF,EAAgBlF,eAAerP,KAAKxD,GAItC,SAAAs+C,EAAqCn2B,EAAqBxjB,EAAYrM,GACpE,OAAQqM,EAAK3G,MACX,OACE,OAAO1F,EAAO+vB,aAAaztB,EAAA2lB,SAASsjC,OAClCvrD,EAAO+vB,aAAaztB,EAAA2lB,SAASmjC,OAC3Bv7B,EACA7vB,EAAOgvB,UAAU,KAEnBhvB,EAAOgvB,UAAU,KAGrB,OACE,OAAOhvB,EAAO+vB,aAAaztB,EAAA2lB,SAASsjC,OAClCvrD,EAAO+vB,aAAaztB,EAAA2lB,SAASmjC,OAC3Bv7B,EACA7vB,EAAOgvB,UAAU,KAEnBhvB,EAAOgvB,UAAU,KAGrB,OACE,OAAOhvB,EAAO+vB,aAAaztB,EAAA2lB,SAAS0jC,OAClC97B,EACA7vB,EAAOgvB,UAAU,MAGrB,OACE,OAAOhvB,EAAO+vB,aAAaztB,EAAA2lB,SAAS0jC,OAClC97B,EACA7vB,EAAOgvB,UAAU,QAGrB,QACE,OAAOhvB,EAAO+vB,aAAaztB,EAAA2lB,SAAS0jC,OAClC97B,EACA7vB,EAAOgvB,UAAU,IAGrB,QAEE,OADAjmB,QAAO,GACA8mB,GAMb,SAAAijC,EAA+BjjC,EAAqBxjB,EAAYrM,GAC9D,OAAQqM,EAAK3G,MACX,QACE,OAAO1F,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ8tC,OAAQljC,GAE5C,OACA,OACE,OAAO7vB,EAAO2vB,YAAYrtB,EAAA2iB,QAAQ+tC,OAAQnjC,GAE5C,OACA,OACE,OAAO7vB,EAAO2vB,YAAyB,IAAbtjB,EAAKosC,KAAan2C,EAAA2iB,QAAQ+tC,OAAS1wD,EAAA2iB,QAAQ8tC,OAAQljC,GAE/E,QACE,OAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASohC,MAAOx5B,EAAM7vB,EAAOuvB,UAAU,IAEpE,QACE,OAAOvvB,EAAO+vB,aAAaztB,EAAA2lB,SAASqhC,MAAOz5B,EAAM7vB,EAAOyvB,UAAU,IAEpE,QAEE,OADA1mB,QAAO,GACA/I,EAAOgvB,UAAU,IAM9B,SAAAmzB,EAA8BtyB,EAAqBxjB,EAAYrM,GAC7D,OAAQqM,EAAK3G,MACX,QACE,OAAOmqB,EAET,OACA,OACE,OAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASuhC,MAAO35B,EAAM7vB,EAAOmvB,UAAU,IAEpE,OACA,OACE,OAAoB,IAAb9iB,EAAKosC,KACRz4C,EAAO+vB,aAAaztB,EAAA2lB,SAASuhC,MAAO35B,EAAM7vB,EAAOmvB,UAAU,IAC3DU,EAEN,QACE,OAAO7vB,EAAO+vB,aAAaztB,EAAA2lB,SAASwhC,MAAO55B,EAAM7vB,EAAOuvB,UAAU,IAEpE,QACE,OAAOvvB,EAAO+vB,aAAaztB,EAAA2lB,SAASyhC,MAAO75B,EAAM7vB,EAAOyvB,UAAU,IAEpE,QAEE,OADA1mB,QAAO,GACA/I,EAAOgvB,UAAU,IAM9B,SAAAojC,EAA6Ba,EAAoB15C,EAAsBO,GACrE,QAAI9Z,EAASizD,EAASjzD,OAClByf,EAAkBwzC,EAASxzC,gBAC3B+/B,EAAiByT,EAAShvD,QAAQu7C,eAElCyD,EAAYxjC,EAAgB7D,aAAarC,EAAclN,MAGvDw3C,EAAe,IAAI1+C,MAQvB,GAPA0+C,EAAa34C,KACXlL,EAAOoyB,eAAe6wB,EAAU1qC,MAC9BsiC,EAAAqY,gBAAuBD,EAAU15C,EAAeO,KAKhDP,EAAcpO,YAChB,IAAmB,IAAA/C,EAAAJ,EAAAuR,EAAcpO,QAAQwE,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAA5C,IAAIQ,EAAMsW,EAAAtd,MACb,GAAIgH,EAAOhD,MAAQ+5B,EAAAt2B,YAAY4L,MAAO,CACpC,IAAIo+C,EAAezqD,EACf8V,EAAY20C,EAAM9mD,KAClB+mD,EAAkB50C,EAAU1C,eAC5ByC,EAAmB40C,EAAMpxD,UAAU0F,YAEvC,GADAsB,QAAQoqD,EAAMvnD,MAAM6zB,EAAA11B,YAAYiO,QAC5BuG,EAAiBlG,YACnBwrC,EAAa34C,KAAKlL,EAAOixB,YAAYzS,EAAUE,SAC7C1e,EAAOswB,eAAe2yB,EAAU1qC,MAAOinC,GACvCyT,EAAS/U,kBAAkB3/B,EAAiBlG,YAAamG,GACzD40C,EACAD,EAAM51C,mBAEH,CAEL,IAAIovB,EAAoCwmB,EAAMpxD,UAAU0F,YAAaklC,eACrEkX,EAAa34C,KAAKlL,EAAOixB,YAAYzS,EAAUE,SAC7C1e,EAAOswB,eAAe2yB,EAAU1qC,MAAOinC,GACvC7S,GAAkB,EACd3sC,EAAOswB,eAAe,EAAIqc,EAAgBymB,GAC1C50C,EAAU86B,aAAat5C,GACzBozD,EACFD,EAAM51C,mHAchB,OANAsmC,EAAa34C,KACXlL,EAAOswB,eAAe2yB,EAAU1qC,MAAOinC,IAGzC//B,EAAgBnD,cAAc2mC,GAC9BgQ,EAASxX,YAAcliC,EAAclN,KAC9BrM,EAAOwyB,YAAY,KAAMqxB,EAAcrE,GAIhD,SAAAC,EAAwCwT,EAAoB15C,EAAsBO,GAEhF,IAAI9Z,EAASizD,EAASjzD,OAClBw/C,EAAiByT,EAAShvD,QAAQu7C,eAEtC,OADAyT,EAASxX,YAAcliC,EAAclN,KAC9BrM,EAAOqzB,SACZmsB,GAAkBl9C,EAAAyZ,WAAWE,IACzBjc,EAAO+vB,aACLztB,EAAA2lB,SAASuhC,MACTxpD,EAAOswB,eAAe,EAAGhuB,EAAAyZ,WAAWE,KACpCjc,EAAOmvB,UAAU,IAEnBnvB,EAAOswB,eAAe,EAAGhuB,EAAAyZ,WAAWC,KACxChc,EAAOswB,eAAe,EAAGkvB,GACzBx/C,EAAOwwB,eAAe,EACpB4hC,EAAaa,EAAU15C,EAAeO,KAzyL/B/Z,EAAAw7C,WA0nLbx7C,EAAAimD,uBA8CAjmD,EAAA+yD,iBA2BA/yD,EAAAoiD,gBA6BApiD,EAAAqyD,eA0DAryD,EAAA0/C,yGCl9LA,SAAYl4C,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,iGACAA,IAAA,+EACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,4EACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,kFACAA,IAAA,0CApGF,CAAYxH,EAAAwH,iBAAAxH,EAAAwH,oBAwGZxH,EAAAkhB,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,wBAClB,QAAS,MAAO,sYCjNpB,IAAAqe,EAAAj/B,EAAA,GAOAk/B,EAAAl/B,EAAA,GAOA2B,EAAA3B,EAAA,GAKA8f,EAAA9f,EAAA,GAIA6B,EAAA7B,EAAA,GAsDM6yD,EAAe5zB,EAAA38B,eAAiB,cAGtCwwD,EAAA,SAAAjwD,GAYE,SAAAiwD,IAAA,IAAA/vD,EACEF,EAAAxC,KAAAR,OAAOA,YARTkD,EAAAgwD,QAAoB,IAAIpuD,MAExB5B,EAAAiwD,QAAuB,IAAInjD,IAE3B9M,EAAAyvC,UAAmC,KA6b3BzvC,EAAAkwD,8BAAqC,EAxb3ClwD,EAAKwT,QAAU,IAAI0oB,EAAAr8B,QAAQG,EAAKD,eA4iGpC,OA1jG4BS,EAAAuvD,EAAAjwD,GAkB1BiwD,EAAAvxD,UAAA2xD,UAAA,SACE5rD,EACAF,EACA0D,GAQA,IANA,IAAIyL,EAAU1W,KAAK0W,QAGf+K,EAAiBxB,EAAA+lB,cAAcz+B,GAC/BqI,EAAe5N,EAAAmkC,mBAAmB1kB,GAClChe,EAAUiT,EAAQjT,QACbpD,EAAI,EAAG2E,EAAIvB,EAAQwB,OAAQ5E,EAAI2E,IAAK3E,EAC3C,GAAIoD,EAAQpD,GAAGuP,cAAgBA,EAAc,OAE/C5P,KAAKmzD,QAAQljD,IAAIL,GAGjB,IAAIhG,EAAS,IAAI5H,EAAAipC,OACfxpB,EACAha,EACAwD,EACIjJ,EAAA+oC,WAAWK,MACX7jC,EAAK0+B,WAAW7G,EAAA38B,iBAAmB8E,EAAK+rD,QAAQl0B,EAAAl9B,eAAgBk9B,EAAA38B,eAAewC,QAAU,EACvFjD,EAAA+oC,WAAWM,QACXrpC,EAAA+oC,WAAW/4B,SAEnBvO,EAAQoH,KAAKjB,GAGTA,EAAO6X,gBAAkBuxC,GAC3BppD,EAAO/C,IAAIu4B,EAAA11B,YAAYQ,SAIzB,IAAIqpD,EAAK,IAAIl0B,EAAAiT,UAAU1oC,EAAQ8M,EAAQzT,aACvCswD,EAAG5gB,UAAY3yC,KAAK2yC,UACpB/oC,EAAOshC,UAAYqoB,EAEnB,IADA,IAAIruD,EAAa0E,EAAO1E,YAChBquD,EAAGre,KAAK7V,EAAAC,MAAMsV,YAAY,CAChC,IAAIxvC,EAAYpF,KAAKwzD,uBAAuBD,GACxCnuD,IACFA,EAAUkC,OAASsC,EACnB1E,EAAW2F,KAAKzF,IAGpBmuD,EAAGtb,UAILgb,EAAAvxD,UAAA8xD,uBAAA,SACED,EACAppD,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIwM,EAAQyoB,EAAA11B,YAAYkN,KACpB68C,GAAiB,EAGjB5mD,EAAqC,KAClC0mD,EAAGre,KAAK7V,EAAAC,MAAM8U,KAAK,CACpBqf,EAAW,IAAGA,EAAWF,EAAGhhB,UAChC,IAAIzlC,EAAY9M,KAAK0zD,eAAeH,GACpC,IAAKzmD,EAAW,MAChB,IAAIlM,EAAOkM,EAAUlM,KACrB,GAAIA,EAAKyE,MAAQrD,EAAAsD,SAAS0Q,WAAY,CACpC,IAAIvO,EAA8B7G,EAAM6G,KACxC,GAAY,UAARA,EAAkB,CACpBkP,GAASyoB,EAAA11B,YAAYC,OACrB,SAEF,GAAY,cAARlC,EAAsB,CACxBkP,GAASyoB,EAAA11B,YAAYc,UACrB,SAEF,GAAY,UAAR/C,EAAkB,CACpBkP,GAASyoB,EAAA11B,YAAY6T,OACrB,UAGC1Q,IAAYA,MACjBA,EAAWhC,KAAKiC,GAIlB6J,GAAU48C,EAAG3pD,OAAO+M,MAAQyoB,EAAA11B,YAAYQ,QAGxC,IAAIypD,EAAmB,EACnBC,EAAiB,EACjBL,EAAGre,KAAK7V,EAAAC,MAAM35B,UACZ8tD,EAAW,IAAGA,EAAWF,EAAGhhB,UAChC57B,GAASyoB,EAAA11B,YAAY/D,OACrBguD,EAAcJ,EAAGhhB,SACjBqhB,EAAYL,EAAGlhB,KAGjB,IAEIwhB,EAAgC,MAAb1pD,GAAqBA,EAAUV,GAAG21B,EAAA11B,YAAYkR,SACjE24C,EAAGre,KAAK7V,EAAAC,MAAMzkB,UACZ44C,EAAW,IAAGA,EAAWF,EAAGhhB,UAC5BshB,GACF7zD,KAAKiH,MACHnF,EAAAoF,eAAe4sD,gEACfP,EAAGlsD,SAGPsP,GAASyoB,EAAA11B,YAAYmR,QAAUukB,EAAA11B,YAAYkR,SAClCi5C,IACTl9C,GAASyoB,EAAA11B,YAAYkR,SAIvB,IAAIxV,EAA8B,KAG9B2uD,EAAQR,EAAG1e,OAEf,OADI4e,EAAW,IAAGA,EAAWF,EAAG9gB,cACxBshB,GACN,KAAK10B,EAAAC,MAAM3nB,MAGT,GAFA47C,EAAG1rD,OACH8O,GAASyoB,EAAA11B,YAAYiO,MACjB47C,EAAGre,KAAK7V,EAAAC,MAAMvoB,MAAO,CACvB3R,EAAYpF,KAAKg0D,UAAUT,EAAI58C,EAAO9J,EAAY4mD,GAClD,MAEAruD,EAAYpF,KAAKi0D,cAAcV,EAAI58C,EAAO9J,EAAY4mD,GACtD5mD,EAAa,KAEf,MAEF,KAAKwyB,EAAAC,MAAMqP,IAAKh4B,GAASyoB,EAAA11B,YAAYilC,IACrC,KAAKtP,EAAAC,MAAM8P,IACTmkB,EAAG1rD,OACHzC,EAAYpF,KAAKi0D,cAAcV,EAAI58C,EAAO9J,EAAY4mD,GACtD5mD,EAAa,KACb,MAEF,KAAKwyB,EAAAC,MAAMvoB,KACTw8C,EAAG1rD,OACHzC,EAAYpF,KAAKg0D,UAAUT,EAAI58C,EAAO9J,EAAY4mD,GAClD5mD,EAAa,KACb,MAEF,KAAKwyB,EAAAC,MAAMxlB,SACTy5C,EAAG1rD,OACHzC,EAAYpF,KAAKk0D,cAAcX,EAAI58C,EAAO9J,EAAY4mD,GACtD5mD,EAAa,KACb,MAEF,KAAKwyB,EAAAC,MAAMoO,SAGT,GAFA6lB,EAAG1rD,OACH8O,GAASyoB,EAAA11B,YAAYgkC,UAChB6lB,EAAGre,KAAK7V,EAAAC,MAAMzqB,OAAQ,CACzB7U,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,MAAMksD,EAAGlhB,KAAM,SAEpB,MAIJ,KAAKhT,EAAAC,MAAMzqB,MACT0+C,EAAG1rD,OACHzC,EAAYpF,KAAKm0D,WAAWZ,EAAI58C,EAAO9J,EAAY4mD,GACnD5mD,EAAa,KACb,MAEF,KAAKwyB,EAAAC,MAAMxoB,UACTy8C,EAAG1rD,OACHzC,EAAYpF,KAAKo0D,eAAeb,EAAI58C,EAAO9J,EAAY4mD,GACvD5mD,EAAa,KACb,MAEF,KAAKwyB,EAAAC,MAAMv5B,OACTwtD,EAAG1rD,OAGDzC,GAFFuR,GAASyoB,EAAA11B,YAAY3D,QACTq5B,EAAA11B,YAAY/D,OACV3F,KAAKq0D,kBAAkBd,EAAIE,GAE3BzzD,KAAKs0D,YAAYf,GAE/B,MAEF,KAAKl0B,EAAAC,MAAMkK,KACT+pB,EAAG1rD,OACHzC,EAAYpF,KAAKu0D,qBAAqBhB,EAAI58C,EAAO9J,EAAY4mD,GAC7D5mD,EAAa,KACb,MAEF,QAGM8J,EAAQyoB,EAAA11B,YAAY/D,OACtBP,EAAYpF,KAAKw0D,YAAYjB,EAAI58C,EAAO88C,IAIpCG,GACF5zD,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAAMssD,EAAaC,GAAY,UASjCzpD,IACH/E,EAAYpF,KAAK00D,eAAenB,GAAI,KAQ5C,GAAI1mD,EACF,IAAK,IAAIxM,EAAI,EAAG2E,EAAI6H,EAAW5H,OAAQ5E,EAAI2E,IAAK3E,EAC9CL,KAAKiH,MACHnF,EAAAoF,eAAeytD,8BACf9nD,EAAWxM,GAAGgH,OAIpB,OAAOjC,GAIT6tD,EAAAvxD,UAAAkzD,SAAA,WACE,IAAI1B,EAAUlzD,KAAKkzD,QACnB,OAAOA,EAAQjuD,OAASiuD,EAAQnP,QAAU,MAI5CkP,EAAAvxD,UAAAu2C,OAAA,WACE,GAAIj4C,KAAKkzD,QAAQjuD,OAAQ,MAAM,IAAI2G,MAAM,wBAGzC,OAFA5L,KAAKkzD,WACLlzD,KAAKmzD,QAAQ0B,QACN70D,KAAK0W,SAIdu8C,EAAAvxD,UAAAozD,UAAA,SACEvB,EACAwB,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAUIhpD,EAVAyjC,EAAQ8jB,EAAG1rD,OACX4rD,EAAWF,EAAGhhB,SAGlB,GAAI9C,GAASpQ,EAAAC,MAAM0N,KACjB,OAAOhrC,EAAAu9B,KAAKC,WACVx9B,EAAAu9B,KAAKM,2BAA2B,OAAQ0zB,EAAGlsD,aAAc,EAAOksD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAO1F,GAAI5C,GAASpQ,EAAAC,MAAM0T,UAAW,CAG5B,IAAIiiB,EAAsB1B,EAAGre,KAAK7V,EAAAC,MAAM0T,WAEpC3gC,EAAYrS,KAAKk1D,kBAAkB3B,GACvC,GAAIlhD,EAAW,CACb,GAAI4iD,EAAqB,CACvB,IAAK1B,EAAGre,KAAK7V,EAAAC,MAAM2T,YAKjB,OAJAjzC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAET,IAAKksD,EAAGre,KAAK7V,EAAAC,MAAM0R,KAKjB,OAJAhxC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAEJksD,EAAGre,KAAK7V,EAAAC,MAAMiL,OACjBvqC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,QAGhBgL,EAAUotB,YAAa,EAEzB,OAAOptB,EACF,GAAI4iD,GAAuBj1D,KAAKozD,6BAKrC,OAJApzD,KAAKiH,MACHnF,EAAAoF,eAAeiuD,iBACf5B,EAAGlsD,SAEE,KAIT,IAAI0tD,EAoBF,OAJA/0D,KAAKiH,MACHnF,EAAAoF,eAAeiuD,iBACf5B,EAAGlsD,SAEE,KAnBP,IAAI+tD,EAAYp1D,KAAK80D,UAAUvB,GAAI,EAAOyB,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAK7B,EAAGre,KAAK7V,EAAAC,MAAM2T,YAOjB,OANK+hB,GACHh1D,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,MAAMksD,EAAGlhB,KAAM,KAGf,MAETrmC,EAAOopD,GACF/tD,MAAMwa,MAAQ4xC,EACnBznD,EAAK3E,MAAMya,IAAMyxC,EAAGlhB,SAUjB,GAAI5C,GAASpQ,EAAAC,MAAM3pB,KACxB3J,EAAOhK,EAAAu9B,KAAKC,WACVx9B,EAAAu9B,KAAK8E,qBAAqBkvB,EAAGlsD,aAAc,EAAOksD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,WAIrE,GAAI5C,GAASpQ,EAAAC,MAAMoL,MAAQ+E,GAASpQ,EAAAC,MAAMqL,MAC/C3+B,EAAOhK,EAAAu9B,KAAKC,WACVx9B,EAAAu9B,KAAKM,2BAA2B,OAAQ0zB,EAAGlsD,aAAc,EAAOksD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,WAInF,GAAI5C,GAASpQ,EAAAC,MAAMyT,cACxBwgB,EAAGv5B,aACHhuB,EAAOhK,EAAAu9B,KAAKC,WACVx9B,EAAAu9B,KAAKM,2BAA2B,SAAU0zB,EAAGlsD,aAAc,EAAOksD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,UAIrF,IAAI5C,GAASpQ,EAAAC,MAAMtpB,WA6CxB,OANKg/C,GACHh1D,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGA,KA5CP,IAAIwI,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACrE+4B,EAAa,IAAIt7B,MACjBwwD,GAAW,EAGf,GAAI/B,EAAGre,KAAK7V,EAAAC,MAAMsQ,UAAW,CAC3B,EAAG,CACD,IAAI2lB,EAAYv1D,KAAK80D,UAAUvB,GAAI,EAAMyB,GACzC,IAAKO,EAAW,OAAO,KACvBn1B,EAAWv1B,KAAe0qD,SACnBhC,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAMuQ,aAOjB,OANKmlB,GACHh1D,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,MAAMksD,EAAGlhB,KAAM,KAGf,KAIX,GAAIkhB,EAAGre,KAAK7V,EAAAC,MAAM0R,KAAM,CACtB,IAAIuiB,EAAGre,KAAK7V,EAAAC,MAAMiL,MAShB,OANKyqB,GACHh1D,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,MAAMksD,EAAGlhB,KAAM,QAGf,KARPijB,GAAW,EAWftpD,EAAOhK,EAAAu9B,KAAKC,WAAW3vB,EAAYuwB,EAAYk1B,EAAU/B,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAYjF,KAAOkhB,EAAGre,KAAK7V,EAAAC,MAAM0U,cAAc,CACjC,IAAIwhB,EAAejC,EAAGhhB,SACtB,IAAKghB,EAAGre,KAAK7V,EAAAC,MAAM2U,cAOjB,OANK+gB,GACHh1D,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAGT,KAET,IAAIouD,EAAelC,EAAGlsD,MAAMmuD,EAAcjC,EAAGlhB,KAGzCijB,GAAW,EACf,GAAI/B,EAAGre,KAAK7V,EAAAC,MAAM0R,KAAM,CACtB,IAAIuiB,EAAGre,KAAK7V,EAAAC,MAAMiL,MAShB,OANKyqB,GACHh1D,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,QAGT,KARPiuD,GAAW,EAiBf,GANAtpD,EAAOhK,EAAAu9B,KAAKC,WACVx9B,EAAAu9B,KAAKM,2BAA2B,QAAS41B,IACvCzpD,GACFspD,EACA/B,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEpBijB,EAAU,MAGhB,OAAOtpD,GAOTinD,EAAAvxD,UAAAwzD,kBAAA,SACE3B,GAKA,IAmGIphD,EAnGAijC,EAAQme,EAAGpe,OACXse,EAAWF,EAAGhhB,SACdnS,EAAqC,KACrC/uB,EAA4B,KAC5BqkD,GAAoB,EAExB,GAAInC,EAAGre,KAAK7V,EAAAC,MAAM2T,YAChByiB,GAAc,EACdnC,EAAGhe,QAAQH,GACXhV,SAEK,CACLs1B,GAAc,EACd,EAAG,CACD,IAAIrwD,EAAOrD,EAAA+P,cAAcC,QAMzB,GALIuhD,EAAGre,KAAK7V,EAAAC,MAAMqQ,eAChB+lB,GAAc,EACdnC,EAAGhe,QAAQH,GACX/vC,EAAOrD,EAAA+P,cAAcE,MAEnBshD,EAAGre,KAAK7V,EAAAC,MAAM3pB,MAAO,CACvB,IAAI49C,EAAGre,KAAK7V,EAAAC,MAAMsU,OAiBhB,OAFA2f,EAAG/d,MAAMJ,GACTp1C,KAAKozD,8BAA+B,EAC7B,KAhBPsC,GAAc,EACdnC,EAAGhe,QAAQH,GACX,IAAIugB,EAAI31D,KAAK80D,UAAUvB,GAAI,GAC3B,IAAKoC,EAAG,OAAO,KACf,GAAIA,EAAEtwD,MAAQrD,EAAAsD,SAASkkC,KAMrB,OALAxpC,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf+qD,EAAEtuD,OAEJrH,KAAKozD,8BAA+B,EAC7B,KAET/hD,EAAqBskD,MAMlB,KAAIpC,EAAGre,KAAK7V,EAAAC,MAAMtpB,YA8CvB,OATI0/C,EACF11D,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGLksD,EAAG/d,MAAMJ,GAEXp1C,KAAKozD,6BAA+BsC,EAC7B,KA7CP,IAAI90D,EAAOoB,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,MAAMksD,EAAGhhB,SAAUghB,EAAGlhB,MAazF,GAZIkhB,EAAGre,KAAK7V,EAAAC,MAAMyU,YAChB2hB,GAAc,EACdnC,EAAGhe,QAAQH,GACP/vC,GAAQrD,EAAA+P,cAAcE,KACxBjS,KAAKiH,MACHnF,EAAAoF,eAAe0uD,oCACfrC,EAAGlsD,SAGLhC,EAAOrD,EAAA+P,cAAc8jD,UAGrBtC,EAAGre,KAAK7V,EAAAC,MAAMsU,OAAQ,CACxB8hB,GAAc,EACdnC,EAAGhe,QAAQH,GACX,IAAIppC,EAAOhM,KAAK80D,UAAUvB,GAC1B,IAAKvnD,EAEH,OADAhM,KAAKozD,6BAA+BsC,EAC7B,KAET,IAAII,EAAQ,IAAI9zD,EAAAk+B,cAChB41B,EAAMhkD,cAAgBzM,EACtBywD,EAAMl1D,KAAOA,EACbk1D,EAAM9pD,KAAOA,EACRo0B,EACAA,EAAWv1B,KAAKirD,GADJ11B,GAAe01B,QAG5BJ,GACF11D,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACf2V,EAAGlsD,gBAgBJksD,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAM2T,YAMjB,OALAjzC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEdrH,KAAKozD,6BAA+BsC,EAC7B,KAKX,OAAInC,EAAGre,KAAK7V,EAAAC,MAAMwU,qBAChB4hB,GAAc,EACdnC,EAAGhe,QAAQH,IACXjjC,EAAanS,KAAK80D,UAAUvB,KAiB9BvzD,KAAKozD,8BAA+B,EAC7BpxD,EAAAu9B,KAAKY,gBACVC,MACAjuB,EACAd,GACA,EACAkiD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,QArBpBryC,KAAKozD,6BAA+BsC,EAC7B,QAGLA,EACF11D,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,MAGdksD,EAAG/d,MAAMJ,GAEXp1C,KAAKozD,6BAA+BsC,EAC7B,OAcXzC,EAAAvxD,UAAAgyD,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAGhhB,SAClB,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAAa,CAG7B,IAFA,IAAIpV,EAAO2yD,EAAG9d,iBACVrhC,EAAyBpS,EAAAu9B,KAAKM,2BAA2Bj/B,EAAM2yD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAClFkhB,EAAGre,KAAK7V,EAAAC,MAAM8T,MAAM,CACzB,IAAImgB,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAYhB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KAXPzG,EAAO2yD,EAAG9d,iBACVrhC,EAAapS,EAAAu9B,KAAKgE,+BAChBnvB,EACApS,EAAAu9B,KAAKM,2BAA2Bj/B,EAAM2yD,EAAGlsD,SACzCksD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAU5B,IAAI7R,OAAI,EACR,IAAI+yB,EAAGre,KAAK7V,EAAAC,MAAM0T,WAMhB,OAAOhxC,EAAAu9B,KAAKgB,gBAAgBnsB,EAAY,KAAMm/C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAJpE,GADA7R,EAAOxgC,KAAK+1D,eAAexC,GAEzB,OAAOvxD,EAAAu9B,KAAKgB,gBAAgBnsB,EAAYosB,EAAM+yB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,WAMxEryC,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGP,OAAO,MAGT4rD,EAAAvxD,UAAAuyD,cAAA,SACEV,EACA58C,EACA9J,EACA4mD,GAKA,IAAI3oD,EAAU,IAAIhG,MAClB,EAAG,CACD,IAAIuD,EAASrI,KAAKg2D,yBAAyBzC,EAAI58C,EAAO9J,GACtD,IAAKxE,EAAQ,OAAO,KACpByC,EAAQD,KAA0BxC,SAC3BkrD,EAAGre,KAAK7V,EAAAC,MAAM6K,QAEvB,IAAIpuB,EAAM/Z,EAAAu9B,KAAKwJ,wBAAwBj+B,EAAS+B,EAAY8J,EAAO48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEzF,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAAs0D,yBAAA,SACEzC,EACA0C,EACAC,GAKA,IAAK3C,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAKjB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KAET,IAAIwI,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACrEsP,EAAQs/C,EAERjqD,EAA8B,KAC9BunD,EAAGre,KAAK7V,EAAAC,MAAMsU,SAChB5nC,EAAOhM,KAAK80D,UAAUvB,IAGxB,IAAIv7C,EAAiC,KACrC,GAAIu7C,EAAGre,KAAK7V,EAAAC,MAAMgS,SAQhB,GAPI36B,EAAQyoB,EAAA11B,YAAYkR,SACtB5a,KAAKiH,MACHnF,EAAAoF,eAAeivD,iDACf5C,EAAGlsD,WAGP2Q,EAAchY,KAAKo2D,gBAAgB7C,EAAI,IACrB,OAAO,UAErB58C,EAAQyoB,EAAA11B,YAAYiO,MAChBhB,EAAQyoB,EAAA11B,YAAYkR,SACxB5a,KAAKiH,MACHnF,EAAAoF,eAAey8C,wCACf9zC,EAAWxI,OAGL2E,GACVhM,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACf2V,EAAGlsD,MAAMksD,EAAGlhB,MAIlB,OAAOrwC,EAAAu9B,KAAK0J,0BACVp5B,EACA7D,EACAgM,EACAk+C,EACAv/C,EACA0oB,EAAA30B,MAAMC,KAAKkF,EAAWxI,MAAOksD,EAAGlsD,WAIpC4rD,EAAAvxD,UAAAsyD,UAAA,SACET,EACA58C,EACA9J,EACA4mD,GAKA,GAAIF,EAAG1rD,QAAUw3B,EAAAC,MAAMtpB,WAKrB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KAET,IAAIwI,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACzE,GAAIksD,EAAG1rD,QAAUw3B,EAAAC,MAAM4U,UAKrB,OAJAl0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAET,IAAIyD,EAAU,IAAIhG,MAClB,IAAKyuD,EAAGre,KAAK7V,EAAAC,MAAM6U,YAAa,CAC9B,EAAG,CACD,IAAI9rC,EAASrI,KAAKq2D,eAAe9C,EAAIn0B,EAAA11B,YAAYkN,MACjD,IAAKvO,EAAQ,OAAO,KACpByC,EAAQD,KAA2BxC,SAC5BkrD,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAM6U,YAKjB,OAJAn0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAGX,IAAI0U,EAAM/Z,EAAAu9B,KAAKmG,sBACb71B,EACA/E,EACA+B,EACA8J,EACA48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAGxB,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAA20D,eAAA,SACE9C,EACA0C,GAKA,IAAK1C,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAKjB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KAET,IAAIwI,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACrEhG,EAA2B,KAC/B,OAAIkyD,EAAGre,KAAK7V,EAAAC,MAAMgS,WAChBjwC,EAAQrB,KAAKo2D,gBAAgB7C,EAAI,IACd,KAEdvxD,EAAAu9B,KAAKqG,2BACV/1B,EACAxO,EACA40D,EACA52B,EAAA30B,MAAMC,KAAKkF,EAAWxI,MAAOksD,EAAGlsD,WAIpC4rD,EAAAvxD,UAAA40D,YAAA,SACE/C,GAKA,IAAI/jC,EAA0B,KAC9B,GACE+jC,EAAG1e,MAAK,IAASxV,EAAAC,MAAMuU,WACvB0f,EAAG/gB,WAAanT,EAAAC,MAAM6U,aACrBof,EAAG7gB,sBAEEljB,EAAOxvB,KAAKo2D,gBAAgB7C,IAAM,OAAO,KAGjD,IAAIx3C,EAAM/Z,EAAAu9B,KAAKwI,sBAAsBvY,EAAM+jC,EAAGlsD,SAE9C,OADAksD,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAA60D,oBAAA,SACEhD,GAKA,IAAIziD,EAAiB,IAAIhM,MACzB,GAAKyuD,EAAGre,KAAK7V,EAAAC,MAAMuQ,aAcjB7vC,KAAKiH,MACHnF,EAAAoF,eAAesvD,oCACfjD,EAAGlsD,aAhB0B,CAC/B,EAAG,CACD,IAAIovD,EAAgBz2D,KAAK02D,mBAAmBnD,GAC5C,IAAKkD,EAAe,OAAO,KAC3B3lD,EAAejG,KAAwB4rD,SAChClD,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAMuQ,aAKjB,OAJA7vC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAQX,OAAOyJ,GAGTmiD,EAAAvxD,UAAAg1D,mBAAA,SACEnD,GAKA,GAAIA,EAAG1rD,QAAUw3B,EAAAC,MAAMtpB,WAAY,CACjC,IAAInG,EAAa7N,EAAAu9B,KAAKM,2BACpB0zB,EAAG9d,iBACH8d,EAAGlsD,SAEDsB,EAA+B,KACnC,GAAI4qD,EAAGre,KAAK7V,EAAAC,MAAM6O,SAAU,CAC1B,IAAIwnB,EAAI31D,KAAK80D,UAAUvB,GACvB,IAAKoC,EAAG,OAAO,KACf,GAAIA,EAAEtwD,MAAQrD,EAAAsD,SAASkkC,KAKrB,OAJAxpC,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf+qD,EAAEtuD,OAEG,KAETsB,EAAwBgtD,EAE1B,OAAO3zD,EAAAu9B,KAAKO,oBACVjwB,EACAlH,EACA02B,EAAA30B,MAAMC,KAAKkF,EAAWxI,MAAOksD,EAAGlsD,UAQpC,OALErH,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGA,MAGT4rD,EAAAvxD,UAAAi1D,gBAAA,SACEpD,EACArU,QAAA,IAAAA,OAAA,GAKA,IAAI9e,EAAa,IAAIt7B,MACjB8xD,EAAiC,KACjCC,GAAe,EACfC,GAAe,EAEnB,GAAIvD,EAAG1e,QAAUxV,EAAAC,MAAM2T,WACrB,EAAG,CACD,IAAI6iB,EAAQ91D,KAAK+2D,eAAexD,EAAIrU,GACpC,IAAK4W,EAAO,OAAO,KAQnB,OAPIc,IAAaE,IACf92D,KAAKiH,MACHnF,EAAAoF,eAAe8vD,kDACfJ,EAASh2D,KAAKyG,OAEhByvD,GAAe,GAEThB,EAAMhkD,eACZ,QACM+kD,GACF72D,KAAKiH,MACHnF,EAAAoF,eAAe+vD,yDACfnB,EAAMl1D,KAAKyG,OAGf,MAEF,KAAKrF,EAAA+P,cAAc8jD,SACjBgB,GAAe,EACf,MAEF,KAAK70D,EAAA+P,cAAcE,KACjB2kD,EAAWd,EAIf11B,EAAWv1B,KAAKirD,SACTvC,EAAGre,KAAK7V,EAAAC,MAAM6K,QAEzB,OAAKopB,EAAGre,KAAK7V,EAAAC,MAAM2T,YAOZ7S,GANLpgC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,OAKX4rD,EAAAvxD,UAAAq1D,eAAA,SACExD,EACArU,QAAA,IAAAA,OAAA,GAKA,IAAIgY,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2Bj4B,EAAA11B,YAAYkN,KAkD3C,GAjDI28C,EAAGre,KAAK7V,EAAAC,MAAM2P,SAChBmoB,EAAa7D,EAAGlsD,QACX63C,GACHl/C,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACf2C,EAAY,UAGhBC,GAAej4B,EAAA11B,YAAYulC,QAClBskB,EAAGre,KAAK7V,EAAAC,MAAM0P,YACvBooB,EAAa7D,EAAGlsD,QACX63C,GACHl/C,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACf2C,EAAY,aAGhBC,GAAej4B,EAAA11B,YAAYslC,WAClBukB,EAAGre,KAAK7V,EAAAC,MAAMyP,WACvBqoB,EAAa7D,EAAGlsD,QACX63C,GACHl/C,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACf2C,EAAY,WAGhBC,GAAej4B,EAAA11B,YAAYqlC,SAEzBwkB,EAAGre,KAAK7V,EAAAC,MAAM4P,YACXkoB,IAAYA,EAAa7D,EAAGlsD,SAC5B63C,GACHl/C,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACf2C,EAAY,YAGhBC,GAAej4B,EAAA11B,YAAYwlC,UAEzBqkB,EAAGre,KAAK7V,EAAAC,MAAMqQ,eACZ0nB,EACFr3D,KAAKiH,MACHnF,EAAAoF,eAAeowD,+DACf/D,EAAGlsD,SAGL+vD,EAAa7D,EAAGlsD,QAElB6vD,GAAS,GAEP3D,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAAa,CACxBkhD,IAAQE,EAAa7D,EAAGlsD,SAC7B,IAAIwI,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACrE2E,EAA8B,KASlC,IARImrD,EAAa5D,EAAGre,KAAK7V,EAAAC,MAAMyU,YACzBmjB,GACFl3D,KAAKiH,MACHnF,EAAAoF,eAAe0uD,oCACf/lD,EAAWxI,OAIbksD,EAAGre,KAAK7V,EAAAC,MAAMsU,QAEhB,KADA5nC,EAAOhM,KAAK80D,UAAUvB,IACX,OAAO,UAElBvnD,EAAOhK,EAAAu9B,KAAKK,kBAAkB2zB,EAAGlsD,MAAMksD,EAAGlhB,MAE5C,IAAIr6B,EAAiC,KACrC,GAAIu7C,EAAGre,KAAK7V,EAAAC,MAAMgS,UACZ4lB,GACFl3D,KAAKiH,MACHnF,EAAAoF,eAAeqwD,4CACf1nD,EAAWxI,OAGX8vD,EACFn3D,KAAKiH,MACHnF,EAAAoF,eAAeswD,oDACf3nD,EAAWxI,OAGb8vD,GAAa,IAEfn/C,EAAchY,KAAKo2D,gBAAgB7C,EAAI,KACrB,OAAO,KAE3B,IAAIuC,EAAQ9zD,EAAAu9B,KAAKU,gBACfpwB,EACA7D,EACAgM,EACAk/C,EACIl1D,EAAA+P,cAAcE,KACdklD,EACEn1D,EAAA+P,cAAc8jD,SACd7zD,EAAA+P,cAAcC,QACpBqtB,EAAA30B,MAAMC,KAAYysD,EAAY7D,EAAGlsD,UAGnC,OADAyuD,EAAMn/C,OAAS0gD,EACRvB,EAOT,OALE91D,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGA,MAGT4rD,EAAAvxD,UAAAwyD,cAAA,SACEX,EACA58C,EACA9J,EACA4mD,GAUA,IAAKF,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAKjB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,MAAMksD,EAAGlhB,MAEP,KAGT,IAAIzxC,EAAOoB,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SAC/DowD,GAAuB,EAEvB3mD,EAA6C,KACjD,GAAIyiD,EAAGre,KAAK7V,EAAAC,MAAMsQ,UAAW,CAG3B,GAFA6nB,EAAiBlE,EAAGhhB,WACpBzhC,EAAiB9Q,KAAKu2D,oBAAoBhD,IACrB,OAAO,KAC5B58C,GAASyoB,EAAA11B,YAAYiQ,QAGvB,IAAK45C,EAAGre,KAAK7V,EAAAC,MAAM0T,WAKjB,OAJAhzC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,MAAMksD,EAAGlhB,KAAM,KAEb,KAGLolB,EAAiB,IACnBA,EAAiBlE,EAAGhhB,UAGtB,IAAInS,EAAapgC,KAAK22D,gBAAgBpD,GACtC,IAAKnzB,EAAY,OAAO,KAExB,IAAIs3B,EAAwC,IAA5B/gD,EAAQyoB,EAAA11B,YAAY+B,KAChCisD,IACuB,GAArBt3B,EAAWn7B,QACbjF,KAAKiH,MACHnF,EAAAoF,eAAeywD,+CACf/2D,EAAKyG,OAGL+4B,EAAWn7B,QAAUm7B,EAAW,GAAGpoB,aACrChY,KAAKiH,MACHnF,EAAAoF,eAAe0wD,oDACfh3D,EAAKyG,QAKPsP,EAAQyoB,EAAA11B,YAAY8B,KAClB40B,EAAWn7B,QACbjF,KAAKiH,MACHnF,EAAAoF,eAAe2wD,sCACfj3D,EAAKyG,OAKX,IAAI8K,EAAoC,KACxC,GAAIohD,EAAGre,KAAK7V,EAAAC,MAAMsU,UAChBzhC,EAAanS,KAAK80D,UAAUvB,GAAI,EAAMmE,IACrB,OAAO,KAGrBvlD,IACHA,EAAanQ,EAAAu9B,KAAKK,kBAChB2zB,EAAGlsD,MAAMksD,EAAGlhB,MAETqlB,GACH13D,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACfzrC,EAAW9K,QAKjB,IAAIgL,EAAYrQ,EAAAu9B,KAAKY,gBACnBC,EACAjuB,EACA,MACA,EACAohD,EAAGlsD,MAAMowD,EAAgBlE,EAAGlhB,MAG1Bvf,EAAyB,KAC7B,GAAIygC,EAAGre,KAAK7V,EAAAC,MAAM4U,YAShB,GARIv9B,EAAQyoB,EAAA11B,YAAYkR,SACtB5a,KAAKiH,MACHnF,EAAAoF,eAAe83C,yDACfuU,EAAGlsD,WAIPyrB,EAAO9yB,KAAK83D,oBAAoBvE,GAAI,IACzB,OAAO,UACP58C,EAAQyoB,EAAA11B,YAAYkR,SAC/B5a,KAAKiH,MACHnF,EAAAoF,eAAe+3C,gFACfsU,EAAGlsD,MAAMksD,EAAGlhB,MAIhB,IAAIt2B,EAAM/Z,EAAAu9B,KAAKkI,0BACb7mC,EACAkQ,EACAuB,EACAygB,EACAjmB,EACA8J,EACA48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAGxB,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAAq2D,wBAAA,SAAwBxE,GACtB,IACI3yD,EADA6yD,EAAWF,EAAGhhB,SAEdylB,GAAU,EAOd,GAAIzE,EAAG9jB,OAASpQ,EAAAC,MAAMxlB,UAMpB,GAJElZ,EADE2yD,EAAGre,KAAK7V,EAAAC,MAAMtpB,YACThU,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SAExDrF,EAAAu9B,KAAKyB,gCAAgCuyB,EAAGlsD,MAAMksD,EAAGlhB,OAErDkhB,EAAGre,KAAK7V,EAAAC,MAAM0T,WAKjB,OAJAhzC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,MAAMksD,EAAGlhB,KAAM,KAEb,UAQT2lB,GAAU,EACVtvD,OAAO6qD,EAAG9jB,OAASpQ,EAAAC,MAAM0T,WACzBpyC,EAAOoB,EAAAu9B,KAAKyB,gCAAgCuyB,EAAGlsD,MAAMksD,EAAGhhB,WAK1D,IAAIklB,EAAiBlE,EAAGlhB,IACpBjS,EAAapgC,KAAK22D,gBAAgBpD,GACtC,OAAKnzB,EAEEpgC,KAAKi4D,8BAA8B1E,EAAI3yD,EAAMw/B,EAAY43B,EAASvE,EAAUgE,GAF3D,MAKlBxE,EAAAvxD,UAAAu2D,8BAAR,SACE1E,EACA3yD,EACAw/B,EACA43B,EACAvE,EACAgE,QADA,IAAAhE,OAAiB,QACjB,IAAAgE,OAAuB,GAEnBhE,EAAW,IAAGA,EAAW7yD,EAAKyG,MAAMwa,OACpC41C,EAAiB,IAAGA,EAAiBhE,GAEzC,IAAIthD,EAAoC,KACxC,GAAIohD,EAAGre,KAAK7V,EAAAC,MAAMsU,QAEhB,KADAzhC,EAAanS,KAAK80D,UAAUvB,IACX,OAAO,UAExBphD,EAAanQ,EAAAu9B,KAAKK,kBAAkB2zB,EAAGlsD,MAAMksD,EAAGlhB,MAChDryC,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACfzrC,EAAW9K,OAIf,GAAI2wD,IACGzE,EAAGre,KAAK7V,EAAAC,MAAMwU,oBAKjB,OAJA9zC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,MAAMksD,EAAGlhB,KAAM,MAEb,KAIX,IAQIvf,EARAzgB,EAAYrQ,EAAAu9B,KAAKY,gBACnBC,EACAjuB,EACA,MACA,EACAohD,EAAGlsD,MAAMowD,EAAgBlE,EAAGlhB,MAI9B,GAAI2lB,EACFllC,EAAO9yB,KAAK00D,eAAenB,GAAI,OAC1B,CACL,IAAKA,EAAGre,KAAK7V,EAAAC,MAAM4U,WAKjB,OAJAl0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,MAAMksD,EAAGlhB,KAAM,KAEb,KAETvf,EAAO9yB,KAAK83D,oBAAoBvE,GAAI,GAEtC,IAAKzgC,EAAM,OAAO,KAElB,IAAI1rB,EAAcpF,EAAAu9B,KAAKkI,0BACrB7mC,EACA,KACAyR,EACAygB,EACA,KACAklC,EAAU54B,EAAA11B,YAAYo5B,MAAQ1D,EAAA11B,YAAYkN,KAC1C28C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAExB,OAAOrwC,EAAAu9B,KAAKqD,yBAAyBx7B,IAGvC6rD,EAAAvxD,UAAAyyD,WAAA,SACEZ,EACA58C,EACA9J,EACA4mD,GAUA,IAAKF,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAKjB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KAGT,IAKIyJ,EALAjB,EAAa7N,EAAAu9B,KAAKM,2BACpB0zB,EAAG9d,iBACH8d,EAAGlsD,SAIL,GAAIksD,EAAGre,KAAK7V,EAAAC,MAAMsQ,UAAW,CAE3B,KADA9+B,EAAiB9Q,KAAKu2D,oBAAoBhD,IACrB,OAAO,KAC5B58C,GAASyoB,EAAA11B,YAAYiQ,aAErB7I,KAGF,IAAInI,EAA+B,KACnC,GAAI4qD,EAAGre,KAAK7V,EAAAC,MAAM6O,SAAU,CAC1B,IAAIwnB,EAAI31D,KAAK80D,UAAUvB,GACvB,IAAKoC,EAAG,OAAO,KACf,GAAIA,EAAEtwD,MAAQrD,EAAAsD,SAASkkC,KAKrB,OAJAxpC,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf+qD,EAAEtuD,OAEG,KAETsB,EAAwBgtD,EAG1B,IAAIrrD,EAAkB,IAAIxF,MAC1B,GAAIyuD,EAAGre,KAAK7V,EAAAC,MAAMgP,YAChB,EAAG,CACD,IAAItiC,EAAOhM,KAAK80D,UAAUvB,GAC1B,IAAKvnD,EAAM,OAAO,KAClB1B,EAAgBO,KAAemB,SACxBunD,EAAGre,KAAK7V,EAAAC,MAAM6K,QAGzB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAM4U,WAKjB,OAJAl0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAGT,IAAIyD,EAAU,IAAIhG,MACdsC,EAAcpF,EAAAu9B,KAAK2F,uBACrBr1B,EACAiB,EACAnI,EACA2B,EACAQ,EACA+B,EACA8J,EACA48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAExB,IAAKkhB,EAAGre,KAAK7V,EAAAC,MAAM6U,YACjB,EAAG,CACD,IAAI9rC,EAASrI,KAAKk4D,iBAAiB3E,EAAInsD,GACvC,IAAKiB,EAAQ,OAAO,KACpBA,EAAOf,OAASF,EAChB0D,EAAQD,KAA2BxC,UAC3BkrD,EAAGre,KAAK7V,EAAAC,MAAM6U,aAE1B,OAAO/sC,GAGT6rD,EAAAvxD,UAAAw2D,iBAAA,SACE3E,EACAjsD,GAaA,IAHA,IAAImsD,EAAWF,EAAGlhB,IAEdxlC,EAAa,IAAI/H,MACdyuD,EAAGre,KAAK7V,EAAAC,MAAM8U,KAAK,CACxB,IAAItnC,EAAY9M,KAAK0zD,eAAeH,GACpC,IAAKzmD,EAAW,MAChBD,EAAWhC,KAAoBiC,GAGjC,IAAI6J,EAAQrP,EAAOqP,MAAQyoB,EAAA11B,YAAYkR,QAEnC24C,EAAGre,KAAK7V,EAAAC,MAAM2P,QAChBt4B,GAASyoB,EAAA11B,YAAYulC,OACZskB,EAAGre,KAAK7V,EAAAC,MAAMyP,SACvBp4B,GAASyoB,EAAA11B,YAAYqlC,QACZwkB,EAAGre,KAAK7V,EAAAC,MAAM0P,aACvBr4B,GAASyoB,EAAA11B,YAAYslC,WAGvB,IAAImpB,EAAmB,EACnBC,EAAiB,EACjBC,EAAqB,EACrBC,EAAmB,EACnB/E,EAAGre,KAAK7V,EAAAC,MAAMpzB,SAChByK,GAASyoB,EAAA11B,YAAYwC,OACrBisD,EAAc5E,EAAGhhB,SACjB6lB,EAAY7E,EAAGlhB,MAEXkhB,EAAGre,KAAK7V,EAAAC,MAAMoO,WAChB/2B,GAAUyoB,EAAA11B,YAAYgkC,SAAWtO,EAAA11B,YAAY6O,SAC7C8/C,EAAgB9E,EAAGhhB,SACnB+lB,EAAc/E,EAAGlhB,KAEjB17B,GAASyoB,EAAA11B,YAAY6O,SAEnBjR,EAAOqP,MAAQyoB,EAAA11B,YAAYiQ,UAC7BhD,GAASyoB,EAAA11B,YAAYy4C,kBAIzB,IAAIoW,EAAqB,EACrBC,EAAmB,EACnBjF,EAAGre,KAAK7V,EAAAC,MAAM4P,YAChBv4B,GAASyoB,EAAA11B,YAAYwlC,SACrBqpB,EAAgBhF,EAAGhhB,SACnBimB,EAAcjF,EAAGlhB,KAInB,IAAI+C,EAAQme,EAAGpe,OACX+J,GAAgB,EAChBxwC,GAAW,EAGXgpD,GAAW,EACX5/B,EAAgB,EAChB2gC,EAAc,EAsDlB,GArDIlF,EAAGre,KAAK7V,EAAAC,MAAM9zB,KACZ+nD,EAAG1e,MAAK,GAAM,IAASxV,EAAAC,MAAMtpB,YAAeu9C,EAAG7gB,mBAYjD6gB,EAAG/d,MAAMJ,IAXTz+B,GAASyoB,EAAA11B,YAAY8B,IACrBkD,GAAW,EACXopB,EAAWy7B,EAAGhhB,SACdkmB,EAASlF,EAAGlhB,IACR17B,EAAQyoB,EAAA11B,YAAYwlC,UACtBlvC,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAAMkxD,EAAeC,GAAc,aAMnCjF,EAAGre,KAAK7V,EAAAC,MAAM7zB,KACnB8nD,EAAG1e,MAAK,GAAM,IAASxV,EAAAC,MAAMtpB,YAAeu9C,EAAG7gB,mBAYjD6gB,EAAG/d,MAAMJ,IAXTz+B,GAASyoB,EAAA11B,YAAY+B,IAAM2zB,EAAA11B,YAAY+B,IACvCisD,GAAW,EACX5/B,EAAWy7B,EAAGhhB,SACdkmB,EAASlF,EAAGlhB,IACR17B,EAAQyoB,EAAA11B,YAAYwlC,UACtBlvC,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAAMkxD,EAAeC,GAAc,aAMnCjF,EAAGre,KAAK7V,EAAAC,MAAM9yB,eAEvB0yC,GAAgB,GADhBvoC,GAASyoB,EAAA11B,YAAY8C,aAET4yB,EAAA11B,YAAYwC,QACtBlM,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAAM8wD,EAAaC,GAAY,UAGlCzhD,EAAQyoB,EAAA11B,YAAYgkC,UACtB1tC,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAAMgxD,EAAeC,GAAc,YAGtC3hD,EAAQyoB,EAAA11B,YAAYwlC,UACtBlvC,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAAMkxD,EAAeC,GAAc,cAKvCtZ,IAAkBqU,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAKnC,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KAGT,IAAIzG,EAAOs+C,EACPl9C,EAAAu9B,KAAK4C,4BAA4BoxB,EAAGlsD,SACpCrF,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACxDyJ,EAA6C,KACjD,GAAIyiD,EAAGre,KAAK7V,EAAAC,MAAMsQ,UAAW,CAC3B,IAAI8oB,EAAsBnF,EAAGhhB,SAE7B,KADAzhC,EAAiB9Q,KAAKu2D,oBAAoBhD,IACrB,OAAO,KACxBrU,EACFl/C,KAAKiH,MACHnF,EAAAoF,eAAeyxD,2DACfpF,EAAGlsD,MAAMqxD,EAAqBnF,EAAGlhB,MAE1B3jC,GAAYgpD,EACrB13D,KAAKiH,MACHnF,EAAAoF,eAAe0xD,wCACfrF,EAAGlsD,MAAMqxD,EAAqBnF,EAAGlhB,MAGnC17B,GAASyoB,EAAA11B,YAAYiQ,QAKzB,GAAI45C,EAAGre,KAAK7V,EAAAC,MAAM0T,WAAY,CAC5B,IAAIykB,EAAiBlE,EAAGhhB,SACpBnS,EAAapgC,KAAK22D,gBAAgBpD,EAAIrU,GAC1C,IAAK9e,EAAY,OAAO,KACxB,GAAI8e,EACF,IAAK,IAAI7+C,EAAI,EAAG2E,EAAIo7B,EAAWn7B,OAAQ5E,EAAI2E,IAAK3E,EAAG,CACjD,IAAIk1D,EAAYn1B,EAAW//B,GAC3B,GAAIk1D,EAAUhqD,MACZ6zB,EAAA11B,YAAYulC,OACZ7P,EAAA11B,YAAYslC,UACZ5P,EAAA11B,YAAYqlC,QACZ3P,EAAA11B,YAAYwlC,UACX,CACD,IAAIvF,EAA2B3nC,EAAAu9B,KAAK6H,uBAClCmuB,EAAU30D,KACV20D,EAAUvpD,KACV,KACA,KACAupD,EAAU5+C,MAAQyoB,EAAA11B,YAAY6O,SAC9Bg9C,EAAUluD,OAEZsiC,EAAyB2C,eAAiBjsC,EAC1CspC,EAAyBriC,OAASA,EAClCiuD,EAAU5rB,yBAA2BA,EACrCriC,EAAOwD,QAAQD,KAAK8+B,SAGfj7B,EACL0xB,EAAWn7B,QACbjF,KAAKiH,MACHnF,EAAAoF,eAAe2wD,sCACfj3D,EAAKyG,OAGAqwD,IACgB,GAArBt3B,EAAWn7B,QACbjF,KAAKiH,MACHnF,EAAAoF,eAAeywD,+CACf/2D,EAAKyG,OAGL+4B,EAAWn7B,QAAUm7B,EAAW,GAAGpoB,aACrChY,KAAKiH,MACHnF,EAAAoF,eAAe0wD,oDACfh3D,EAAKyG,QAKX,IAAI8K,EAAoC,KACxC,GAAIohD,EAAGre,KAAK7V,EAAAC,MAAMsU,QAahB,GAZIhzC,EAAKyE,MAAQrD,EAAAsD,SAASkH,YACxBxM,KAAKiH,MACHnF,EAAAoF,eAAe2xD,2DACftF,EAAGlsD,SAEIqwD,GACT13D,KAAKiH,MACHnF,EAAAoF,eAAe4xD,oDACfvF,EAAGlsD,WAGP8K,EAAanS,KAAK80D,UAAUvB,EAAI3yD,EAAKyE,MAAQrD,EAAAsD,SAASkH,aAAekrD,IACpD,OAAO,UAExBvlD,EAAanQ,EAAAu9B,KAAKK,kBAAkB2zB,EAAGlsD,MAAMksD,EAAGlhB,MAC3CqlB,GAAY92D,EAAKyE,MAAQrD,EAAAsD,SAASkH,aACrCxM,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACfzrC,EAAW9K,OAKjB,IAAIgL,EAAYrQ,EAAAu9B,KAAKY,gBACnBC,EACAjuB,EACA,MACA,EACAohD,EAAGlsD,MAAMowD,EAAgBlE,EAAGlhB,MAG1Bvf,EAAyB,KAC7B,GAAIygC,EAAGre,KAAK7V,EAAAC,MAAM4U,YAQhB,GAPIv9B,EAAQyoB,EAAA11B,YAAYkR,SACtB5a,KAAKiH,MACHnF,EAAAoF,eAAe83C,yDACfuU,EAAGlsD,WAGPyrB,EAAO9yB,KAAK83D,oBAAoBvE,GAAI,IACzB,OAAO,UACP58C,EAAQyoB,EAAA11B,YAAYkR,SAC/B5a,KAAKiH,MACHnF,EAAAoF,eAAe+3C,gFACfsU,EAAGlsD,SAIP,IAAI0xD,EAAY/2D,EAAAu9B,KAAKoI,wBACnB/mC,EACAkQ,EACAuB,EACAygB,EACAjmB,EACA8J,EACA48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAGxB,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACPklB,EAEF,GAAI7Z,EACTl/C,KAAKiH,MACHnF,EAAAoF,eAAe8xD,sCACfp4D,EAAKyG,WAGF,KAAIqH,IAAYgpD,EAOhB,CACD/gD,EAAQyoB,EAAA11B,YAAYgkC,UACtB1tC,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAAMgxD,EAAeC,GAAc,YAItC3hD,EAAQyoB,EAAA11B,YAAY8B,KACtBxL,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAjOW,EACF,GAgOgB,OAI5BsP,EAAQyoB,EAAA11B,YAAY+B,KACtBzL,KAAKiH,MACHnF,EAAAoF,eAAeutD,gCACflB,EAAGlsD,MAAMywB,EAAU2gC,GAAS,OAIhC,IAAIzsD,EAA8B,KAClC,GAAIunD,EAAGre,KAAK7V,EAAAC,MAAMsU,QAEhB,KADA5nC,EAAOhM,KAAK80D,UAAUvB,IACX,OAAO,UAElBvzD,KAAKiH,MACHnF,EAAAoF,eAAe02C,cACf2V,EAAGlsD,SAGP,IAAI2Q,EAAiC,KACrC,GAAIu7C,EAAGre,KAAK7V,EAAAC,MAAMgS,WAChBt5B,EAAchY,KAAKo2D,gBAAgB7C,IACjB,OAAO,KAE3B,IAAI0F,EAAWj3D,EAAAu9B,KAAK6H,uBAClBxmC,EACAoL,EACAgM,EACAnL,EACA8J,EACA48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAGxB,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACPolB,EApDPj5D,KAAKiH,MACHnF,EAAAoF,eAAe+3C,gFACfr+C,EAAKyG,OAoDT,OAAO,MAGT4rD,EAAAvxD,UAAA0yD,eAAA,SACEb,EACA58C,EACA9J,EACA4mD,GAKA,GAAIF,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAAa,CAC7B,IAAInG,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACzE,GAAIksD,EAAGre,KAAK7V,EAAAC,MAAM4U,WAAY,CAS5B,IARA,IAAIppC,EAAU,IAAIhG,MACd06C,EAAKx9C,EAAAu9B,KAAKsI,2BACZh4B,EACA/E,EACA+B,EACA8J,EACA48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,OAEhBkhB,EAAGre,KAAK7V,EAAAC,MAAM6U,aAAa,CACjC,IAAI9rC,EAASrI,KAAKwzD,uBAAuBD,EAAI/T,GAC7C,IAAKn3C,EAAQ,OAAO,KACpBA,EAAOf,OAASk4C,EAChB10C,EAAQD,KAAKxC,GAGf,OADAkrD,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP2L,EAEPx/C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGP,OAAO,MAGT4rD,EAAAvxD,UAAA8yD,YAAA,SACEjB,EACA58C,EACA88C,GAKA,GAAIF,EAAGre,KAAK7V,EAAAC,MAAM4U,WAAY,CAC5B,IAAIppC,EAAU,IAAIhG,MAClB,IAAKyuD,EAAGre,KAAK7V,EAAAC,MAAM6U,YAAa,CAC9B,EAAG,CACD,IAAI9rC,EAASrI,KAAKk5D,kBAAkB3F,GACpC,IAAKlrD,EAAQ,OAAO,KACpByC,EAAQD,KAAKxC,SACNkrD,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAM6U,YAKjB,OAJAn0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAGX,IAAIE,EAAuC,KAC3C,GAAIgsD,EAAGre,KAAK7V,EAAAC,MAAM+O,MAAO,CACvB,IAAIklB,EAAGre,KAAK7V,EAAAC,MAAMyT,eAOhB,OAJA/yC,KAAKiH,MACHnF,EAAAoF,eAAekH,wBACfmlD,EAAGlsD,SAEE,KANPE,EAAOvF,EAAAu9B,KAAK0E,8BAA8BsvB,EAAGv5B,aAAcu5B,EAAGlsD,SASlE,IAAI0U,EAAM/Z,EAAAu9B,KAAKuG,sBAAsBh7B,EAASvD,EAAMoP,EAAO48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAC7EziC,EAAemM,EAAInM,aAMvB,OALoB,MAAhBA,GAAyB5P,KAAKmzD,QAAQnpD,IAAI4F,KAC5C5P,KAAKkzD,QAAQroD,KAAK+E,GAClB5P,KAAKmzD,QAAQljD,IAAIL,IAEnB2jD,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,EAOT,OALE/b,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAGT,MAGT4rD,EAAAvxD,UAAAw3D,kBAAA,SACE3F,GAKA,GAAIA,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAAa,CAC7B,IAAInG,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACrE8xD,EAA4C,KAChD,GAAI5F,EAAGre,KAAK7V,EAAAC,MAAMqO,IAAK,CACrB,IAAI4lB,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAOhB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KANP8xD,EAAen3D,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SAS3E,OAAOrF,EAAAu9B,KAAK+G,mBACVz2B,EACAspD,EACAA,EACI95B,EAAA30B,MAAMC,KAAKkF,EAAWxI,MAAO8xD,EAAa9xD,OAC1CwI,EAAWxI,OAQnB,OALErH,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGA,MAGT4rD,EAAAvxD,UAAA4yD,YAAA,SACEf,GAOA,IAAIE,EAAWF,EAAGhhB,SACdznC,EAAsC,KACtCsF,EAA6C,KAC7CgpD,GAAW,EACf,GAAI7F,EAAGre,KAAK7V,EAAAC,MAAM4U,YAEhB,GADAppC,EAAU,IAAIhG,OACTyuD,EAAGre,KAAK7V,EAAAC,MAAM6U,YAAa,CAC9B,EAAG,CACD,IAAI9rC,EAASrI,KAAKq5D,uBAAuB9F,GACzC,IAAKlrD,EAAQ,OAAO,KACpByC,EAAQD,KAAKxC,SACNkrD,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAM6U,YAKjB,OAJAn0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,WAGN,GAAIksD,EAAGre,KAAK7V,EAAAC,MAAMiR,UAAW,CAClC,IAAIgjB,EAAGre,KAAK7V,EAAAC,MAAMqO,IAehB,OAJA3tC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,MAEP,KAdP,IAAIksD,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAOhB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KANP+I,EAAgBpO,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,cAgB5E+xD,GAAW,EAGb,GAAIA,GAAY7F,EAAGre,KAAK7V,EAAAC,MAAM+O,MAAO,CACnC,GAAIklB,EAAGre,KAAK7V,EAAAC,MAAMyT,eAAgB,CAChC,IAAIxrC,EAAOvF,EAAAu9B,KAAK0E,8BAA8BsvB,EAAGv5B,aAAcu5B,EAAGlsD,SAC9D0U,OAAG,EACH3L,GACF1H,QAAQoC,GACRiR,EAAM/Z,EAAAu9B,KAAKwH,kCAAkC32B,EAAe7I,EAAMgsD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,OAExFt2B,EAAM/Z,EAAAu9B,KAAKqH,sBAAsB97B,EAASvD,EAAMgsD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAExE,IAAIziC,EAAemM,EAAInM,aAMvB,OALK5P,KAAKmzD,QAAQnpD,IAAI4F,KACpB5P,KAAKkzD,QAAQroD,KAAK+E,GAClB5P,KAAKmzD,QAAQljD,IAAIL,IAEnB2jD,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,EAEP/b,KAAKiH,MACHnF,EAAAoF,eAAekH,wBACfmlD,EAAGlsD,cAIPrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,QAGhB,OAAO,MAGT4rD,EAAAvxD,UAAA23D,uBAAA,SACE9F,GAKA,GAAIA,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAAa,CAC7B,IAAInG,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACrE8xD,EAA4C,KAChD,GAAI5F,EAAGre,KAAK7V,EAAAC,MAAMqO,IAAK,CACrB,IAAI4lB,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAOhB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KANP8xD,EAAen3D,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SAS3E,OAAOrF,EAAAu9B,KAAKyH,wBACVn3B,EACAspD,EACAA,EACI95B,EAAA30B,MAAMC,KAAKkF,EAAWxI,MAAO8xD,EAAa9xD,OAC1CwI,EAAWxI,OAQnB,OALErH,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGA,MAGT4rD,EAAAvxD,UAAA2yD,kBAAA,SACEd,EACAE,GAKA,GAAIF,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAAa,CAC7B,IAAImjD,EAAen3D,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SAC3E,GAAIksD,EAAGre,KAAK7V,EAAAC,MAAMgS,QAAS,CACzB,GAAIiiB,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAAa,CAC7B,IAAInG,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SACrE0U,EAAM/Z,EAAAu9B,KAAK6G,4BAA4Bv2B,EAAYspD,EAAc5F,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAE3F,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,EAEP/b,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,cAIPrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGP,OAAO,MAGT4rD,EAAAvxD,UAAAgzD,eAAA,SACEnB,EACA+F,QAAA,IAAAA,OAAA,GAKA,IAAIlkB,EAAQme,EAAGpe,OAEX/vC,EAA8B,KAClC,OAFYmuD,EAAG1rD,QAGb,KAAKw3B,EAAAC,MAAMwM,MACT1mC,EAAYpF,KAAKu5D,WAAWhG,GAC5B,MAEF,KAAKl0B,EAAAC,MAAM3nB,MACTvS,EAAYpF,KAAKi0D,cAAcV,EAAIn0B,EAAA11B,YAAYiO,MAAO,KAAM47C,EAAGhhB,UAC/D,MAEF,KAAKlT,EAAAC,MAAMyM,SACT3mC,EAAYpF,KAAKw5D,cAAcjG,GAC/B,MAEF,KAAKl0B,EAAAC,MAAM0M,GACT5mC,EAAYpF,KAAKy5D,iBAAiBlG,GAClC,MAEF,KAAKl0B,EAAAC,MAAMiN,IACTnnC,EAAYpF,KAAK05D,kBAAkBnG,GACnC,MAEF,KAAKl0B,EAAAC,MAAMkN,GACTpnC,EAAYpF,KAAK25D,iBAAiBpG,GAClC,MAEF,KAAKl0B,EAAAC,MAAMqP,IACTvpC,EAAYpF,KAAKi0D,cAAcV,EAAIn0B,EAAA11B,YAAYilC,IAAK,KAAM4kB,EAAGhhB,UAC7D,MAEF,KAAKlT,EAAAC,MAAM8P,IACThqC,EAAYpF,KAAKi0D,cAAcV,EAAIn0B,EAAA11B,YAAYkN,KAAM,KAAM28C,EAAGhhB,UAC9D,MAEF,KAAKlT,EAAAC,MAAM4U,UACT9uC,EAAYpF,KAAK83D,oBAAoBvE,EAAI+F,GACzC,MAEF,KAAKj6B,EAAAC,MAAMoN,OACL4sB,GACFt5D,KAAKiH,MACHnF,EAAAoF,eAAe0yD,2DACfrG,EAAGlsD,SAGPjC,EAAYpF,KAAKs2D,YAAY/C,GAC7B,MAEF,KAAKl0B,EAAAC,MAAMuU,UACT,OAAO7xC,EAAAu9B,KAAKiG,qBAAqB+tB,EAAGlsD,MAAMksD,EAAGhhB,WAE/C,KAAKlT,EAAAC,MAAMsN,OACTxnC,EAAYpF,KAAK65D,qBAAqBtG,GACtC,MAEF,KAAKl0B,EAAAC,MAAMuN,MACTznC,EAAYpF,KAAK85D,oBAAoBvG,GACrC,MAEF,KAAKl0B,EAAAC,MAAMwN,IACT1nC,EAAYpF,KAAK+5D,kBAAkBxG,GACnC,MAEF,KAAKl0B,EAAAC,MAAMkK,KACTpkC,EAAYpF,KAAKu0D,qBAAqBhB,EAAIn0B,EAAA11B,YAAYkN,KAAM,KAAM28C,EAAGhhB,UACrE,MAEF,KAAKlT,EAAAC,MAAM0N,KACT5nC,EAAYpF,KAAKg6D,mBAAmBzG,GACpC,MAEF,KAAKl0B,EAAAC,MAAM2N,MACT7nC,EAAYpF,KAAKi6D,oBAAoB1G,GACrC,MAEF,QACEA,EAAG/d,MAAMJ,GACThwC,EAAYpF,KAAKk6D,yBAAyB3G,GAU9C,OANKnuD,EAIHmuD,EAAGhe,QAAQH,IAHXme,EAAG/d,MAAMJ,GACTp1C,KAAKm6D,cAAc5G,IAIdnuD,GAGT6tD,EAAAvxD,UAAAo2D,oBAAA,SACEvE,EACA+F,GAOA,IAFA,IAAI7F,EAAWF,EAAGhhB,SACdrtC,EAAa,IAAIJ,OACbyuD,EAAGre,KAAK7V,EAAAC,MAAM6U,aAAa,CACjC,IAAIiB,EAAQme,EAAGpe,OACX/vC,EAAYpF,KAAK00D,eAAenB,EAAI+F,GACnCl0D,GAIHmuD,EAAGhe,QAAQH,GACXlwC,EAAW2F,KAAKzF,KAJhBmuD,EAAG/d,MAAMJ,GACTp1C,KAAKm6D,cAAc5G,IAMvB,IAAIx3C,EAAM/Z,EAAAu9B,KAAKuF,qBAAqB5/B,EAAYquD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEtE,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAA63D,WAAA,SACEhG,GAKA,IAAI1jD,EAA0C,KAC1C0jD,EAAG1e,MAAK,IAASxV,EAAAC,MAAMtpB,YAAeu9C,EAAG7gB,qBAC3C6gB,EAAG1rD,MAAK,GACRgI,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,UAEvE,IAAI0U,EAAM/Z,EAAAu9B,KAAKyF,qBAAqBn1B,EAAY0jD,EAAGlsD,SAEnD,OADAksD,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAA83D,cAAA,SACEjG,GAKA,IAAI1jD,EAA0C,KAC1C0jD,EAAG1e,MAAK,IAASxV,EAAAC,MAAMtpB,YAAeu9C,EAAG7gB,qBAC3C6gB,EAAG1rD,MAAK,GACRgI,EAAa7N,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,UAEvE,IAAI0U,EAAM/Z,EAAAu9B,KAAK6F,wBAAwBv1B,EAAY0jD,EAAGlsD,SAEtD,OADAksD,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAA+3D,iBAAA,SACElG,GAKA,IAAIE,EAAWF,EAAGhhB,SACdntC,EAAYpF,KAAK00D,eAAenB,GACpC,IAAKnuD,EAAW,OAAO,KAEvB,GAAImuD,EAAGre,KAAK7V,EAAAC,MAAM2N,OAEhB,GAAIsmB,EAAGre,KAAK7V,EAAAC,MAAM0T,WAAY,CAC5B,IAAIvgB,EAAYzyB,KAAKo2D,gBAAgB7C,GACrC,IAAK9gC,EAAW,OAAO,KAEvB,GAAI8gC,EAAGre,KAAK7V,EAAAC,MAAM2T,YAAa,CAC7B,IAAIl3B,EAAM/Z,EAAAu9B,KAAK+F,kBAA6BlgC,EAAuBqtB,EAAW8gC,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEpG,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,EAEP/b,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,SAGhB,OAAO,MAGT4rD,EAAAvxD,UAAAw4D,yBAAA,SACE3G,GAKA,IAAI/jC,EAAOxvB,KAAKo2D,gBAAgB7C,GAChC,IAAK/jC,EAAM,OAAO,KAElB,IAAIzT,EAAM/Z,EAAAu9B,KAAKiH,0BAA0BhX,GAEzC,OADA+jC,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAAg4D,kBAAA,SACEnG,GAKA,IAAIE,EAAWF,EAAGhhB,SAElB,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAM0T,WAAY,CAC5B,IAAIh7B,EAAgC,KAEpC,GAAIu7C,EAAGre,KAAK7V,EAAAC,MAAM3nB,OAChBK,EAAchY,KAAKi0D,cAAcV,EAAIn0B,EAAA11B,YAAYiO,MAAO,KAAM47C,EAAGhhB,eAC5D,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAMqP,KACvB32B,EAAchY,KAAKi0D,cAAcV,EAAIn0B,EAAA11B,YAAYilC,IAAK,KAAM4kB,EAAGhhB,eAC1D,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAM8P,KACvBp3B,EAAchY,KAAKi0D,cAAcV,EAAIn0B,EAAA11B,YAAYkN,KAAM,KAAM28C,EAAGhhB,eAE3D,IAAKghB,EAAGre,KAAK7V,EAAAC,MAAMuU,cACxB77B,EAAchY,KAAKk6D,yBAAyB3G,IAC1B,OAAO,KAG3B,GAAIA,EAAG9jB,OAASpQ,EAAAC,MAAMuU,UAAW,CAC/B,IAAIphB,EAAwC,KAC5C,IAAK8gC,EAAGre,KAAK7V,EAAAC,MAAMuU,cACjBphB,EAAYzyB,KAAKk6D,yBAAyB3G,IAC1B,OAAO,KAGzB,GAAIA,EAAG9jB,OAASpQ,EAAAC,MAAMuU,UAAW,CAC/B,IAAItM,EAAiC,KACrC,IAAKgsB,EAAGre,KAAK7V,EAAAC,MAAM2T,YAAa,CAE9B,KADA1L,EAAcvnC,KAAKo2D,gBAAgB7C,IACjB,OAAO,KAEzB,IAAKA,EAAGre,KAAK7V,EAAAC,MAAM2T,YAKjB,OAJAjzC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAIX,IAAIjC,EAAYpF,KAAK00D,eAAenB,GACpC,OAAKnuD,EAEEpD,EAAAu9B,KAAK+H,mBACVtvB,EACAya,EACIA,EAAUre,WACV,KACJmzB,EACAniC,EACAmuD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MATD,KAavBryC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAGhB,OAAO,MAGT4rD,EAAAvxD,UAAAi4D,iBAAA,SACEpG,GAKA,IAAIE,EAAWF,EAAGhhB,SAClB,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAM0T,WAAY,CAC5B,IAAIvgB,EAAYzyB,KAAKo2D,gBAAgB7C,GACrC,IAAK9gC,EAAW,OAAO,KACvB,GAAI8gC,EAAGre,KAAK7V,EAAAC,MAAM2T,YAAa,CAC7B,IAAI7tC,EAAYpF,KAAK00D,eAAenB,GACpC,IAAKnuD,EAAW,OAAO,KACvB,IAAIg1D,EAAkC,KACtC,OAAI7G,EAAGre,KAAK7V,EAAAC,MAAM4O,SAChBksB,EAAgBp6D,KAAK00D,eAAenB,IACT,KAEtBvxD,EAAAu9B,KAAKmH,kBACVjU,EACArtB,EACAg1D,EACA7G,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAGxBryC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAGhB,OAAO,MAGT4rD,EAAAvxD,UAAAm4D,qBAAA,SACEtG,GAKA,IAAIE,EAAWF,EAAGhhB,SAClB,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAM0T,WAAY,CAC5B,IAAIvgB,EAAYzyB,KAAKo2D,gBAAgB7C,GACrC,IAAK9gC,EAAW,OAAO,KACvB,GAAI8gC,EAAGre,KAAK7V,EAAAC,MAAM2T,YAAa,CAC7B,GAAIsgB,EAAGre,KAAK7V,EAAAC,MAAM4U,WAAY,CAE5B,IADA,IAAIhM,EAAQ,IAAIpjC,OACRyuD,EAAGre,KAAK7V,EAAAC,MAAM6U,aAAa,CACjC,IAAIkmB,EAAQr6D,KAAKs6D,gBAAgB/G,GACjC,IAAK8G,EAAO,OAAO,KACnBnyB,EAAMr9B,KAAiBwvD,GAEzB,IAAIt+C,EAAM/Z,EAAAu9B,KAAK0I,sBAAsBxV,EAAWyV,EAAOqrB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAE7E,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,EAEP/b,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAGhB,OAAO,MAGT4rD,EAAAvxD,UAAA44D,gBAAA,SACE/G,GAGA,IACIruD,EACAE,EAFAquD,EAAWF,EAAGhhB,SAMlB,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAMwO,MAAO,CACvB,IAAI1b,EAAQpyB,KAAKo2D,gBAAgB7C,GACjC,IAAKnhC,EAAO,OAAO,KACnB,GAAImhC,EAAGre,KAAK7V,EAAAC,MAAMsU,OAAQ,CAExB,IADA1uC,EAAa,IAAIJ,MACVyuD,EAAG1e,QAAUxV,EAAAC,MAAMwO,MAAQylB,EAAG/gB,WAAanT,EAAAC,MAAMttB,SAAWuhD,EAAG/gB,WAAanT,EAAAC,MAAM6U,YAAY,CAEnG,KADA/uC,EAAYpF,KAAK00D,eAAenB,IAChB,OAAO,KACvBruD,EAAW2F,KAAKzF,GAElB,OAAOpD,EAAAu9B,KAAK6I,iBAAiBhW,EAAOltB,EAAYquD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEtEryC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAMX,GAAIksD,EAAGre,KAAK7V,EAAAC,MAAMttB,SAAU,CACjC,GAAIuhD,EAAGre,KAAK7V,EAAAC,MAAMsU,OAAQ,CAExB,IADA1uC,EAAa,IAAIJ,MACVyuD,EAAG1e,QAAUxV,EAAAC,MAAMwO,MAAQylB,EAAG/gB,WAAanT,EAAAC,MAAMttB,SAAWuhD,EAAG/gB,WAAanT,EAAAC,MAAM6U,YAAY,CAEnG,KADA/uC,EAAYpF,KAAK00D,eAAenB,IAChB,OAAO,KACvBruD,EAAW2F,KAAKzF,GAElB,OAAOpD,EAAAu9B,KAAK6I,iBAAiB,KAAMljC,EAAYquD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAErEryC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeqzD,0BACfhH,EAAGlsD,SAGP,OAAO,MAGT4rD,EAAAvxD,UAAAo4D,oBAAA,SACEvG,GAKA,IAAIE,EAAWF,EAAGhhB,SACdn+B,EAAapU,KAAKo2D,gBAAgB7C,GACtC,IAAKn/C,EAAY,OAAO,KACxB,IAAI2H,EAAM/Z,EAAAu9B,KAAK+I,qBAAiCl0B,EAAYm/C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAElF,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAAq4D,kBAAA,SACExG,GAQA,IACI9yB,EADAgzB,EAAWF,EAAGhhB,SAElB,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAM4U,WAAY,CAE5B,IADA,IAAIhvC,EAAa,IAAIJ,OACbyuD,EAAGre,KAAK7V,EAAAC,MAAM6U,aAAa,CAEjC,KADA1T,EAAOzgC,KAAK00D,eAAenB,IAChB,OAAO,KAClBruD,EAAW2F,KAAgB41B,GAE7B,IAAIgI,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAI4qB,EAAGre,KAAK7V,EAAAC,MAAMyO,OAAQ,CACxB,IAAKwlB,EAAGre,KAAK7V,EAAAC,MAAM0T,WAKjB,OAJAhzC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAET,IAAKksD,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAKjB,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAEE,KAGT,GADAohC,EAAgBzmC,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,UACnEksD,EAAGre,KAAK7V,EAAAC,MAAM2T,YAKjB,OAJAjzC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAET,IAAKksD,EAAGre,KAAK7V,EAAAC,MAAM4U,WAKjB,OAJAl0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAGT,IADAqhC,MACQ6qB,EAAGre,KAAK7V,EAAAC,MAAM6U,aAAa,CAEjC,KADA1T,EAAOzgC,KAAK00D,eAAenB,IAChB,OAAO,KAClB7qB,EAAgB79B,KAAgB41B,IAGpC,GAAI8yB,EAAGre,KAAK7V,EAAAC,MAAM8O,SAAU,CAC1B,IAAKmlB,EAAGre,KAAK7V,EAAAC,MAAM4U,WAKjB,OAJAl0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAGT,IADAshC,MACQ4qB,EAAGre,KAAK7V,EAAAC,MAAM6U,aAAa,CAEjC,KADA1T,EAAOzgC,KAAK00D,eAAenB,IAChB,OAAO,KAClB5qB,EAAkB99B,KAAgB41B,IAGtC,IAAMiI,IAAmBC,EAKvB,OAJA3oC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,SAEP,KAET,IAAI0U,EAAM/Z,EAAAu9B,KAAKiJ,mBACbtjC,EACAujC,EACAC,EACAC,EACA4qB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAGxB,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,EAOT,OALE/b,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAGT,MAGT4rD,EAAAvxD,UAAA6yD,qBAAA,SACEhB,EACA58C,EACA9J,EACA4mD,GAKA,GAAIF,EAAGre,KAAK7V,EAAAC,MAAMtpB,YAAa,CAC7B,IAAIpV,EAAOoB,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,SAC/DyJ,EAA6C,KACjD,GAAIyiD,EAAGre,KAAK7V,EAAAC,MAAMsQ,UAAW,CAE3B,KADA9+B,EAAiB9Q,KAAKu2D,oBAAoBhD,IACrB,OAAO,KAC5B58C,GAASyoB,EAAA11B,YAAYiQ,QAEvB,GAAI45C,EAAGre,KAAK7V,EAAAC,MAAMgS,QAAS,CACzB,IAAItlC,EAAOhM,KAAK80D,UAAUvB,GAC1B,IAAKvnD,EAAM,OAAO,KAClB,IAAI+P,EAAM/Z,EAAAu9B,KAAKsJ,sBACbjoC,EACAkQ,EACA9E,EACAa,EACA8J,EACA48C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAGxB,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,EAEP/b,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACf9B,EAAGlsD,SAGP,OAAO,MAGT4rD,EAAAvxD,UAAAs4D,mBAAA,SACEzG,GAKA,IAAIE,EAAWF,EAAGhhB,SACdn+B,EAAapU,KAAKo2D,gBAAgB7C,EAAE,IACxC,IAAKn/C,EAAY,OAAO,KACxB,IAAI2H,EAAM/Z,EAAAu9B,KAAK4J,oBAAoB/0B,EAAYm/C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAErE,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,GAGTk3C,EAAAvxD,UAAAu4D,oBAAA,SACE1G,GAKA,IAAIE,EAAWF,EAAGhhB,SAClB,GAAIghB,EAAGre,KAAK7V,EAAAC,MAAM0T,WAAY,CAC5B,IAAI5+B,EAAapU,KAAKo2D,gBAAgB7C,GACtC,IAAKn/C,EAAY,OAAO,KACxB,GAAIm/C,EAAGre,KAAK7V,EAAAC,MAAM2T,YAAa,CAC7B,IAAI7tC,EAAYpF,KAAK00D,eAAenB,GACpC,IAAKnuD,EAAW,OAAO,KACvB,IAAI2W,EAAM/Z,EAAAu9B,KAAK8J,qBAAqBj1B,EAAYhP,EAAWmuD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEjF,OADAkhB,EAAGre,KAAK7V,EAAAC,MAAMuU,WACP93B,EAEP/b,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,UAIhBrH,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAGhB,OAAO,MAMT4rD,EAAAvxD,UAAA84D,qBAAA,SACEjH,GAGA,IAAI9jB,EAAQ8jB,EAAG1rD,MAAK,GAChB4rD,EAAWF,EAAGhhB,SACd/iB,EAA0B,KAE9B,GAAIigB,GAASpQ,EAAAC,MAAMiL,KACjB,OAAOvoC,EAAAu9B,KAAK4D,qBAAqBowB,EAAGlsD,SAEtC,GAAIooC,GAASpQ,EAAAC,MAAMoL,KACjB,OAAO1oC,EAAAu9B,KAAKgF,qBAAqBgvB,EAAGlsD,SAEtC,GAAIooC,GAASpQ,EAAAC,MAAMqL,MACjB,OAAO3oC,EAAAu9B,KAAKiD,sBAAsB+wB,EAAGlsD,SAGvC,IAAIzF,EA6fR,SAAkCyD,GAChC,OAAQA,GACN,KAAKg6B,EAAAC,MAAMqQ,YAAa,OAAM,EAC9B,KAAKtQ,EAAAC,MAAMgQ,MAAO,OAAM,EACxB,KAAKjQ,EAAAC,MAAM4R,YACX,KAAK7R,EAAAC,MAAM6R,MACX,KAAK9R,EAAAC,MAAM8Q,KACX,KAAK/Q,EAAAC,MAAM+Q,MACX,KAAKhR,EAAAC,MAAMoR,UACX,KAAKrR,EAAAC,MAAMqR,YACX,KAAKtR,EAAAC,MAAM6P,OACX,KAAK9P,EAAAC,MAAM0N,KACX,KAAK3N,EAAAC,MAAM2O,OAAQ,OAAM,GACzB,KAAK5O,EAAAC,MAAMgL,IAAK,OAAM,GACtB,QAAS,OAAM,GA3gBPmwB,CAAyBhrB,GACjC,IAAK,GAAD7tC,EAAyB,CAC3B,IAAI8iC,OAAO,EAKX,OAAI+K,GAASpQ,EAAAC,MAAMgL,KACjB5F,EAAU1kC,KAAKo2D,gBAAgB7C,EAAE,KAE7B7uB,EAAQr/B,MAAQrD,EAAAsD,SAAS6Q,KACpBnU,EAAAu9B,KAAK0D,oBACOyB,EAAStwB,WACTswB,EAAS7xB,cACT6xB,EAASv3B,UAC1BomD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,OAGxBryC,KAAKiH,MACHnF,EAAAoF,eAAe0D,wBACf2oD,EAAGlsD,SAGA,MAdc,MAgBrBq9B,EAAU1kC,KAAKo2D,gBAAgB7C,EAAI3xD,KAKjC6tC,GAASpQ,EAAAC,MAAMoR,WAAajB,GAASpQ,EAAAC,MAAMqR,aAE3CjM,EAAQr/B,MAAQrD,EAAAsD,SAAS0Q,YACzB0uB,EAAQr/B,MAAQrD,EAAAsD,SAAS4Q,eACzBwuB,EAAQr/B,MAAQrD,EAAAsD,SAAS2Q,gBAEzBjW,KAAKiH,MACHnF,EAAAoF,eAAewzD,0FACfh2B,EAAQr9B,OAIPrF,EAAAu9B,KAAKqF,4BAA4B6K,EAAO/K,EAAS6uB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,OAhBvD,KAmBzB,OAAQ5C,GAIN,KAAKpQ,EAAAC,MAAM0T,UAGT,GAAIugB,EAAGre,KAAK7V,EAAAC,MAAM2T,YAChB,OAAOjzC,KAAKi4D,8BACV1E,EACAvxD,EAAAu9B,KAAKyB,gCAAgCuyB,EAAGlsD,MAAMosD,QAE9C,GAGJ,IAAIre,EAAQme,EAAGpe,OACXwlB,GAAQ,EACZ,GACE,OAAQpH,EAAG1rD,MAAK,IAGd,KAAKw3B,EAAAC,MAAMqQ,YAET,OADA4jB,EAAG/d,MAAMJ,GACFp1C,KAAK+3D,wBAAwBxE,GAGtC,KAAKl0B,EAAAC,MAAMtpB,WAET,OADAu9C,EAAG9d,iBACK8d,EAAG1rD,QAGT,KAAKw3B,EAAAC,MAAM2T,WACT,IAAKsgB,EAAGre,KAAK7V,EAAAC,MAAMwU,oBAAqB,CACtC6mB,GAAQ,EACR,MAKJ,KAAKt7B,EAAAC,MAAMsU,MAET,OADA2f,EAAG/d,MAAMJ,GACFp1C,KAAK+3D,wBAAwBxE,GAGtC,KAAKl0B,EAAAC,MAAMyU,SACX,KAAK1U,EAAAC,MAAM6K,MACT,MAIF,QACEwwB,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJApH,EAAG/d,MAAMJ,IAGT5lB,EAAOxvB,KAAKo2D,gBAAgB7C,IAEvBA,EAAGre,KAAK7V,EAAAC,MAAM2T,YAOZjxC,EAAAu9B,KAAK8D,8BAA8B7T,EAAM+jC,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,OANpEryC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,MANS,KAWpB,KAAKg4B,EAAAC,MAAM0U,YACT,IAAI5S,EAAqB,IAAIt8B,MAC7B,IAAKyuD,EAAGre,KAAK7V,EAAAC,MAAM2U,cAAe,CAChC,EAAG,CACD,GAAIsf,EAAG1e,QAAUxV,EAAAC,MAAM6K,MACrB3a,EAAO,UAGP,KADAA,EAAOxvB,KAAKo2D,gBAAgB7C,EAAI,IACrB,OAAO,KAGpB,GADAnyB,EAAmBv2B,KAAK2kB,GACpB+jC,EAAG1e,QAAUxV,EAAAC,MAAM2U,aAAc,YAC9Bsf,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAM2U,cAKjB,OAJAj0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAGX,OAAOrF,EAAAu9B,KAAK0B,6BAA6BG,EAAoBmyB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAGrF,KAAKhT,EAAAC,MAAMsQ,SACT,IAAIp6B,EAASxV,KAAK80D,UAAUvB,GAC5B,OAAK/9C,EACA+9C,EAAGre,KAAK7V,EAAAC,MAAMuQ,cAOnBrgB,EAAOxvB,KAAKo2D,gBAAgB7C,EAAE,KAEvBvxD,EAAAu9B,KAAKgC,0BACVv/B,EAAAkoC,cAAc0wB,OACdprC,EACAha,EACA+9C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MALN,MAPhBryC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,MANW,KAiBtB,KAAKg4B,EAAAC,MAAMtpB,WACT,OAAOhU,EAAAu9B,KAAKM,2BAA2B0zB,EAAG9d,iBAAkB8d,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEpF,KAAKhT,EAAAC,MAAM3pB,KACT,OAAO3T,EAAAu9B,KAAK8E,qBAAqBkvB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEzD,KAAKhT,EAAAC,MAAM9yB,YACT,OAAOxK,EAAAu9B,KAAK4C,4BAA4BoxB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEhE,KAAKhT,EAAAC,MAAMxpB,MACT,OAAO9T,EAAAu9B,KAAK4E,sBAAsBovB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAE1D,KAAKhT,EAAAC,MAAMyT,cACT,OAAO/wC,EAAAu9B,KAAK0E,8BAA8BsvB,EAAGv5B,aAAcu5B,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAEnF,KAAKhT,EAAAC,MAAMqU,eACT,OAAO3xC,EAAAu9B,KAAKwD,+BAA+BwwB,EAAGjd,cAAeid,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAErF,KAAKhT,EAAAC,MAAM6T,aACT,OAAOnxC,EAAAu9B,KAAKmD,6BAA6B6wB,EAAG/b,YAAa+b,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAIjF,KAAKhT,EAAAC,MAAMkR,MACT,IAAIqqB,EAAgBtH,EAAGtd,oBACvB,OAAKsd,EAAGre,KAAK7V,EAAAC,MAAMkR,OAOZxuC,EAAAu9B,KAAKkE,8BACVo3B,EACAtH,EAAGnd,kBACHmd,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,OATtBryC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,MAQX,KAAKg4B,EAAAC,MAAMxlB,SACT,OAAO9Z,KAAK+3D,wBAAwBxE,GAEtC,QAKE,OAJAvzD,KAAKiH,MACHnF,EAAAoF,eAAe4zD,oBACfvH,EAAGlsD,SAEE,OAKb4rD,EAAAvxD,UAAAq5D,qCAAA,SACExH,GAKA,IAAIne,EAAQme,EAAGpe,OACf,IAAKoe,EAAGre,KAAK7V,EAAAC,MAAMsQ,UAAW,OAAO,KACrC,IAAI/8B,EAAgB,IAAI/N,MACxB,EAAG,CACD,IAAIkH,EAAOhM,KAAK80D,UAAUvB,GAAI,GAAM,GACpC,IAAKvnD,EAEH,OADAunD,EAAG/d,MAAMJ,GACF,KAETviC,EAAchI,KAAKmB,SACZunD,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,OAAIopB,EAAGre,KAAK7V,EAAAC,MAAMuQ,cAAgB0jB,EAAGre,KAAK7V,EAAAC,MAAM0T,WACvCngC,GAET0gD,EAAG/d,MAAMJ,GACF,OAGT6d,EAAAvxD,UAAAq0D,eAAA,SACExC,GAKA,IAAI/yB,EAAO,IAAI17B,MACf,IAAKyuD,EAAGre,KAAK7V,EAAAC,MAAM2T,YAAa,CAC9B,EAAG,CACD,IAAIzjB,EAAOxvB,KAAKo2D,gBAAgB7C,EAAI,GACpC,IAAK/jC,EAAM,OAAO,KAClBgR,EAAK31B,KAAK2kB,SACH+jC,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB,IAAKopB,EAAGre,KAAK7V,EAAAC,MAAM2T,YAKjB,OAJAjzC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAGX,OAAOm5B,GAGTyyB,EAAAvxD,UAAA00D,gBAAA,SACE7C,EACAyH,QAAA,IAAAA,MAAA,GAGA,IAAIxrC,EAAOxvB,KAAKw6D,qBAAqBjH,GACrC,IAAK/jC,EAAM,OAAO,KAKlB,IAJA,IAGI3c,EAWA48B,EAdAgkB,EAAWjkC,EAAKnoB,MAAMwa,OAMvBhP,EAAgB7S,KAAK+6D,qCAAqCxH,KAC3DA,EAAGre,KAAK7V,EAAAC,MAAM0T,YACd,CACA,IAAIxS,EAAOxgC,KAAK+1D,eAAexC,GAC/B,IAAK/yB,EAAM,OAAO,KAClBhR,EAAOxtB,EAAAu9B,KAAKsC,qBAAqBrS,EAAM3c,EAAe2tB,EAAM+yB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAMpF,IAFA,IACI4oB,EADApzD,EAA0B,MAG3BozD,EAAiBC,EAAoBzrB,EAAQ8jB,EAAG1e,UAAYmmB,GAG7D,OADAzH,EAAG1rD,OACK4nC,GAEN,KAAKpQ,EAAAC,MAAMqO,GACT,IAAIn4B,EAASxV,KAAK80D,UAAUvB,GAC5B,IAAK/9C,EAAQ,OAAO,KACpBga,EAAOxtB,EAAAu9B,KAAKgC,0BACVv/B,EAAAkoC,cAAcyD,GACdne,EACAha,EACA+9C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAExB,MAGF,KAAKhT,EAAAC,MAAM0U,YAET,KADAnsC,EAAO7H,KAAKo2D,gBAAgB7C,IACjB,OAAO,KAClB,IAAKA,EAAGre,KAAK7V,EAAAC,MAAM2U,cAKjB,OAJAj0C,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAETmoB,EAAOxtB,EAAAu9B,KAAK8C,8BACV7S,EACA3nB,EACA0rD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAExB,MAGF,KAAKhT,EAAAC,MAAMoR,UACX,KAAKrR,EAAAC,MAAMqR,YAEPnhB,EAAKnqB,MAAQrD,EAAAsD,SAAS0Q,YACtBwZ,EAAKnqB,MAAQrD,EAAAsD,SAAS4Q,eACtBsZ,EAAKnqB,MAAQrD,EAAAsD,SAAS2Q,gBAEtBjW,KAAKiH,MACHnF,EAAAoF,eAAewzD,0FACflrC,EAAKnoB,OAGTmoB,EAAOxtB,EAAAu9B,KAAKkF,6BACVgL,EACAjgB,EACA+jC,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAExB,MAGF,KAAKhT,EAAAC,MAAMyU,SACT,IAAIjQ,EAAS9jC,KAAKo2D,gBAAgB7C,GAClC,IAAKzvB,EAAQ,OAAO,KACpB,IAAKyvB,EAAGre,KAAK7V,EAAAC,MAAMsU,OAKjB,OAJA5zC,KAAKiH,MACHnF,EAAAoF,eAAeusC,YACf8f,EAAGlsD,QAAS,KAEP,KAET,IAAI08B,EAAS/jC,KAAKo2D,gBAAgB7C,GAClC,IAAKxvB,EAAQ,OAAO,KACpBvU,EAAOxtB,EAAAu9B,KAAKsE,wBACVrU,EACAsU,EACAC,EACAwvB,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAExB,MAGF,KAAKhT,EAAAC,MAAM6K,MACT,IAAIgxB,GAA6B3rC,GACjC,EAAG,CAED,KADAA,EAAOxvB,KAAKo2D,gBAAgB7C,EAAI,IACrB,OAAO,KAClB4H,EAAWtwD,KAAK2kB,SACT+jC,EAAGre,KAAK7V,EAAAC,MAAM6K,QACvB3a,EAAOxtB,EAAAu9B,KAAKyC,sBAAsBm5B,EAAY5H,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MACpE,MAEF,QAME,KALAxqC,EAAO7H,KAAKo2D,gBAAgB7C,EAC1B6H,EAAmB3rB,GACfwrB,EACAA,EAAiB,IAEZ,OAAO,KAGlB,GAAIxrB,GAASpQ,EAAAC,MAAM8T,IACjB,GAAIvrC,EAAKxC,MAAQrD,EAAAsD,SAAS0Q,WACxBwZ,EAAOxtB,EAAAu9B,KAAKgE,+BACV/T,EACsB3nB,EACtB0rD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,UAEnB,IAAIxqC,EAAKxC,MAAQrD,EAAAsD,SAAS6Q,KAqB/B,OAJAnW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACfxtD,EAAKR,OAEA,KApBP,IAAIg0D,EAA+BxzD,EACnC,GAAIwzD,EAAajnD,WAAW/O,MAAQrD,EAAAsD,SAAS0Q,WAW3C,OAJAhW,KAAKiH,MACHnF,EAAAoF,eAAemuD,oBACfgG,EAAajnD,WAAW/M,OAEnB,KAVPg0D,EAAajnD,WAAapS,EAAAu9B,KAAKgE,+BAC7B/T,EACsB6rC,EAAajnD,WACnCm/C,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAS1B7iB,EAAO6rC,OAWT7rC,EAAOxtB,EAAAu9B,KAAKmC,uBAAuB+N,EAAOjgB,EAAM3nB,EAAM0rD,EAAGlsD,MAAMosD,EAAUF,EAAGlhB,MAMpF,OAAO7iB,GAITyjC,EAAAvxD,UAAAy4D,cAAA,SAAc5G,GAGZ,IAFAA,EAAG1e,MAAK,GACJ0e,EAAG7gB,oBAAoB6gB,EAAG1rD,SAC3B,CACD,IAAI2qC,EAAY+gB,EAAG1e,MAAK,GACxB,GACErC,GAAanT,EAAAC,MAAMsV,WACnBpC,GAAanT,EAAAC,MAAM6U,WAEnB,MAEF,GAAI3B,GAAanT,EAAAC,MAAMuU,UAAW,CAChC0f,EAAG1rD,OACH,MAEF,GAAI0rD,EAAG7gB,mBAAoB,MAC3B,OAAQ6gB,EAAG1rD,QACT,KAAKw3B,EAAAC,MAAMtpB,WACTu9C,EAAG9d,iBACH,MAEF,KAAKpW,EAAAC,MAAMyT,cACTwgB,EAAGv5B,aACH,MAEF,KAAKqF,EAAAC,MAAMqU,eACT4f,EAAGjd,cACH,MAEF,KAAKjX,EAAAC,MAAM6T,aACTogB,EAAG/b,eAqBbyb,EA1jGA,CAA4BnxD,EAAA0U,mBA0mG5B,SAAA0kD,EAA6B71D,GAC3B,OAAQA,GACN,KAAKg6B,EAAAC,MAAM6K,MAAO,OAAM,EACxB,KAAK9K,EAAAC,MAAMgS,OACX,KAAKjS,EAAAC,MAAMiS,YACX,KAAKlS,EAAAC,MAAMkS,aACX,KAAKnS,EAAAC,MAAMoS,yBACX,KAAKrS,EAAAC,MAAMmS,gBACX,KAAKpS,EAAAC,MAAMqS,aACX,KAAKtS,EAAAC,MAAMsS,eACX,KAAKvS,EAAAC,MAAMuS,yBACX,KAAKxS,EAAAC,MAAMwS,+BACX,KAAKzS,EAAAC,MAAMyS,2CACX,KAAK1S,EAAAC,MAAM0S,iBACX,KAAK3S,EAAAC,MAAM4S,aACX,KAAK7S,EAAAC,MAAM2S,WAAY,OAAM,EAC7B,KAAK5S,EAAAC,MAAMyU,SAAU,OAAM,EAC3B,KAAK1U,EAAAC,MAAM+R,QAAS,OAAM,EAC1B,KAAKhS,EAAAC,MAAM8R,oBAAqB,OAAM,EACtC,KAAK/R,EAAAC,MAAM0R,IAAK,OAAM,EACtB,KAAK3R,EAAAC,MAAM2R,MAAO,OAAM,EACxB,KAAK5R,EAAAC,MAAMyR,UAAW,OAAM,EAC5B,KAAK1R,EAAAC,MAAM0Q,cACX,KAAK3Q,EAAAC,MAAM2Q,mBACX,KAAK5Q,EAAAC,MAAM4Q,qBACX,KAAK7Q,EAAAC,MAAM6Q,0BAA2B,OAAM,GAC5C,KAAK9Q,EAAAC,MAAMqO,GACX,KAAKtO,EAAAC,MAAMiP,GACX,KAAKlP,EAAAC,MAAMkP,WACX,KAAKnP,EAAAC,MAAMsQ,SACX,KAAKvQ,EAAAC,MAAMuQ,YACX,KAAKxQ,EAAAC,MAAMwQ,gBACX,KAAKzQ,EAAAC,MAAMyQ,mBAAoB,OAAM,GACrC,KAAK1Q,EAAAC,MAAMsR,kBACX,KAAKvR,EAAAC,MAAMuR,wBACX,KAAKxR,EAAAC,MAAMwR,oCAAqC,OAAM,GACtD,KAAKzR,EAAAC,MAAM8Q,KACX,KAAK/Q,EAAAC,MAAM+Q,MAAO,OAAM,GACxB,KAAKhR,EAAAC,MAAMiR,SACX,KAAKlR,EAAAC,MAAMkR,MACX,KAAKnR,EAAAC,MAAMmR,QAAS,OAAM,GAC1B,KAAKpR,EAAAC,MAAMgR,kBAAmB,OAAM,GACpC,KAAKjR,EAAAC,MAAMoR,UACX,KAAKrR,EAAAC,MAAMqR,YAAa,OAAM,GAC9B,KAAKtR,EAAAC,MAAM8T,IACX,KAAK/T,EAAAC,MAAMgL,IACX,KAAKjL,EAAAC,MAAM0U,YAAa,OAAM,GAC9B,QAAS,OAAM,GAKnB,SAAAonB,EAA4B/1D,GAC1B,OAAQA,GACN,KAAKg6B,EAAAC,MAAMgS,OACX,KAAKjS,EAAAC,MAAMiS,YACX,KAAKlS,EAAAC,MAAMkS,aACX,KAAKnS,EAAAC,MAAMoS,yBACX,KAAKrS,EAAAC,MAAMmS,gBACX,KAAKpS,EAAAC,MAAMqS,aACX,KAAKtS,EAAAC,MAAMsS,eACX,KAAKvS,EAAAC,MAAMuS,yBACX,KAAKxS,EAAAC,MAAMwS,+BACX,KAAKzS,EAAAC,MAAMyS,2CACX,KAAK1S,EAAAC,MAAM0S,iBACX,KAAK3S,EAAAC,MAAM4S,aACX,KAAK7S,EAAAC,MAAM2S,WACX,KAAK5S,EAAAC,MAAMyU,SACX,KAAK1U,EAAAC,MAAMgR,kBAAmB,OAAO,EACrC,QAAS,OAAO,GA/qGP5wC,EAAAuzD,SA6jGb,SAAkBqI,GAChBA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBACAA,IAAA,sBAtBF,CAAkB57D,EAAA47D,aAAA57D,EAAA47D,43BC7oGlB,IAAAl8B,EAAAj/B,EAAA,GAsBA8f,EAAA9f,EAAA,GAKAo7D,EAAA,WAME,SAAAA,EAAY7kD,GACV1W,KAAK0W,QAAUA,EA0DnB,OAvDE6kD,EAAA75D,UAAA85D,KAAA,eACE,IAAoB,IAAAzzD,EAAAJ,EAAA3H,KAAK0W,QAAQlT,mBAAmB8L,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAAvD,IAAInB,EAAOiY,EAAAtd,MACdrB,KAAKy7D,aAAa/0D,8GAItB60D,EAAA75D,UAAA+5D,aAAA,SAAa/0D,GACX,OAAQA,EAAQrB,MACd,KAAK+5B,EAAAt2B,YAAYa,OACXjD,EAAQ+C,GAAG21B,EAAA11B,YAAYg0C,WACzB19C,KAAK07D,YAAoBh1D,GAE3B,MAEF,KAAK04B,EAAAt2B,YAAYiO,KACXrQ,EAAQ+C,GAAG21B,EAAA11B,YAAYg0C,WACzB19C,KAAK27D,UAAgBj1D,GAEvB,MAEF,KAAK04B,EAAAt2B,YAAYsM,uBACf,IAAqB,IAAArN,EAAAJ,EAAoBjB,EAASyR,UAAU7I,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,EAA3DiE,EAAQ6S,EAAAtd,OACFoI,GAAG21B,EAAA11B,YAAYg0C,WAC1B19C,KAAK47D,cAAwB9vD,qGAGjC,MAEF,KAAKszB,EAAAt2B,YAAYC,oBACf,IAAqB,IAAA6U,EAAAjW,EAAiBjB,EAASyR,UAAU7I,UAAQusD,EAAAj+C,EAAA/V,QAAAg0D,EAAA/zD,KAAA+zD,EAAAj+C,EAAA/V,OAAA,CAA5D,IAAIiE,KAAQ+vD,EAAAx6D,OACFoI,GAAG21B,EAAA11B,YAAYg0C,WAC1B19C,KAAK87D,WAAkBhwD,qGAG3B,MAEF,KAAKszB,EAAAt2B,YAAYgO,UACCpQ,EAAS+C,GAAG21B,EAAA11B,YAAYg0C,WACtC19C,KAAK+7D,eAA0Br1D,GAEjC,MAEF,QACEgC,QAAO,gBAYf6yD,EAjEA,GAoEAS,EAAA,SAAAh5D,GAYE,SAAAg5D,EAAYtlD,GAAZ,IAAAxT,EACEF,EAAAxC,KAAAR,KAAM0W,IAAQ1W,YANRkD,EAAA+e,MACA/e,EAAA6M,KAAqB,IAAIC,IACzB9M,EAAA+4D,YAAmB,IAmL7B,OA5LgCv4D,EAAAs4D,EAAAh5D,GAGvBg5D,EAAAE,MAAP,SAAaxlD,GACX,OAAO,IAAIslD,EAAWtlD,GAASwlD,SAYjCF,EAAAt6D,UAAAg6D,YAAA,SAAYh1D,GACV,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACVk6C,EAAUz1D,EAAQ+C,GAAG21B,EAAA11B,YAAYkO,SAQrC,GAPAqI,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,aACZE,GACFl6C,EAAGpX,KAAK,UAEVoX,EAAGpX,KAAK7K,KAAKq8D,aAAa31D,EAAQsF,OAClCiW,EAAGpX,KAAK,KACRoX,EAAGpX,KAAKnE,EAAQqD,YACZoyD,EACF,OAAQz1D,EAAQ2Q,mBACd,OACE4K,EAAGpX,KAAK,OACRoX,EAAGpX,KAAKyxD,cAAc51D,EAAQ+Q,uBAC9B,MAEF,OACEwK,EAAGpX,KAAK,OACRoX,EAAGpX,KAAKnE,EAAQoR,mBAAmBxJ,YACnC,MAEF,QAAS5F,QAAO,GAGpBuZ,EAAGpX,KAAK,SAGVmxD,EAAAt6D,UAAAi6D,UAAA,SAAUj1D,GACR,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACdhC,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,eAChBh6C,EAAGpX,KAAK,cACRoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,QACR,YAAIC,EAAUpE,EAAQoE,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAAyxD,EAAA50D,EAAAmD,GAAO0xD,EAAAD,EAAA10D,QAAA20D,EAAA10D,KAAA00D,EAAAD,EAAA10D,OAAA,CAAzB,IAAAE,EAAAC,EAAAw0D,EAAAn7D,MAAA,GAACT,EAAAmH,EAAA,GACR,IADcM,EAAAN,EAAA,IACH1C,MAAQ+5B,EAAAt2B,YAAY8K,UAAW,CACxC,IAAIuoD,EAAsB9zD,EAAQoB,GAAG21B,EAAA11B,YAAYkO,SACjDqI,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,aACZE,EACFl6C,EAAGpX,KAAK,UAERoX,EAAGpX,KAAK,aAEVoX,EAAGpX,KAAK,kBACRoX,EAAGpX,KAAKjK,GACJu7D,IACFl6C,EAAGpX,KAAK,OACRoX,EAAGpX,KAAiBxC,EAAQ2O,cAAc1I,SAAS,MAErD2T,EAAGpX,KAAK,8GAGZ,IAAmB,IAAAxB,EAAA1B,EAAAmD,EAAQwE,UAAQsO,EAAAvU,EAAAxB,QAAA+V,EAAA9V,KAAA8V,EAAAvU,EAAAxB,OAAA,CAA9B,IAAIQ,KAAMuV,EAAAvc,OACFgE,MAAQ+5B,EAAAt2B,YAAY8K,WAC7B5T,KAAKy7D,aAAapzD,sGAIxB4X,EAAAm8C,OAAOn6C,IAAMjiB,KAAKi8D,aAClBh6C,EAAGpX,KAAK,SAGVmxD,EAAAt6D,UAAAk6D,cAAA,SAAcl1D,GACZ,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACV5P,EAAY3L,EAAQ2L,UACxB4N,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,aAChBh6C,EAAGpX,KAAK7K,KAAKq8D,aAAahqD,EAAUF,aACpC8P,EAAGpX,KAAK,KACRoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,KAIR,IAHA,IAAIu1B,EAAa/tB,EAAUb,eACvBC,EAAgB2uB,EAAWn7B,OAEtB5E,EAAI,EAAGA,EAAIoR,IAAiBpR,EAC/BA,GAAG4hB,EAAGpX,KAAK,MAEfoX,EAAGpX,KAAK7K,KAAKq8D,aAAaj8B,EAAW//B,KACrC4hB,EAAGpX,KAAK,KACRoX,EAAGpX,KAAKwH,EAAU6I,iBAAiB7a,IAErC4hB,EAAGpX,KAAK,QACR,QAAIC,EAAUpE,EAAQoE,QACtB,GAAIA,GAAWA,EAAQstC,KAAM,CAC3Bn4B,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,aAChBh6C,EAAGpX,KAAK,cACRoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,YACR,IAAmB,IAAA9C,EAAAJ,EAAAmD,EAAQwE,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAA9B,IAAIQ,EAAMsW,EAAAtd,MACbrB,KAAKy7D,aAAapzD,qGAEpB4X,EAAAm8C,OAAOn6C,IAAMjiB,KAAKi8D,aAClBh6C,EAAGpX,KAAK,UAIZmxD,EAAAt6D,UAAAo6D,WAAA,SAAWp1D,GACT,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACdhC,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,eAChBh6C,EAAGpX,KAAK,cACRoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,QAERoV,EAAAm8C,OAAOn6C,IAAMjiB,KAAKi8D,aAClBh6C,EAAGpX,KAAK,SAGVmxD,EAAAt6D,UAAA+6D,eAAA,SAAe/1D,GACb1G,KAAK87D,WAAWp1D,IAGlBs1D,EAAAt6D,UAAAq6D,eAAA,SAAer1D,GACb,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACdhC,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,eAChBh6C,EAAGpX,KAAK,cACRoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,QACR,QAAIC,EAAUpE,EAAQoE,QACtB,GAAIA,MACF,IAAmB,IAAA/C,EAAAJ,EAAAmD,EAAQwE,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAA9B,IAAIQ,EAAMsW,EAAAtd,MACbrB,KAAKy7D,aAAapzD,qGAGtB4X,EAAAm8C,OAAOn6C,IAAMjiB,KAAKi8D,aAClBh6C,EAAGpX,KAAK,SAGVmxD,EAAAt6D,UAAA26D,aAAA,SAAarwD,GACX,OAAQA,EAAK3G,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAOrF,KAAK0W,QAAQ9S,QAAQy4C,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAOr8C,KAAK0W,QAAQ9S,QAAQy4C,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADA3zC,QAAO,GACA,KAKbszD,EAAAt6D,UAAAw6D,MAAA,WACE,IAAIj6C,EAAKjiB,KAAKiiB,GAMd,OALAA,EAAGpX,KAAK,4BACN7K,KAAKi8D,YACPj8D,KAAKw7D,SACHx7D,KAAKi8D,YACPh6C,EAAGpX,KAAK,OACDoX,EAAGtX,KAAK,KAEnBqxD,EA5LA,CAAgCT,GAAnB77D,EAAAs8D,aA+Lb,IAAAU,EAAA,SAAA15D,GAYE,SAAA05D,EAAYhmD,GAAZ,IAAAxT,EACEF,EAAAxC,KAAAR,KAAM0W,IAAQ1W,YANRkD,EAAA+e,MACA/e,EAAA6M,KAAqB,IAAIC,IACzB9M,EAAA+4D,YAAmB,IAgL7B,OAzLgCv4D,EAAAg5D,EAAA15D,GAGvB05D,EAAAR,MAAP,SAAaxlD,GACX,OAAO,IAAIgmD,EAAWhmD,GAASwlD,SAYjCQ,EAAAh7D,UAAAg6D,YAAA,SAAYh1D,GACV,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACVk6C,EAAUz1D,EAAQ+C,GAAG21B,EAAA11B,YAAYkO,SACrCqI,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,aACZE,GACFl6C,EAAGpX,KAAK,UAEVoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,MACRoX,EAAGpX,KAAK7K,KAAKq8D,aAAa31D,EAAQsF,OAClCiW,EAAGpX,KAAK,OACR7K,KAAK+7D,eAAer1D,KAGtBg2D,EAAAh7D,UAAAi6D,UAAA,SAAUj1D,GACR,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACdhC,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,eAChBh6C,EAAGpX,KAAK,SACRoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,QACR,QAAIC,EAAUpE,EAAQoE,QACtB,GAAIA,EAAS,CACX,IAAI6xD,EAAa7xD,EAAQstC,SACzB,IAA2B,IAAAwkB,EAAAj1D,EAAAmD,GAAO+xD,EAAAD,EAAA/0D,QAAAg1D,EAAA/0D,KAAA+0D,EAAAD,EAAA/0D,OAAA,CAAzB,IAAAE,EAAAC,EAAA60D,EAAAx7D,MAAA,GAACT,EAAAmH,EAAA,GAAMM,EAAAN,EAAA,GACVM,EAAOhD,MAAQ+5B,EAAAt2B,YAAY8K,YAC7B5T,KAAK+P,KAAKE,IAAI5H,GACd4X,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,aAChBh6C,EAAGpX,KAAKjK,GACJyH,EAAOoB,GAAG21B,EAAA11B,YAAYkO,WACxBqK,EAAGpX,KAAK,OACRoX,EAAGpX,KAAiBxC,EAAQ2O,cAAc1I,SAAS,MAErD2T,EAAGpX,KAAK,SACN8xD,qGAGFA,GACF38D,KAAK+7D,eAAer1D,GAGxBuZ,EAAAm8C,OAAOn6C,IAAMjiB,KAAKi8D,aAClBh6C,EAAGpX,KAAK,SAGV6xD,EAAAh7D,UAAAk6D,cAAA,SAAcl1D,GACZ,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACV5P,EAAY3L,EAAQ2L,UACxB4N,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,aAChBh6C,EAAGpX,KAAK,aACRoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,KAIR,IAHA,IAAIu1B,EAAa/tB,EAAUb,eACvBC,EAAgB2uB,EAAWn7B,OAEtB5E,EAAI,EAAGA,EAAIoR,IAAiBpR,EAC/BA,GAAG4hB,EAAGpX,KAAK,MAEfoX,EAAGpX,KAAKwH,EAAU6I,iBAAiB7a,IACnC4hB,EAAGpX,KAAK,MACRoX,EAAGpX,KAAK7K,KAAKq8D,aAAaj8B,EAAW//B,KAEvC4hB,EAAGpX,KAAK,OACRoX,EAAGpX,KAAK7K,KAAKq8D,aAAahqD,EAAUF,aACpC8P,EAAGpX,KAAK,OACR7K,KAAK+7D,eAAer1D,KAGtBg2D,EAAAh7D,UAAAo6D,WAAA,SAAWp1D,GACT,IAAI1G,KAAK+P,KAAK/F,IAAItD,GAAlB,CACA1G,KAAK+P,KAAKE,IAAIvJ,GACd,IAAIub,EAAKjiB,KAAKiiB,GACV66C,EAAcp2D,EAAQrB,MAAQ+5B,EAAAt2B,YAAYmW,UAC9CgB,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,eACZa,EACF76C,EAAGpX,KAAK,eAEJnE,EAAQ+C,GAAG21B,EAAA11B,YAAYgkC,WACzBzrB,EAAGpX,KAAK,aAEVoX,EAAGpX,KAAK,WAEVoX,EAAGpX,KAAKnE,EAAQqD,YAChB,IAAIgL,EAAOrO,EAAQqO,KACfA,IACFkN,EAAGpX,KAAK,aACRoX,EAAGpX,KAAKkK,EAAKhL,aAEfkY,EAAGpX,KAAK,QACMnE,EAAQhF,UAAUoJ,QAItBpE,EAAQoE,QAIlBmV,EAAAm8C,OAAOn6C,IAAMjiB,KAAKi8D,aAClBh6C,EAAGpX,KAAK,SAGV6xD,EAAAh7D,UAAA+6D,eAAA,SAAe/1D,GACb1G,KAAK87D,WAAWp1D,IAGlBg2D,EAAAh7D,UAAAq6D,eAAA,SAAer1D,GACb,QAAIoE,EAAUpE,EAAQoE,QACtB,GAAIA,GAAWA,EAAQstC,KAAM,CAC3B,IAAIn2B,EAAKjiB,KAAKiiB,GACdhC,EAAAm8C,OAAOn6C,EAAIjiB,KAAKi8D,eAChBh6C,EAAGpX,KAAK,cACRoX,EAAGpX,KAAKnE,EAAQqD,YAChBkY,EAAGpX,KAAK,YACR,IAAmB,IAAA9C,EAAAJ,EAAAmD,EAAQwE,UAAQqP,EAAA5W,EAAAF,QAAA8W,EAAA7W,KAAA6W,EAAA5W,EAAAF,OAAA,CAA9B,IAAIQ,EAAMsW,EAAAtd,MACbrB,KAAKy7D,aAAapzD,qGAEpB4X,EAAAm8C,OAAOn6C,IAAMjiB,KAAKi8D,aAClBh6C,EAAGpX,KAAK,SAIZ6xD,EAAAh7D,UAAA26D,aAAA,SAAarwD,GACX,OAAQA,EAAK3G,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOrF,KAAK0W,QAAQ9S,QAAQy4C,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOr8C,KAAK0W,QAAQ9S,QAAQy4C,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAEE,OADA3zC,QAAO,GACA,KAKbg0D,EAAAh7D,UAAAw6D,MAAA,WACE,IAAIj6C,EAAKjiB,KAAKiiB,GAed,OAdAA,EAAGpX,KAAK,+BACRoX,EAAGpX,KAAK,yBACRoX,EAAGpX,KAAK,0BACRoX,EAAGpX,KAAK,0BACRoX,EAAGpX,KAAK,yBACRoX,EAAGpX,KAAK,0BACRoX,EAAGpX,KAAK,0BACRoX,EAAGpX,KAAK,0BACRoX,EAAGpX,KAAK,0BACRoX,EAAGpX,KAAK,0BACN7K,KAAKi8D,YACPj8D,KAAKw7D,SACHx7D,KAAKi8D,YACPh6C,EAAGpX,KAAK,OACD7K,KAAKiiB,GAAGtX,KAAK,KAExB+xD,EAzLA,CAAgCnB,GAAnB77D,EAAAg9D,4FC9Rb,IAAAz6D,EAAA9B,EAAA,GAeA48D,EAAA,WAWE,SAAAA,IAHA/8D,KAAAyH,QACAzH,KAAAg9D,WAAkB,EAoyBpB,OA3yBSD,EAAAE,UAAP,SAAiBt9D,GACf,IAAIu9D,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAUt9D,GACdu9D,EAAWjlB,UASpB8kB,EAAAr7D,UAAAu7D,UAAA,SAAUt9D,GACR,MAAM,IAAIiM,MAAM,oBAGlBmxD,EAAAr7D,UAAAy7D,kBAAA,SAAkBplC,GAChB,IAAIn3B,EAAOqB,EAAA+3B,WAAWojC,yBAAyBrlC,KAAU,IAAM/3B,KAAKg9D,WAAW1uD,SAAS,IACpFwkB,EAAOsyB,yBAAyBrtB,GACpC/3B,KAAK6K,KAAK,aACV7K,KAAK6K,KAAKjK,GACVZ,KAAK6K,KAAK,KACT,IAAK,IAAIxK,EAAW,EAAG2E,EAAWq4D,8BAA8BtlC,GAAO13B,EAAI2E,IAAK3E,EAC3EA,EAAI,GAAGL,KAAK6K,KAAK,MACrB7K,KAAK6K,KAAK,KACV7K,KAAK6K,KAAKxK,EAAEiO,SAAS,KACrBtO,KAAK6K,KAAK,MACV7K,KAAK6K,KAAKyyD,EAAiBC,0BAA0BxlC,EAAM13B,KAE7DL,KAAK6K,KAAK,OACV7K,KAAK6K,KAAKyyD,EAAiBE,2BAA2BzlC,KACtD/3B,KAAK6K,KAAK,KACNgwB,yBAAyB/H,IAAS7wB,EAAAsgB,aAAak7C,OACjDz9D,KAAK6K,KAAK,OAEZ7K,KAAK09D,oBAAoB5qC,GACrB+H,yBAAyB/H,IAAS7wB,EAAAsgB,aAAak7C,OACjDz9D,KAAK6K,KAAK,WAEV7K,KAAKg9D,YAGTD,EAAAr7D,UAAAg8D,oBAAA,SAAoBluC,GAClB,IAGImuC,EACAC,EACAv9D,EAAU2E,EALVoX,EAAKye,yBAAyBrL,GAC9BxjB,EAAO+uB,2BAA2BvL,GAMtC,OAAQpT,GACN,KAAKna,EAAAsgB,aAAak7C,MAOhB,IAN0D,OAArDG,EAAS37D,EAAA+3B,WAAW6jC,sBAAsBruC,OAC7CxvB,KAAK6K,KAAK+yD,GACV59D,KAAK6K,KAAK,OAEZ7K,KAAK6K,KAAK,OACV7F,EAAI84D,6BAA6BtuC,GAC5BnvB,EAAI,EAAGA,EAAI2E,IAAK3E,EACnBL,KAAK09D,oBAAoBK,uBAAuBvuC,EAAMnvB,IAGxD,YADAL,KAAK6K,KAAK,OAGZ,KAAK5I,EAAAsgB,aAAay7C,GAiBhB,YAhBIhyD,GAAQ/J,EAAAyZ,WAAW4W,MACrBtyB,KAAK6K,KAAK,QACV7K,KAAK09D,oBAAoBO,wBAAwBzuC,IACjDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBQ,qBAAqB1uC,KAC1CmuC,EAASQ,sBAAsB3uC,MACjCxvB,KAAK6K,KAAK,UACV7K,KAAK09D,oBAAoBC,MAG3B39D,KAAK09D,oBAAoBO,wBAAwBzuC,IACjDxvB,KAAK6K,KAAK,OACV7K,KAAK09D,oBAAoBQ,qBAAqB1uC,IAC9CxvB,KAAK6K,KAAK,OACV7K,KAAK09D,oBAAoBS,sBAAsB3uC,MAInD,KAAKvtB,EAAAsgB,aAAa67C,KACyC,OAApDR,EAAS37D,EAAA+3B,WAAWqkC,qBAAqB7uC,OAC5CxvB,KAAK6K,KAAK+yD,GACV59D,KAAK6K,KAAK,OAEZ7K,KAAK6K,KAAK,OACV7K,KAAK09D,oBAAoBY,qBAAqB9uC,IAC9CxvB,KAAK6K,KAAK,gBAEZ,KAAK5I,EAAAsgB,aAAag8C,MAahB,OAZIZ,EAASa,2BAA2BhvC,MACtCxvB,KAAK6K,KAAK,QACV7K,KAAK09D,oBAAoBC,GACzB39D,KAAK6K,KAAK,YAE8C,OAArD+yD,EAAS37D,EAAA+3B,WAAWykC,sBAAsBjvC,MAC7CxvB,KAAK6K,KAAK,UACV7K,KAAK6K,KAAK+yD,GACV59D,KAAK6K,KAAK,QAEV7K,KAAK6K,KAAK,aAId,KAAK5I,EAAAsgB,aAAam8C,OAClB,KAAKz8D,EAAAsgB,aAAao8C,KAClB,KAAK18D,EAAAsgB,aAAaq8C,WAClB,KAAK38D,EAAAsgB,aAAas8C,aAChB,MAAM,IAAIjzD,MAAM,mBAElB,KAAK3J,EAAAsgB,aAAa8Y,SAGhB,OAFAr7B,KAAK6K,KAAK,UACV7K,KAAK6K,KAAKywB,0BAA0B9L,GAAMlhB,SAAS,KAGrD,KAAKrM,EAAAsgB,aAAau8C,SAKhB,OAJA9+D,KAAK6K,KAAK,KACV7K,KAAK6K,KAAKk0D,0BAA0BvvC,GAAMlhB,SAAS,KACnDtO,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBsB,0BAA0BxvC,IAGrD,KAAKvtB,EAAAsgB,aAAagZ,UAClB,KAAKt5B,EAAAsgB,aAAa08C,UAChB,MAAM,IAAIrzD,MAAM,mBAElB,KAAK3J,EAAAsgB,aAAakZ,KAQhB,OAPAz7B,KAAK6K,KAAK,SACV7K,KAAK6K,KAAKyyD,EAAiBtxD,IAC3BhM,KAAK6K,KAAK,MACV7K,KAAK6K,KAAKgxB,uBAAuBrM,GAAMlhB,SAAS,KAChDtO,KAAK6K,KAAK,OACV7K,KAAK09D,oBAAoBhiC,oBAAoBlM,SAC7CxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAAsgB,aAAa28C,MAUhB,OATAl/D,KAAK6K,KAAK,UACV7K,KAAK6K,KAAKyyD,EAAiBtxD,IAC3BhM,KAAK6K,KAAK,MACV7K,KAAK6K,KAAKs0D,wBAAwB3vC,GAAMlhB,SAAS,KACjDtO,KAAK6K,KAAK,OACV7K,KAAK09D,oBAAoB0B,qBAAqB5vC,IAC9CxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoB2B,uBAAuB7vC,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAAsgB,aAAauY,MAChB,OAAQ9uB,GACN,KAAK/J,EAAAyZ,WAAWC,IAEd,YADA3b,KAAK6K,KAAKmwB,0BAA0BxL,GAAMlhB,SAAS,KAGrD,KAAKrM,EAAAyZ,WAAWE,IASd,YARA5b,KAAK6K,KACHyxD,cACE5kD,QACEujB,6BAA6BzL,GAC7B0L,8BAA8B1L,MAMtC,KAAKvtB,EAAAyZ,WAAWG,IAEd,YADA7b,KAAK6K,KAAKswB,0BAA0B3L,GAAMlhB,SAAS,KAGrD,KAAKrM,EAAAyZ,WAAWI,IAEd,YADA9b,KAAK6K,KAAKuwB,0BAA0B5L,GAAMlhB,SAAS,KAIvD,MAEF,KAAKrM,EAAAsgB,aAAayZ,MAChB,OAAQE,oBAAoB1M,IAC1B,KAAKvtB,EAAA2iB,QAAQ06C,OAIX,OAHAt/D,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ26C,OAIX,OAHAv/D,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ46C,UAIX,OAHAx/D,KAAK6K,KAAK,gBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ2tC,OACb,KAAKtwD,EAAA2iB,QAAQ4tC,OAGX,OAFAxyD,KAAK6K,KAAK,UACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ66C,OAIX,OAHAz/D,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ86C,QAIX,OAHA1/D,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ+6C,SAIX,OAHA3/D,KAAK6K,KAAK,eACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQg7C,SAIX,OAHA5/D,KAAK6K,KAAK,eACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQi7C,WAIX,OAHA7/D,KAAK6K,KAAK,iBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQk7C,QAIX,OAHA9/D,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ8tC,OACb,KAAKzwD,EAAA2iB,QAAQ+tC,OAGX,OAFA3yD,KAAK6K,KAAK,UACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQm7C,OAIX,OAHA//D,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQo7C,OAIX,OAHAhgE,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQq7C,UAIX,OAHAjgE,KAAK6K,KAAK,gBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQs7C,OAIX,OAHAlgE,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQu7C,QAIX,OAHAngE,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQw7C,SAIX,OAHApgE,KAAK6K,KAAK,eACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQy7C,SAIX,OAHArgE,KAAK6K,KAAK,eACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ07C,WAIX,OAHAtgE,KAAK6K,KAAK,iBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ27C,QAIX,OAHAvgE,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ+hC,UAGX,OAFA3mD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQgiC,UAGX,OAFA5mD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ8hC,QAKb,KAAKzkD,EAAA2iB,QAAQ8gC,cAGX,OAFA1lD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ6gC,cAGX,OAFAzlD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQihC,cAGX,OAFA7lD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQghC,cAGX,OAFA5lD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQmhC,cAGX,OAFA/lD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQkhC,cAGX,OAFA9lD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQqhC,cAGX,OAFAjmD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQohC,cAGX,OAFAhmD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ47C,eAIX,OAHAxgE,KAAK6K,KAAK,yBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ67C,eAIX,OAHAzgE,KAAK6K,KAAK,yBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQwhC,gBAGX,OAFApmD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ4hC,gBAGX,OAFAxmD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQyhC,gBAGX,OAFArmD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ6hC,gBAGX,OAFAzmD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQshC,gBAGX,OAFAlmD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ0hC,gBAGX,OAFAtmD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQuhC,gBAGX,OAFAnmD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ2hC,gBAGX,OAFAvmD,KAAK6K,KAAK,mBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ2gC,WAGX,OAFAvlD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ4gC,UAGX,OAFAxlD,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,IAGlD,KAAKvtB,EAAA2iB,QAAQ87C,eAIX,OAHA1gE,KAAK6K,KAAK,yBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2iB,QAAQ+7C,eAIX,OAHA3gE,KAAK6K,KAAK,yBACV7K,KAAK09D,oBAAoBzhC,uBAAuBzM,SAChDxvB,KAAK6K,KAAK,KAId,MAEF,KAAK5I,EAAAsgB,aAAa4Z,OAChB,OAAQG,qBAAqB9M,IAC3B,KAAKvtB,EAAA2lB,SAAS+2B,OACd,KAAK18C,EAAA2lB,SAAS2hC,OACd,KAAKtnD,EAAA2lB,SAAS4hC,OACd,KAAKvnD,EAAA2lB,SAAS6hC,OAIZ,OAHAzpD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS8hC,OACd,KAAKznD,EAAA2lB,SAAS+hC,OACd,KAAK1nD,EAAA2lB,SAASgiC,OACd,KAAK3nD,EAAA2lB,SAASiiC,OAIZ,OAHA7pD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASkiC,OACd,KAAK7nD,EAAA2lB,SAASmiC,OACd,KAAK9nD,EAAA2lB,SAASoiC,OACd,KAAK/nD,EAAA2lB,SAASqiC,OAIZ,OAHAjqD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASsiC,OACd,KAAKjoD,EAAA2lB,SAASuiC,OACd,KAAKloD,EAAA2lB,SAAS0iC,OACd,KAAKroD,EAAA2lB,SAAS2iC,OAIZ,OAHAvqD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASwiC,OAMZ,OALApqD,KAAK6K,KAAK,eACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAAS4iC,OACd,KAAKvoD,EAAA2lB,SAAS6iC,OAIZ,OAHAzqD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS8iC,OAMZ,OALA1qD,KAAK6K,KAAK,eACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAAS0jC,OACd,KAAKrpD,EAAA2lB,SAAS2jC,OAIZ,OAHAvrD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS4jC,MACd,KAAKvpD,EAAA2lB,SAAS6jC,MAIZ,OAHAzrD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS8jC,OACd,KAAKzpD,EAAA2lB,SAAS+jC,OAIZ,OAHA3rD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASmjC,OACd,KAAK9oD,EAAA2lB,SAASojC,OAIZ,OAHAhrD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASwjC,OACd,KAAKnpD,EAAA2lB,SAASyjC,OAIZ,OAHArrD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASsjC,OACd,KAAKjpD,EAAA2lB,SAASujC,OAIZ,OAHAnrD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASg5C,QAMZ,OALA5gE,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAASi5C,QAMZ,OALA7gE,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAASs7B,MACd,KAAKjhD,EAAA2lB,SAASmhC,MACd,KAAK9mD,EAAA2lB,SAASohC,MACd,KAAK/mD,EAAA2lB,SAASqhC,MAIZ,OAHAjpD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASshC,MACd,KAAKjnD,EAAA2lB,SAASuhC,MACd,KAAKlnD,EAAA2lB,SAASwhC,MACd,KAAKnnD,EAAA2lB,SAASyhC,MAIZ,OAHArpD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASy/B,MACd,KAAKplD,EAAA2lB,SAAS0/B,MACd,KAAKrlD,EAAA2lB,SAAS6/B,MACd,KAAKxlD,EAAA2lB,SAAS8/B,MAIZ,OAHA1nD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS2/B,MAKZ,OAJAvnD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,iBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASqgC,MACd,KAAKhmD,EAAA2lB,SAASsgC,MACd,KAAKjmD,EAAA2lB,SAASygC,MACd,KAAKpmD,EAAA2lB,SAAS0gC,MAIZ,OAHAtoD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASugC,MAKZ,OAJAnoD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,kBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS+/B,MACd,KAAK1lD,EAAA2lB,SAASggC,MACd,KAAK3lD,EAAA2lB,SAASmgC,MACd,KAAK9lD,EAAA2lB,SAASogC,MAIZ,OAHAhoD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,YACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASigC,MAKZ,OAJA7nD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,iBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS2gC,MACd,KAAKtmD,EAAA2lB,SAAS4gC,MACd,KAAKvmD,EAAA2lB,SAAS+gC,MACd,KAAK1mD,EAAA2lB,SAASghC,MAIZ,OAHA5oD,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS6gC,MAKZ,OAJAzoD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,kBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASyiC,OAKZ,OAJArqD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,iBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS+iC,OAKZ,OAJA3qD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,iBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASk5C,QAMZ,OALA9gE,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAASm5C,QAMZ,OALA/gE,KAAK6K,KAAK,cACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAAS4/B,MAKZ,OAJAxnD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,iBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASwgC,MAKZ,OAJApoD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,kBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASkgC,MAKZ,OAJA9nD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,iBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAAS8gC,MAKZ,OAJA1oD,KAAK6K,KAAK,SACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,kBACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,IAGnD,KAAKvtB,EAAA2lB,SAASo5C,YAMZ,OALAhhE,KAAK6K,KAAK,kBACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAASq5C,OAMZ,OALAjhE,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAASs5C,OAMZ,OALAlhE,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAASu5C,YAMZ,OALAnhE,KAAK6K,KAAK,kBACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAASw5C,OAMZ,OALAphE,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAA2lB,SAASy5C,OAMZ,OALArhE,KAAK6K,KAAK,aACV7K,KAAK09D,oBAAoBthC,uBAAuB5M,IAChDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoBrhC,wBAAwB7M,SACjDxvB,KAAK6K,KAAK,KAId,OAEF,KAAK5I,EAAAsgB,aAAa++C,OAUhB,OATAthE,KAAK6K,KAAK,WACV7K,KAAK6K,KAAKyyD,EAAiBtxD,IAC3BhM,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoB6D,yBAAyB/xC,IAClDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoB8D,0BAA0BhyC,IACnDxvB,KAAK6K,KAAK,MACV7K,KAAK09D,oBAAoB+D,4BAA4BjyC,SACrDxvB,KAAK6K,KAAK,KAGZ,KAAK5I,EAAAsgB,aAAam/C,KAGhB,OAFA1hE,KAAK09D,oBAAoBiE,sBAAsBnyC,SAC/CxvB,KAAK6K,KAAK,OAGZ,KAAK5I,EAAAsgB,aAAaq/C,OAQhB,aAPIjE,EAASkE,wBAAwBryC,KACnCxvB,KAAK6K,KAAK,WACV7K,KAAK09D,oBAAoBC,GACzB39D,KAAK6K,KAAK,QAEV7K,KAAK6K,KAAK,cAId,KAAK5I,EAAAsgB,aAAau/C,KAChB,OAAQC,mBAAmBvyC,IACzB,KAAKvtB,EAAAwqB,OAAOu1C,cAEV,YADAhiE,KAAK6K,KAAK,oBAGZ,KAAK5I,EAAAwqB,OAAOw1C,WAIV,OAHAjiE,KAAK6K,KAAK,gBACV7K,KAAK09D,oBAAoBwE,wBAAwB1yC,EAAM,SACvDxvB,KAAK6K,KAAK,KAId,MAEF,KAAK5I,EAAAsgB,aAAa4/C,IAEhB,YADAniE,KAAK6K,KAAK,OAGZ,KAAK5I,EAAAsgB,aAAa6/C,YAEhB,YADApiE,KAAK6K,KAAK,iBAGZ,KAAK5I,EAAAsgB,aAAa8/C,cAClB,KAAKpgE,EAAAsgB,aAAa+/C,UAClB,KAAKrgE,EAAAsgB,aAAaggD,WAClB,KAAKtgE,EAAAsgB,aAAaigD,YAEpB,MAAM,IAAI52D,MAAM,oBAGVmxD,EAAAr7D,UAAAmJ,KAAR,SAAapD,GAEXzH,KAAKyH,KAAKoD,KAAKpD,IAGjBs1D,EAAAr7D,UAAAu2C,OAAA,WACE,IAAIl8B,EAAM/b,KAAKyH,KAAKkD,KAAK,IAEzB,OADA3K,KAAKyH,QACEsU,GAEXghD,EA7yBA,GA+yBA,SAAAO,EAA0BtxD,GACxB,OAAQA,GACN,KAAK/J,EAAAyZ,WAAW4W,KAAM,MAAO,OAC7B,KAAKrwB,EAAAyZ,WAAWC,IAAK,MAAO,MAC5B,KAAK1Z,EAAAyZ,WAAWE,IAAK,MAAO,MAC5B,KAAK3Z,EAAAyZ,WAAWG,IAAK,MAAO,MAC5B,KAAK5Z,EAAAyZ,WAAWI,IAAK,MAAO,MAC5B,KAAK7Z,EAAAyZ,WAAW0mD,YAAa,MAAM,IAAIx2D,MAAM,oBAC7C,KAAK3J,EAAAyZ,WAAW+mD,KAAM,MAAM,IAAI72D,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhBlM,EAAAq9D,4FCfb,IAAAv6C,EAAAriB,EAAA,GAMAuiE,EAAAviE,EAAA,IAIAwiE,EAAAxiE,EAAA,IAKA2B,EAAA3B,EAAA,GA6CoCT,EAAAkjE,iBA1ClC9gE,EAAAogB,wBAOF,IAAA2gD,EAAA1iE,EAAA,IAIAi/B,EAAAj/B,EAAA,GAgIST,EAAA+C,eA9HP28B,EAAA38B,eAIF/C,EAAA2zD,UAAA,SAA0B5rD,EAAcF,EAAc0D,EACpD63D,GAOA,YARoD,IAAA73D,OAAA,QACpD,IAAA63D,MAAA,MAEKA,IACHA,EAAS,IAAID,EAAA5P,OACbhoD,GAAU,GAEZ63D,EAAOzP,UAAU5rD,EAAMF,EAAM0D,GACtB63D,GAITpjE,EAAAk1D,SAAA,SAAyBkO,GACvB,OAAOA,EAAOlO,YAIhBl1D,EAAAqjE,eAAA,SAA+BD,GAC7B,IAAIpsD,EAAUosD,EAAOpsD,QACrB,OAAOA,EAAQvT,kBAAoBuT,EAAQzT,YAAYgC,OACnDyR,EAAQzT,YAAYyT,EAAQvT,qBAC5B,MAONzD,EAAAsjE,OAAA,SAAuBhiD,GACrB,OAAOA,EAAQZ,UAAYte,EAAAie,mBAAmBM,MAIhD3gB,EAAAujE,UAAA,SAA0BjiD,GACxB,OAAOA,EAAQZ,UAAYte,EAAAie,mBAAmBO,SAIhD5gB,EAAAwjE,QAAA,SAAwBliD,GACtB,OAAOA,EAAQZ,UAAYte,EAAAie,mBAAmBQ,OAIhD7gB,EAAAyjE,cAAA,WACE,OAAO,IAAI3gD,EAAAi4B,SAIb/6C,EAAA0jE,UAAA,SAA0Bx/D,EAAkB2Q,GAC1C3Q,EAAQ2Q,OAASA,GAInB7U,EAAA2jE,iBAAA,SAAiCz/D,EAAkB+2C,GACjD/2C,EAAQ+2C,cAAgBA,GAI1Bj7C,EAAA4jE,YAAA,SAA4B1/D,EAAkBg3C,GAC5Ch3C,EAAQg3C,SAAWA,GAIrBl7C,EAAA6jE,YAAA,SAA4B3/D,EAAkBi3C,GAC5Cj3C,EAAQi3C,SAAWA,GAIrBn7C,EAAA8jE,gBAAA,SAAgC5/D,EAAkBk3C,GAChDl3C,EAAQk3C,aAAeA,GAIzBp7C,EAAA+jE,eAAA,SAA+B7/D,EAAkBm3C,GAC/Cn3C,EAAQm3C,YAAcA,GAIxBr7C,EAAAgkE,aAAA,SAA6B9/D,EAAkB2Y,GAC7C3Y,EAAQ2Y,UAAYA,GAItB7c,EAAAikE,cAAA,SAA8B//D,EAAkBo3C,GAC9Cp3C,EAAQo3C,WAAaA,GAIvBt7C,EAAAkkE,eAAA,SAA+BhgE,EAAkBhD,EAAc0I,GAC7D,IAAIJ,EAAgBtF,EAAQsF,cACvBA,IAAetF,EAAQsF,cAAgBA,EAAgB,IAAIpG,KAChEoG,EAAcrC,IAAIjG,EAAM0I,IAI1B5J,EAAAmkE,cAAA,SAA8Bf,GAC5B,OAAOA,EAAO7qB,UAIhBv4C,EAAAokE,eAAA,SAA+BptD,EAAkB9S,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAI4e,EAAA04B,SAASxkC,EAAS9S,GAASg4C,WAIxCl8C,EAAAqkE,gBAAA,SAAgCpkE,GAC9B,IAAIu9D,EAAa,IAAIwF,EAAA3F,WAErB,OADAG,EAAWD,UAAUt9D,GACdu9D,EAAWjlB,UAIpBv4C,EAAAskE,SAAA,SAAyBttD,GACvB,OAAOisD,EAAA3G,WAAWE,MAAMxlD,IAI1BhX,EAAAukE,SAAA,SAAyBvtD,GACvB,OAAOisD,EAAAjG,WAAWR,MAAMxlD,sBC9J1B,SAAA+mC,GAAA,MAAA3hC,EAAA,IAAAy1C,aAAA,GACA11C,EAAA,IAAAy1C,aAAAx1C,EAAAwR,QACA3R,EAAA,IAAA01C,WAAAv1C,EAAAwR,QAEAmwB,EAAAymB,WAAA,SAAA7iE,GAEA,OADAwa,EAAA,GAAAxa,EACAsa,EAAA,IAGA8hC,EAAA0mB,WAAA,SAAA9iE,GAEA,OADAsa,EAAA,GAAAta,EACAwa,EAAA,IAGA4hC,EAAA2mB,WAAA,SAAA/iE,GAEA,OADAya,EAAA,GAAAza,EACAqW,QAAAiE,EAAA,GAAAA,EAAA,KAGA8hC,EAAA4mB,WAAA,SAAAhjE,GAGA,OAFAsa,EAAA,GAAA0b,QAAAh2B,GACAsa,EAAA,GAAA2b,SAAAj2B,GACAya,EAAA,qCCtBAnc,EAAAD,QAAA4kE,EAKA,IAAAC,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAA/2C,OAAA,IAAAoM,YACA,u2BACSn6B,QACR,MAAA6tC,IAcD,SAAA+2B,EAAAI,EAAAC,EAAAC,GAMA5kE,KAAA0kE,IAAA,EAAAA,EAMA1kE,KAAA2kE,KAAA,EAAAA,EAMA3kE,KAAA4kE,aAoCA,SAAAC,EAAAC,GACA,YAAAA,KAAA,YAXAR,EAAA5iE,UAAAqjE,WAEAhkE,OAAAC,eAAAsjE,EAAA5iE,UAAA,cAAqDL,OAAA,IAkBrDijE,EAAAO,SAOA,IAAAG,KAOAC,KAQA,SAAAC,EAAA7jE,EAAAujE,GACA,IAAAE,EAAAK,EAAAC,EACA,OAAAR,GAEAQ,EAAA,IADA/jE,KAAA,IACAA,EAAA,OACA8jE,EAAAF,EAAA5jE,IAEA8jE,GAEAL,EAAAO,EAAAhkE,GAAA,EAAAA,GAAA,WACA+jE,IACAH,EAAA5jE,GAAAyjE,GACAA,IAGAM,GAAA,MADA/jE,GAAA,IACAA,EAAA,OACA8jE,EAAAH,EAAA3jE,IAEA8jE,GAEAL,EAAAO,EAAAhkE,IAAA,WACA+jE,IACAJ,EAAA3jE,GAAAyjE,GACAA,GAmBA,SAAAQ,EAAAjkE,EAAAujE,GACA,GAAAW,MAAAlkE,GACA,OAAAujE,EAAAY,EAAAC,EACA,GAAAb,EAAA,CACA,GAAAvjE,EAAA,EACA,OAAAmkE,EACA,GAAAnkE,GAAAqkE,EACA,OAAAC,MACK,CACL,GAAAtkE,IAAAukE,EACA,OAAAC,EACA,GAAAxkE,EAAA,GAAAukE,EACA,OAAAlrC,EAEA,OAAAr5B,EAAA,EACAikE,GAAAjkE,EAAAujE,GAAAkB,MACAT,EAAAhkE,EAAA0kE,EAAA,EAAA1kE,EAAA0kE,EAAA,EAAAnB,GAmBA,SAAAS,EAAAW,EAAAC,EAAArB,GACA,WAAAN,EAAA0B,EAAAC,EAAArB,GA5CAN,EAAAY,UAkCAZ,EAAAgB,aAsBAhB,EAAAe,WASA,IAAAa,EAAAC,KAAAC,IASA,SAAAC,EAAA5nC,EAAAmmC,EAAA0B,GACA,OAAA7nC,EAAAx5B,OACA,MAAA2G,MAAA,gBACA,WAAA6yB,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAgnC,EASA,GARA,iBAAAb,GAEA0B,EAAA1B,EACAA,GAAA,GAEAA,OAEA0B,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SAEA,IAAA3kE,EACA,IAAAA,EAAA68B,EAAA60B,QAAA,QACA,MAAA1nD,MAAA,mBACA,OAAAhK,EACA,OAAAykE,EAAA5nC,EAAAluB,UAAA,GAAAq0D,EAAA0B,GAAAR,MAQA,IAHA,IAAAU,EAAAlB,EAAAY,EAAAI,EAAA,IAEAl4C,EAAAq3C,EACAplE,EAAA,EAAmBA,EAAAo+B,EAAAx5B,OAAgB5E,GAAA,GACnC,IAAA+3C,EAAA+tB,KAAAM,IAAA,EAAAhoC,EAAAx5B,OAAA5E,GACAgB,EAAAqlE,SAAAjoC,EAAAluB,UAAAlQ,IAAA+3C,GAAAkuB,GACA,GAAAluB,EAAA,GACA,IAAAuuB,EAAArB,EAAAY,EAAAI,EAAAluB,IACAhqB,IAAAw4C,IAAAD,GAAA12D,IAAAq1D,EAAAjkE,SAGA+sB,GADAA,IAAAw4C,IAAAJ,IACAv2D,IAAAq1D,EAAAjkE,IAIA,OADA+sB,EAAAw2C,WACAx2C,EAoBA,SAAAy4C,EAAAroC,EAAAomC,GACA,uBAAApmC,EACA8mC,EAAA9mC,EAAAomC,GACA,iBAAApmC,EACA6nC,EAAA7nC,EAAAomC,GAEAS,EAAA7mC,EAAAkmC,IAAAlmC,EAAAmmC,KAAA,kBAAAC,IAAApmC,EAAAomC,UAfAN,EAAA+B,aAyBA/B,EAAAuC,YAUA,IAcAd,EAAAe,WAOApB,EAAAK,IAOAH,EAAAF,EAAA,EAOAqB,EAAA7B,EA5BA,OAkCAO,EAAAP,EAAA,GAMAZ,EAAAmB,OAMA,IAAAD,EAAAN,EAAA,MAMAZ,EAAAkB,QAMA,IAAAwB,EAAA9B,EAAA,GAMAZ,EAAA0C,MAMA,IAAAC,EAAA/B,EAAA,MAMAZ,EAAA2C,OAMA,IAAAC,EAAAhC,GAAA,GAMAZ,EAAA4C,UAMA,IAAAxsC,EAAA2qC,GAAA,iBAMAf,EAAA5pC,YAMA,IAAAirC,EAAAN,GAAA,SAMAf,EAAAqB,qBAMA,IAAAE,EAAAR,EAAA,kBAMAf,EAAAuB,YAMA,IAAAsB,EAAA7C,EAAA5iE,UAMAylE,EAAAC,MAAA,WACA,OAAApnE,KAAA4kE,SAAA5kE,KAAA0kE,MAAA,EAAA1kE,KAAA0kE,KAOAyC,EAAAE,SAAA,WACA,OAAArnE,KAAA4kE,UACA5kE,KAAA2kE,OAAA,GAAAoB,GAAA/lE,KAAA0kE,MAAA,GACA1kE,KAAA2kE,KAAAoB,GAAA/lE,KAAA0kE,MAAA,IAUAyC,EAAA74D,SAAA,SAAAg4D,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SACA,GAAAvmE,KAAAsnE,SACA,UACA,GAAAtnE,KAAAunE,aAAA,CACA,GAAAvnE,KAAAwnE,GAAA3B,GAAA,CAGA,IAAA4B,EAAAnC,EAAAgB,GACAoB,EAAA1nE,KAAA0nE,IAAAD,GACAE,EAAAD,EAAAd,IAAAa,GAAAG,IAAA5nE,MACA,OAAA0nE,EAAAp5D,SAAAg4D,GAAAqB,EAAAP,QAAA94D,SAAAg4D,GAEA,UAAAtmE,KAAA8lE,MAAAx3D,SAAAg4D,GAQA,IAHA,IAAAE,EAAAlB,EAAAY,EAAAI,EAAA,GAAAtmE,KAAA4kE,UACAiD,EAAA7nE,KACAouB,EAAA,KACA,CACA,IAAA05C,EAAAD,EAAAH,IAAAlB,GAEAuB,GADAF,EAAAD,IAAAE,EAAAlB,IAAAJ,IAAAY,UAAA,GACA94D,SAAAg4D,GAEA,IADAuB,EAAAC,GACAR,SACA,OAAAS,EAAA35C,EAEA,KAAA25C,EAAA9iE,OAAA,GACA8iE,EAAA,IAAAA,EACA35C,EAAA,GAAA25C,EAAA35C,IASA+4C,EAAAa,YAAA,WACA,OAAAhoE,KAAA2kE,MAOAwC,EAAAc,oBAAA,WACA,OAAAjoE,KAAA2kE,OAAA,GAOAwC,EAAAe,WAAA,WACA,OAAAloE,KAAA0kE,KAOAyC,EAAAgB,mBAAA,WACA,OAAAnoE,KAAA0kE,MAAA,GAOAyC,EAAAiB,cAAA,WACA,GAAApoE,KAAAunE,aACA,OAAAvnE,KAAAwnE,GAAA3B,GAAA,GAAA7lE,KAAA8lE,MAAAsC,gBAEA,IADA,IAAA5pC,EAAA,GAAAx+B,KAAA2kE,KAAA3kE,KAAA2kE,KAAA3kE,KAAA0kE,IACA2D,EAAA,GAAsBA,EAAA,GACtB,IAAA7pC,EAAA,GAAA6pC,GAD+BA,KAG/B,UAAAroE,KAAA2kE,KAAA0D,EAAA,GAAAA,EAAA,GAOAlB,EAAAG,OAAA,WACA,WAAAtnE,KAAA2kE,MAAA,IAAA3kE,KAAA0kE,KAOAyC,EAAAmB,IAAAnB,EAAAG,OAMAH,EAAAI,WAAA,WACA,OAAAvnE,KAAA4kE,UAAA5kE,KAAA2kE,KAAA,GAOAwC,EAAAoB,WAAA,WACA,OAAAvoE,KAAA4kE,UAAA5kE,KAAA2kE,MAAA,GAOAwC,EAAAqB,MAAA,WACA,aAAAxoE,KAAA0kE,MAOAyC,EAAAsB,OAAA,WACA,aAAAzoE,KAAA0kE,MAQAyC,EAAAuB,OAAA,SAAAC,GAGA,OAFA9D,EAAA8D,KACAA,EAAA9B,EAAA8B,KACA3oE,KAAA4kE,WAAA+D,EAAA/D,UAAA5kE,KAAA2kE,OAAA,OAAAgE,EAAAhE,OAAA,SAEA3kE,KAAA2kE,OAAAgE,EAAAhE,MAAA3kE,KAAA0kE,MAAAiE,EAAAjE,MASAyC,EAAAK,GAAAL,EAAAuB,OAOAvB,EAAAyB,UAAA,SAAAD,GACA,OAAA3oE,KAAAwnE,GAAAmB,IASAxB,EAAA0B,IAAA1B,EAAAyB,UAQAzB,EAAA2B,GAAA3B,EAAAyB,UAOAzB,EAAA4B,SAAA,SAAAJ,GACA,OAAA3oE,KAAAgpE,KAAAL,GAAA,GASAxB,EAAA8B,GAAA9B,EAAA4B,SAOA5B,EAAA+B,gBAAA,SAAAP,GACA,OAAA3oE,KAAAgpE,KAAAL,IAAA,GASAxB,EAAAgC,IAAAhC,EAAA+B,gBAQA/B,EAAAiC,GAAAjC,EAAA+B,gBAOA/B,EAAAkC,YAAA,SAAAV,GACA,OAAA3oE,KAAAgpE,KAAAL,GAAA,GASAxB,EAAAmC,GAAAnC,EAAAkC,YAOAlC,EAAAoC,mBAAA,SAAAZ,GACA,OAAA3oE,KAAAgpE,KAAAL,IAAA,GASAxB,EAAAqC,IAAArC,EAAAoC,mBAQApC,EAAAsC,GAAAtC,EAAAoC,mBAQApC,EAAAuC,QAAA,SAAAf,GAGA,GAFA9D,EAAA8D,KACAA,EAAA9B,EAAA8B,IACA3oE,KAAAwnE,GAAAmB,GACA,SACA,IAAAgB,EAAA3pE,KAAAunE,aACAqC,EAAAjB,EAAApB,aACA,OAAAoC,IAAAC,GACA,GACAD,GAAAC,EACA,EAEA5pE,KAAA4kE,SAGA+D,EAAAhE,OAAA,EAAA3kE,KAAA2kE,OAAA,GAAAgE,EAAAhE,OAAA3kE,KAAA2kE,MAAAgE,EAAAjE,MAAA,EAAA1kE,KAAA0kE,MAAA,OAFA1kE,KAAA4nE,IAAAe,GAAApB,cAAA,KAYAJ,EAAA6B,KAAA7B,EAAAuC,QAMAvC,EAAA0C,OAAA,WACA,OAAA7pE,KAAA4kE,UAAA5kE,KAAAwnE,GAAA3B,GACAA,EACA7lE,KAAA8pE,MAAA75D,IAAA+2D,IAQAG,EAAArB,IAAAqB,EAAA0C,OAOA1C,EAAAl3D,IAAA,SAAA85D,GACAlF,EAAAkF,KACAA,EAAAlD,EAAAkD,IAIA,IAAAC,EAAAhqE,KAAA2kE,OAAA,GACAsF,EAAA,MAAAjqE,KAAA2kE,KACAuF,EAAAlqE,KAAA0kE,MAAA,GACAyF,EAAA,MAAAnqE,KAAA0kE,IAEA0F,EAAAL,EAAApF,OAAA,GACA0F,EAAA,MAAAN,EAAApF,KACA2F,EAAAP,EAAArF,MAAA,GAGA6F,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAArF,QAIA,GAGA8F,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA/E,GANAoF,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGAxqE,KAAA4kE,WAQAuC,EAAAwD,SAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,EAAA/D,EAAA+D,IACA5qE,KAAAiQ,IAAA26D,EAAA9E,QASAqB,EAAAS,IAAAT,EAAAwD,SAOAxD,EAAA0D,SAAA,SAAAC,GACA,GAAA9qE,KAAAsnE,SACA,OAAA7B,EAKA,GAJAZ,EAAAiG,KACAA,EAAAjE,EAAAiE,IAGAvG,EAKA,OAAAc,EAJAd,EAAAqC,IAAA5mE,KAAA0kE,IACA1kE,KAAA2kE,KACAmG,EAAApG,IACAoG,EAAAnG,MACAJ,EAAAwG,WAAA/qE,KAAA4kE,UAGA,GAAAkG,EAAAxD,SACA,OAAA7B,EACA,GAAAzlE,KAAAwnE,GAAA3B,GACA,OAAAiF,EAAAtC,QAAA3C,EAAAJ,EACA,GAAAqF,EAAAtD,GAAA3B,GACA,OAAA7lE,KAAAwoE,QAAA3C,EAAAJ,EAEA,GAAAzlE,KAAAunE,aACA,OAAAuD,EAAAvD,aACAvnE,KAAA8lE,MAAAc,IAAAkE,EAAAhF,OAEA9lE,KAAA8lE,MAAAc,IAAAkE,GAAAhF,MACK,GAAAgF,EAAAvD,aACL,OAAAvnE,KAAA4mE,IAAAkE,EAAAhF,aAGA,GAAA9lE,KAAAipE,GAAAlC,IAAA+D,EAAA7B,GAAAlC,GACA,OAAAzB,EAAAtlE,KAAAqnE,WAAAyD,EAAAzD,WAAArnE,KAAA4kE,UAKA,IAAAoF,EAAAhqE,KAAA2kE,OAAA,GACAsF,EAAA,MAAAjqE,KAAA2kE,KACAuF,EAAAlqE,KAAA0kE,MAAA,GACAyF,EAAA,MAAAnqE,KAAA0kE,IAEA0F,EAAAU,EAAAnG,OAAA,GACA0F,EAAA,MAAAS,EAAAnG,KACA2F,EAAAQ,EAAApG,MAAA,GACAsG,EAAA,MAAAF,EAAApG,IAEA6F,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA/E,GAZAoF,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGAxqE,KAAA4kE,WASAuC,EAAAP,IAAAO,EAAA0D,SAQA1D,EAAA8D,OAAA,SAAAC,GAGA,GAFArG,EAAAqG,KACAA,EAAArE,EAAAqE,IACAA,EAAA5D,SACA,MAAA17D,MAAA,oBAaA,IAWAu/D,EAAAtD,EAAAuD,EArBA,GAAA7G,EAIA,OAAAvkE,KAAA4kE,WACA,aAAA5kE,KAAA2kE,OACA,IAAAuG,EAAAxG,MAAA,IAAAwG,EAAAvG,KAUAU,GANArlE,KAAA4kE,SAAAL,EAAA8G,MAAA9G,EAAA+G,OACAtrE,KAAA0kE,IACA1kE,KAAA2kE,KACAuG,EAAAxG,IACAwG,EAAAvG,MAEAJ,EAAAwG,WAAA/qE,KAAA4kE,UARA5kE,KAWA,GAAAA,KAAAsnE,SACA,OAAAtnE,KAAA4kE,SAAAY,EAAAC,EAEA,GAAAzlE,KAAA4kE,SA6BK,CAKL,GAFAsG,EAAAtG,WACAsG,IAAAK,cACAL,EAAA5B,GAAAtpE,MACA,OAAAwlE,EACA,GAAA0F,EAAA5B,GAAAtpE,KAAAwrE,KAAA,IACA,OAAAvE,EACAmE,EAAA5F,MAtCA,CAGA,GAAAxlE,KAAAwnE,GAAA3B,GACA,OAAAqF,EAAA1D,GAAAR,IAAAkE,EAAA1D,GAAAN,GACArB,EACAqF,EAAA1D,GAAA3B,GACAmB,GAIAmE,EADAnrE,KAAAyrE,IAAA,GACA/D,IAAAwD,GAAAQ,IAAA,IACAlE,GAAA/B,GACAyF,EAAA3D,aAAAP,EAAAE,GAEAW,EAAA7nE,KAAA4nE,IAAAsD,EAAAtE,IAAAuE,IACAC,EAAAD,EAAAl7D,IAAA43D,EAAAH,IAAAwD,UAIS,GAAAA,EAAA1D,GAAA3B,GACT,OAAA7lE,KAAA4kE,SAAAY,EAAAC,EACA,GAAAzlE,KAAAunE,aACA,OAAA2D,EAAA3D,aACAvnE,KAAA8lE,MAAA4B,IAAAwD,EAAApF,OACA9lE,KAAA8lE,MAAA4B,IAAAwD,GAAApF,MACS,GAAAoF,EAAA3D,aACT,OAAAvnE,KAAA0nE,IAAAwD,EAAApF,aACAsF,EAAA3F,EAmBA,IADAoC,EAAA7nE,KACA6nE,EAAA2B,IAAA0B,IAAA,CAGAC,EAAAhF,KAAAxqB,IAAA,EAAAwqB,KAAAwF,MAAA9D,EAAAR,WAAA6D,EAAA7D,aAWA,IAPA,IAAAuE,EAAAzF,KAAA7tB,KAAA6tB,KAAA0F,IAAAV,GAAAhF,KAAA2F,KACAC,EAAAH,GAAA,KAAA1F,EAAA,EAAA0F,EAAA,IAIAI,EAAA1G,EAAA6F,GACAc,EAAAD,EAAApF,IAAAsE,GACAe,EAAA1E,cAAA0E,EAAA3C,GAAAzB,IAGAoE,GADAD,EAAA1G,EADA6F,GAAAY,EACA/rE,KAAA4kE,WACAgC,IAAAsE,GAKAc,EAAA1E,WACA0E,EAAAhF,GAEAoE,IAAAn7D,IAAA+7D,GACAnE,IAAAD,IAAAqE,GAEA,OAAAb,GASAjE,EAAAO,IAAAP,EAAA8D,OAOA9D,EAAA+E,OAAA,SAAAhB,GAKA,OAJArG,EAAAqG,KACAA,EAAArE,EAAAqE,IAGA3G,EAOAc,GANArlE,KAAA4kE,SAAAL,EAAA4H,MAAA5H,EAAA6H,OACApsE,KAAA0kE,IACA1kE,KAAA2kE,KACAuG,EAAAxG,IACAwG,EAAAvG,MAEAJ,EAAAwG,WAAA/qE,KAAA4kE,UAGA5kE,KAAA4nE,IAAA5nE,KAAA0nE,IAAAwD,GAAAtE,IAAAsE,KASA/D,EAAAkF,IAAAlF,EAAA+E,OAQA/E,EAAAU,IAAAV,EAAA+E,OAMA/E,EAAA2C,IAAA,WACA,OAAAzE,GAAArlE,KAAA0kE,KAAA1kE,KAAA2kE,KAAA3kE,KAAA4kE,WAQAuC,EAAAmF,IAAA,SAAA3D,GAGA,OAFA9D,EAAA8D,KACAA,EAAA9B,EAAA8B,IACAtD,EAAArlE,KAAA0kE,IAAAiE,EAAAjE,IAAA1kE,KAAA2kE,KAAAgE,EAAAhE,KAAA3kE,KAAA4kE,WAQAuC,EAAAoF,GAAA,SAAA5D,GAGA,OAFA9D,EAAA8D,KACAA,EAAA9B,EAAA8B,IACAtD,EAAArlE,KAAA0kE,IAAAiE,EAAAjE,IAAA1kE,KAAA2kE,KAAAgE,EAAAhE,KAAA3kE,KAAA4kE,WAQAuC,EAAAqF,IAAA,SAAA7D,GAGA,OAFA9D,EAAA8D,KACAA,EAAA9B,EAAA8B,IACAtD,EAAArlE,KAAA0kE,IAAAiE,EAAAjE,IAAA1kE,KAAA2kE,KAAAgE,EAAAhE,KAAA3kE,KAAA4kE,WAQAuC,EAAAsF,UAAA,SAAAC,GAGA,OAFA7H,EAAA6H,KACAA,IAAAtF,SACA,IAAAsF,GAAA,IACA1sE,KACA0sE,EAAA,GACArH,EAAArlE,KAAA0kE,KAAAgI,EAAA1sE,KAAA2kE,MAAA+H,EAAA1sE,KAAA0kE,MAAA,GAAAgI,EAAA1sE,KAAA4kE,UAEAS,EAAA,EAAArlE,KAAA0kE,KAAAgI,EAAA,GAAA1sE,KAAA4kE,WASAuC,EAAAuE,IAAAvE,EAAAsF,UAOAtF,EAAAwF,WAAA,SAAAD,GAGA,OAFA7H,EAAA6H,KACAA,IAAAtF,SACA,IAAAsF,GAAA,IACA1sE,KACA0sE,EAAA,GACArH,EAAArlE,KAAA0kE,MAAAgI,EAAA1sE,KAAA2kE,MAAA,GAAA+H,EAAA1sE,KAAA2kE,MAAA+H,EAAA1sE,KAAA4kE,UAEAS,EAAArlE,KAAA2kE,MAAA+H,EAAA,GAAA1sE,KAAA2kE,MAAA,OAAA3kE,KAAA4kE,WASAuC,EAAAsE,IAAAtE,EAAAwF,WAOAxF,EAAAyF,mBAAA,SAAAF,GAIA,GAHA7H,EAAA6H,KACAA,IAAAtF,SAEA,KADAsF,GAAA,IAEA,OAAA1sE,KAEA,IAAA2kE,EAAA3kE,KAAA2kE,KACA,OAAA+H,EAAA,GAEArH,EADArlE,KAAA0kE,MACAgI,EAAA/H,GAAA,GAAA+H,EAAA/H,IAAA+H,EAAA1sE,KAAA4kE,UAEAS,EADS,KAAAqH,EACT/H,EAEAA,IAAA+H,EAAA,GAFA,EAAA1sE,KAAA4kE,WAYAuC,EAAAqE,KAAArE,EAAAyF,mBAQAzF,EAAA0F,MAAA1F,EAAAyF,mBAMAzF,EAAA2F,SAAA,WACA,OAAA9sE,KAAA4kE,SAEAS,EAAArlE,KAAA0kE,IAAA1kE,KAAA2kE,MAAA,GADA3kE,MAQAmnE,EAAAoE,WAAA,WACA,OAAAvrE,KAAA4kE,SACA5kE,KACAqlE,EAAArlE,KAAA0kE,IAAA1kE,KAAA2kE,MAAA,IAQAwC,EAAA4F,QAAA,SAAA3D,GACA,OAAAA,EAAAppE,KAAAgtE,YAAAhtE,KAAAitE,aAOA9F,EAAA6F,UAAA,WACA,IAAAx1D,EAAAxX,KAAA2kE,KACAptD,EAAAvX,KAAA0kE,IACA,OACA,IAAAntD,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQA2vD,EAAA8F,UAAA,WACA,IAAAz1D,EAAAxX,KAAA2kE,KACAptD,EAAAvX,KAAA0kE,IACA,OACAltD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWA+sD,EAAA4I,UAAA,SAAA18C,EAAAo0C,EAAAwE,GACA,OAAAA,EAAA9E,EAAA6I,YAAA38C,EAAAo0C,GAAAN,EAAA8I,YAAA58C,EAAAo0C,IASAN,EAAA6I,YAAA,SAAA38C,EAAAo0C,GACA,WAAAN,EACA9zC,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAo0C,IAUAN,EAAA8I,YAAA,SAAA58C,EAAAo0C,GACA,WAAAN,EACA9zC,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAo0C,sBCxyCA,SAAAnnB,GAAA,MAAA6mB,EAAA7mB,EAAA6mB,MAAAnkE,EAAA,IAEAs9C,EAAA/lC,QAAA,SAAAH,EAAAC,GACA,OAAA8sD,EAAAe,SAAA9tD,EAAAC,IAGAimC,EAAApmB,QAAA,SAAAh2B,GACA,OAAAA,EAAAqjE,KAGAjnB,EAAAnmB,SAAA,SAAAj2B,GACA,OAAAA,EAAAsjE,MAGAlnB,EAAA3G,QAAA,SAAAnnB,EAAAC,GACA,OAAAD,EAAA1f,IAAA2f,IAGA6tB,EAAAoS,QAAA,SAAAlgC,EAAAC,GACA,OAAAD,EAAAi4C,IAAAh4C,IAGA6tB,EAAA1G,QAAA,SAAApnB,EAAAC,GACA,OAAAD,EAAAi3C,IAAAh3C,IAGA6tB,EAAA4vB,QAAA,SAAA19C,EAAAC,GACA,OAAAD,EAAA+3C,IAAA93C,IAGA6tB,EAAA6vB,UAAA,SAAA39C,EAAAC,GACA,OAAAD,EAAA47C,aAAA7D,IAAA93C,EAAA27C,cAAAuB,YAGArvB,EAAA8vB,QAAA,SAAA59C,EAAAC,GACA,OAAAD,EAAA08C,IAAAz8C,IAGA6tB,EAAA+vB,UAAA,SAAA79C,EAAAC,GACA,OAAAD,EAAA47C,aAAAc,IAAAz8C,EAAA27C,cAAAuB,YAGArvB,EAAAgwB,QAAA,SAAA99C,EAAAC,GACA,OAAAD,EAAA28C,IAAA18C,IAGA6tB,EAAAiwB,OAAA,SAAA/9C,EAAAC,GACA,OAAAD,EAAA48C,GAAA38C,IAGA6tB,EAAAkwB,QAAA,SAAAh+C,EAAAC,GACA,OAAAD,EAAA68C,IAAA58C,IAGA6tB,EAAAmwB,QAAA,SAAAj+C,EAAAC,GACA,OAAAD,EAAA+7C,IAAA97C,IAGA6tB,EAAAowB,QAAA,SAAAl+C,EAAAC,GACA,OAAAD,EAAA87C,IAAA77C,IAGA6tB,EAAAlB,UAAA,SAAA5sB,EAAAC,GACA,OAAAD,EAAA67C,KAAA57C,IAGA6tB,EAAAqwB,QAAA,SAAAzsE,GACA,OAAAA,EAAAyoE,OAGArsB,EAAArB,UAAA,SAAA/6C,EAAA2+C,GACAt3C,OAAAs3C,GAAA,IAAAA,IAAA,IACA,IAAAgE,EAAAsgB,EAAAY,QAAAllB,EAAA,GACA,OAAA3+C,EAAA4O,IAAA+zC,GAAAsoB,IAAAtoB,EAAA8lB,QAGArsB,EAAAqS,UAAA,SAAAzuD,GACA,WAAAA,EAAAsjE,MAAAtjE,EAAAqjE,KAAA,GAAArjE,EAAAqjE,KAAA5gE,GAAA42B,YACA,IAAAr5B,EAAAsjE,MAAAtjE,EAAAqjE,KAAA5gE,GAAA+hE,WAAAxkE,EAAAqjE,IAAA,GAGAjnB,EAAAuS,WAAA,SAAA3uD,GACA,WAAAA,EAAAsjE,MAAAtjE,EAAAqjE,KAAA,GAAArjE,EAAAqjE,KAAA3gE,IAAA22B,YACA,IAAAr5B,EAAAsjE,MAAAtjE,EAAAqjE,KAAA3gE,IAAA8hE,WAAAxkE,EAAAqjE,IAAA,GAGAjnB,EAAAyS,WAAA,SAAA7uD,GACA,WAAAA,EAAAsjE,MAAAtjE,EAAAqjE,KAAA,IACA,IAAArjE,EAAAsjE,MAAAtjE,EAAAqjE,IAAA,GAGAjnB,EAAAsS,UAAA,SAAA1uD,GACA,WAAAA,EAAAsjE,MAAAtjE,EAAAqjE,KAAA,GAAArjE,EAAAqjE,KAAAvgE,GAAAu2B,WAGA+iB,EAAAwS,WAAA,SAAA5uD,GACA,WAAAA,EAAAsjE,MAAAtjE,EAAAqjE,KAAA,GAAArjE,EAAAqjE,KAAAtgE,IAAAs2B,WAGA+iB,EAAA0S,WAAA,SAAA9uD,GACA,WAAAA,EAAAsjE,MAGAlnB,EAAA2S,YAAA,SAAA/uD,GACA,WAAAA,EAAAsjE,OAAA,IAAAtjE,EAAAqjE,KAAA,IAAArjE,EAAAqjE,MAGA,MAAAqJ,EAAAzJ,EAAAgB,WAAA7gE,IAAAupE,kBACAC,EAAA3J,EAAAgB,WAAA7gE,IAAAypE,kBAEAzwB,EAAA4S,WAAA,SAAAhvD,GACA,OAAAA,EAAAmoE,IAAAuE,IAAA1sE,EAAA8nE,IAAA8E,IAGA,MAAAE,EAAA7J,EAAAgB,WAAA5gE,IAAAspE,kBACAI,EAAA9J,EAAAgB,WAAA5gE,IAAAwpE,kBAEAzwB,EAAA8S,WAAA,SAAAlvD,GACA,OAAAA,EAAAmoE,IAAA2E,IAAA9sE,EAAA8nE,IAAAiF,IAGA3wB,EAAA6S,WAAA,SAAAjvD,GACA,OAAAo8C,EAAA0oB,KAAAkI,OAAAhtE,EAAAgmE,aAGA5pB,EAAA+S,WAAA,SAAAnvD,GACA,OAAAA,EAAAgmE,YAGA5pB,EAAA6e,cAAA,SAAAj7D,EAAAujE,GACA,OAAAA,EAAAvjE,EAAAkqE,aAAAlqE,GAAAiN,SAAA,qDChIA,SAAAqjD,EAAyBtwD,EAAYisB,EAAoBC,GACvDD,EAAOC,GAAclsB,EACrBisB,EAAOC,EAAS,GAAKlsB,IAAU,EAC/BisB,EAAOC,EAAS,GAAKlsB,IAAU,GAC/BisB,EAAOC,EAAS,GAAKlsB,IAAU,oDAJjC3B,EAAAiyD,WAOAjyD,EAAAgyD,SAAA,SAAyBrwD,EAAYisB,EAAoBC,GACvDokC,EAASt6B,QAAQh2B,GAAQisB,EAAQC,GACjCokC,EAASr6B,SAASj2B,GAAQisB,EAAQC,EAAS,IAG7C7tB,EAAAkyD,SAAA,SAAyBvwD,EAAYisB,EAAoBC,GACvDokC,EAASuS,WAAW7iE,GAAQisB,EAAQC,IAGtC7tB,EAAAmyD,SAAA,SAAyBxwD,EAAYisB,EAAoBC,GACvD,IAAI+gD,EAAWlK,WAAW/iE,GAC1BswD,EAASt6B,QAAQi3C,GAAWhhD,EAAQC,GACpCokC,EAASr6B,SAASg3C,GAAWhhD,EAAQC,EAAS,mFCnBhD,IAAMghD,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB/uE,EAAA08D,OAAA,SAAuBn6C,EAAciW,GACnC,KAAOA,GAAS,GACdjW,EAAGpX,KAAK4jE,GACRv2C,GAAS,EAEPA,GAAS,IACXjW,EAAGpX,KAAK2jE,GACRt2C,GAAS,GAEPA,GACFjW,EAAGpX,KAAK0jE,mFCXZ,IAAMG,EAAS,GAMf,SAAA1oC,EAA8Bz+B,GAK5B,IAJA,IAiBIkM,EAjBA4+B,EAAM,EACNzwB,EAAMra,EAAKtC,OAGRotC,EAAM,EAAIzwB,GACK,IAApBra,EAAKya,WAAWqwB,IAChB9qC,EAAKya,WAAWqwB,EAAM,IAAMq8B,GAE5Br8B,GAAO,EAUT,KAPIA,EAAM,GAAKzwB,EAAMra,EAAKtC,UACxBsC,EAAOA,EAAKgJ,UAAU8hC,EAAKzwB,GAC3BA,GAAOywB,EACPA,EAAM,GAIDA,EAAM,EAAIzwB,GAAK,CAIpB,GAHAnO,GAAQ,EAINlM,EAAKya,WAAWqwB,IAAQq8B,GACA,IAAxBnnE,EAAKya,WAAWqwB,EAAM,GACtB,CAGA,IADA5+B,EAAQ4+B,EAAM,GAAKzwB,IAEjBywB,EAAM,EAAIzwB,GACVra,EAAKya,WAAWqwB,EAAM,IAAMq8B,EAC5B,CACAnnE,EAAOkM,EACHlM,EAAKgJ,UAAU,EAAG8hC,GAClB9qC,EAAKgJ,UAAU,EAAG8hC,GAAO9qC,EAAKgJ,UAAU8hC,EAAM,GAClDzwB,GAAO,EACP,SAKF,IADAnO,EAAQ4+B,EAAM,GAAKzwB,IACkB,IAAxBra,EAAKya,WAAWqwB,EAAM,IACjCA,EAAM,EAAIzwB,GACc,IAAxBra,EAAKya,WAAWqwB,EAAM,IACtB9qC,EAAKya,WAAWqwB,EAAM,IAAMq8B,EAC5B,CAGA,IADA,IAAIC,EAAOt8B,IACFs8B,GAAQ,GACf,GAAIpnE,EAAKya,WAAW2sD,IAASD,EAAW,CAClCr8B,EAAMs8B,GAAQ,GACS,IAAzBpnE,EAAKya,WAAW2sD,EAAO,IACE,IAAzBpnE,EAAKya,WAAW2sD,EAAO,KAEvBpnE,EAAOkM,EACHlM,EAAKgJ,UAAU,EAAGo+D,GAClBpnE,EAAKgJ,UAAU,EAAGo+D,GAAQpnE,EAAKgJ,UAAU8hC,EAAM,GACnDzwB,GAAOywB,EAAM,EAAIs8B,EACjBt8B,EAAMs8B,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKt8B,EAAM,IACT,GAAPA,GACgB,IAAlB9qC,EAAKya,WAAW,IACE,IAAlBza,EAAKya,WAAW,IAChB,CAEAJ,GADAra,EAAOA,EAAKgJ,UAAU8hC,EAAM,IACjBptC,OACX,WAKRotC,IAEF,OAAOzwB,EAAM,EAAIra,EAAO,IAc1B,SAAAqnE,EAAwBntD,GAEtB,IADA,IAAI4wB,EAAM5wB,EAAexc,SAChBotC,EAAM,GACb,GAAI5wB,EAAeO,WAAWqwB,IAAQq8B,EACpC,OAAOjtD,EAAelR,UAAU,EAAG8hC,GAGvC,MAAO,IArGT3yC,EAAAsmC,gBAoFAtmC,EAAAwmC,YAAA,SAA4BzkB,EAAwBotD,GAClD,OAAIptD,EAAewkB,WAAW,QACrBxkB,EAEFukB,EACL4oC,EAAQC,GAAU3vC,OAAO8W,aAAa04B,GAAajtD,IAKvD/hB,EAAAkvE,yFCvGA,SAAkBE,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkBpvE,EAAAovE,WAAApvE,EAAAovE,cAuIlBpvE,EAAAqiB,YAAA,SAA4BrhB,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAAg1C,aAAA,SAA6Bh0C,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAwzC,eAAA,SAA+BxyC,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAg3C,aAAA,SAA6Bh2C,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA20C,kBAAA,SAAkC3zC,GAChC,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACnB,IAADA,GACC,IAADA,GACAA,EAAI,QAiLqBqgB,EAjLYrgB,GAkL9B,GAAKqgB,EAAO,QACnBguD,EAAmBhuD,EAAaiuD,GAFzC,IAAkCjuD,GA7KlCrhB,EAAA40C,mBAAA,SAAmC5zC,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAA80C,iBAAA,SAAiC9zC,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,QAuKoBqgB,EAvKYrgB,GAwK7B,GAAKqgB,EAAO,QACnBguD,EAAmBhuD,EAAakuD,GAFzC,IAAiCluD,GAnKjC,IAAMiuD,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  // ParameterNode,\r\n  // ParameterKind,\r\n  // SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ParameterKind,\r\n  SignatureNode\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"(lib)\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedDerivedClasses = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let resolved = this.resolveIdentifier(derivedType.name, null);\r\n      if (resolved) {\r\n        if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n          this.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            derivedType.range\r\n          );\r\n          continue;\r\n        }\r\n        queuedDerivedClasses[i].basePrototype = (\r\n          <ClassPrototype>resolved.element\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\r\n        if (element) this.elementsLookup.set(alias, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      element.is(CommonFlags.GLOBAL) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        element.set(CommonFlags.GLOBAL);\r\n        this.elementsLookup.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedDerivedClasses: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    var numImplementsTypes = implementsTypes.length;\r\n    if (prototype.is(CommonFlags.UNMANAGED)) {\r\n      if (implementsTypes && numImplementsTypes) {\r\n        this.error(\r\n          DiagnosticCode.Structs_cannot_implement_interfaces,\r\n          Range.join(\r\n            declaration.name.range,\r\n            implementsTypes[numImplementsTypes - 1].range\r\n          )\r\n        );\r\n      }\r\n    } else if (numImplementsTypes) {\r\n      for (let i = 0; i < numImplementsTypes; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          implementsTypes[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) {\r\n      queuedDerivedClasses.push(prototype);\r\n    }\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        if (prototype.is(CommonFlags.EXPORT)) {\r\n          prototype.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n\r\n    // check and possibly register string type\r\n    if (\r\n      prototype.is(CommonFlags.GLOBAL) &&\r\n      declaration.name.text == \"String\"\r\n    ) {\r\n      if (!this.typesLookup.has(\"string\")) {\r\n        let instance = prototype.resolve(null);\r\n        if (instance) this.typesLookup.set(\"string\", instance.type);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, declaration.programLevelInternalName\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        declaration,\r\n        Type.void\r\n      );\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperators(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          if (!prototype) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              decorator.range\r\n            );\r\n            continue;\r\n          }\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              switch ((<StringLiteralExpression>firstArg).value) {\r\n                case \"[]\": {\r\n                  classPrototype.fnIndexedGet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"[]=\": {\r\n                  classPrototype.fnIndexedSet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"+\": {\r\n                  classPrototype.fnConcat = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"-\": {\r\n                  classPrototype.fnSubtract = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"*\": {\r\n                  classPrototype.fnMultiply = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"/\": {\r\n                  classPrototype.fnDivide = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"%\": {\r\n                  classPrototype.fnFractional = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"&\": {\r\n                  classPrototype.fnBitwiseAnd = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"|\": {\r\n                  classPrototype.fnBitwiseOr = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"^\": {\r\n                  classPrototype.fnBitwiseXor = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"==\": {\r\n                  classPrototype.fnEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                default: {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\r\n          // methods support built-in @operator only\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            decorator.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.namespace = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (isModuleExport) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtendingClasses: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.namespace = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        Type.void // resolved later on\r\n      );\r\n      global.namespace = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): ResolvedElement | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.namespace) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(element);\r\n          }\r\n        } while (namespace = namespace.namespace);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    resolvedElement = this.resolveExpression( // reports\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n    var targetType: Type;\r\n    var member: Element | null;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        if (!(targetType = (<VariableLikeElement>target).type).classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        if (!(targetType = getter.signature.returnType).classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classReference;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          if (target.members && (member = target.members.get(propertyName))) {\r\n            return resolvedElement.set(member).withTarget(target, targetExpression);\r\n          }\r\n          // check inherited static members on the base prototype while target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // or inherited instance members on the base class while target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        if (target.members && (member = target.members.get(propertyName))) {\r\n          return resolvedElement.set(member).withTarget(target, targetExpression);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = elementAccess.expression;\r\n    resolvedElement = this.resolveExpression(\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (type.classReference) {\r\n          let indexedGetName = (target = type.classReference).prototype.fnIndexedGet;\r\n          let indexedGet: Element | null;\r\n          if (\r\n            indexedGetName != null &&\r\n            target.members &&\r\n            (indexedGet = target.members.get(indexedGetName)) &&\r\n            indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            return resolvedElement.set(indexedGet).withTarget(type.classReference, targetExpression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n      targetExpression.range, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(classType);\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(parent);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(parent);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let resolved = this.resolveExpression(\r\n          (<CallExpression>expression).expression,\r\n          contextualFunction\r\n        );\r\n        if (resolved) {\r\n          let element = resolved.element;\r\n          if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n            let instance = (<FunctionPrototype>element).resolveUsingTypeArguments(\r\n              (<CallExpression>expression).typeArguments,\r\n              contextualFunction.contextualTypeArguments,\r\n              expression\r\n            );\r\n            if (instance) {\r\n              let returnType = instance.signature.returnType;\r\n              let classType = returnType.classReference;\r\n              if (classType) {\r\n                if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                return resolvedElement.set(classType);\r\n              } else {\r\n                let signature = returnType.signatureReference;\r\n                if (signature) {\r\n                  let functionTarget = signature.cachedFunctionTarget;\r\n                  if (!functionTarget) {\r\n                    functionTarget = new FunctionTarget(this, signature);\r\n                    signature.cachedFunctionTarget = functionTarget;\r\n                  }\r\n                  if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                  return resolvedElement.set(functionTarget);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\r\nexport class ResolvedElement {\r\n\r\n  /** The target element, if a property or element access */\r\n  target: Element | null;\r\n  /** The target element's expression, if a property or element access. */\r\n  targetExpression: Expression | null;\r\n  /** The element being accessed. */\r\n  element: Element;\r\n\r\n  /** Clears the target and sets the resolved element. */\r\n  set(element: Element): this {\r\n    this.target = null;\r\n    this.targetExpression = null;\r\n    this.element = element;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the resolved target in addition to the previously set element. */\r\n  withTarget(target: Element, targetExpression: Expression): this {\r\n    this.target = target;\r\n    this.targetExpression = targetExpression;\r\n    return this;\r\n  }\r\n\r\n  /** Tests if the target is a valid instance target. */\r\n  get isInstanceTarget(): bool {\r\n    return (\r\n      this.target != null &&\r\n      this.target.kind == ElementKind.CLASS &&\r\n      this.targetExpression != null\r\n    );\r\n  }\r\n}\r\n\r\n// Cached result structure instance\r\nvar resolvedElement: ResolvedElement | null;\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Internal decorators\r\n\r\n  /** Is global. */\r\n  GLOBAL = 1 << 13,\r\n  /** Is built-in. */\r\n  BUILTIN = 1 << 14,\r\n  /** Is unmanaged. */\r\n  UNMANAGED = 1 << 15,\r\n  /** Is sealed. */\r\n  SEALED = 1 << 16,\r\n\r\n  // Extended modifiers usually derived from basic modifiers or internal decorators\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 17,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 18,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 19,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 20,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 21,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 22,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 23,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 24,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 25,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 26,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 27,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 28\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent namespace, if applicable. */\r\n  namespace: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Parent enum. */\r\n  enum: Enum;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.enum = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: VariableLikeDeclarationStatement,\r\n    type: Type\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n\r\n  constructor(program: Program, simpleName: string, index: i32, type: Type) {\r\n    super(program, simpleName, simpleName);\r\n    this.index = index;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(this, internalName, signature, classInstance ? classInstance : classPrototype);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(this.classPrototype);\r\n    if (classTypeArguments && classTypeArguments.length) {\r\n      let partialPrototype = new FunctionPrototype(\r\n        this.program,\r\n        this.simpleName,\r\n        this.internalName,\r\n        this.declaration,\r\n        this.classPrototype\r\n      );\r\n      partialPrototype.flags = this.flags;\r\n      partialPrototype.classTypeArguments = classTypeArguments;\r\n      return partialPrototype;\r\n    }\r\n    return this; // no need to clone\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** If a member of another namespace-like element, the concrete element it is a member of. */\r\n  memberOf: Element | null;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    memberOf: Element | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.memberOf = memberOf;\r\n    this.flags = prototype.flags;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (memberOf && memberOf.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        let contextualTypeArguments = (<Class>memberOf).contextualTypeArguments;\r\n        if (contextualTypeArguments) {\r\n          if (!this.contextualTypeArguments) {\r\n            this.contextualTypeArguments = new Map();\r\n          }\r\n          for (let [inheritedName, inheritedType] of contextualTypeArguments) {\r\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(prototype: FieldPrototype, internalName: string, type: Type) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Overloaded indexed get method, if any. */\r\n  fnIndexedGet: string | null = null;\r\n  /** Overloaded indexed set method, if any. */\r\n  fnIndexedSet: string | null = null;\r\n  /** Overloaded concatenation method, if any. */\r\n  fnConcat: string | null = null;\r\n  /** Overloaded subtraction method, if any. */\r\n  fnSubtract: string | null = null;\r\n  /** Overloaded multiply method, if any. */\r\n  fnMultiply: string | null = null;\r\n  /** Overloaded divide method, if any. */\r\n  fnDivide: string | null = null;\r\n  /** Overloaded fractional method, if any. */\r\n  fnFractional: string | null = null;\r\n  /** Overloaded bitwise and method, if any. */\r\n  fnBitwiseAnd: string | null = null;\r\n  /** Overloaded bitwise or method, if any. */\r\n  fnBitwiseOr: string | null = null;\r\n  /** Overloaded bitwise xor method, if any. */\r\n  fnBitwiseXor: string | null = null;\r\n  /** Overloaded equality comparison method, if any. */\r\n  fnEquals: string | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.is(CommonFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) {\r\n        instance.constructorInstance = partialConstructor.resolve(); // reports\r\n      }\r\n      // TODO: ^ doesn't know the return type, hence returns null\r\n    }\r\n\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\r\n            if (!instance.members) instance.members = new Map();\r\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (methodPrototype) {\r\n              methodPrototype.internalName = internalName + INSTANCE_DELIMITER + methodPrototype.simpleName;\r\n              instance.members.set(member.simpleName, methodPrototype);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      if (base.contextualTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do {\r\n      if (current == target) {\r\n        return true;\r\n      }\r\n    } while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.prototype.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName, declaration);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.RETURNS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (this.is(FlowFlags.THROWS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (this.is(FlowFlags.ALLOCATES)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, reportNode: Node): void {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else if (this.scopedLocals.has(name)) {\r\n      this.currentFunction.program.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        reportNode.range\r\n      );\r\n      return;\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null, \"must be the topmost parent flow\");\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\r\n    start--;\r\n  }\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\r\n    end++;\r\n  }\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    if (expression.kind == NodeKind.IDENTIFIER) {\r\n      switch ((<IdentifierExpression>expression).text) {\r\n        case \"global\": {\r\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case \"operator\": {\r\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case \"unmanaged\": {\r\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\r\n          break;\r\n        }\r\n        case \"offset\": {\r\n          stmt.decoratorKind = DecoratorKind.OFFSET;\r\n          break;\r\n        }\r\n        default: {\r\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[], // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  OFFSET\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented. */\r\n  implementsTypes: TypeNode[]; // can't be a function\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return decorator;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFomKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFomKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying function reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classReference = this.classReference;       // either a class reference\r\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) {\r\n      return left;\r\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\r\n      return right;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType\r\n          ? \"u32\"\r\n          : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType\r\n          ? \"usize\"\r\n          : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    ret[i] = types[i].toNativeType();\r\n  }\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    sb[i] = types[i].toString();\r\n  }\r\n  return sb.join(\", \");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\r\n        return false;\r\n      }\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) {\r\n      return false; // TODO\r\n    }\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    var sb = [];\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(thisType.toSignatureString());\r\n    }\r\n    var parameterTypes = this.parameterTypes;\r\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n      sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(this.returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) {\r\n          sb.push((<string[]>names)[i]);\r\n        } else {\r\n          sb.push(getGenericParameterName(i));\r\n        }\r\n        if (i >= optionalStart && i != restIndex) {\r\n          sb.push(\"?: \");\r\n        } else {\r\n          sb.push(\": \");\r\n        }\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n  /** Argument count helper global. */\r\n  argumentCountRef: GlobalRef = 0;\r\n  /** Already processed file names. */\r\n  files: Set<string> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) {\r\n        this.compileSource(sources[i]);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\r\n      let funcRef: FunctionRef;\r\n      module.setStart(\r\n        funcRef = module.addFunction(\r\n          startFunctionInstance.internalName,\r\n          typeRef,\r\n          typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n          module.createBlock(null, startFunctionBody)\r\n        )\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested\r\n    if (options.importMemory) {\r\n      module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n    }\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    // import table if requested\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableSize) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var sources = this.program.sources;\r\n\r\n    // try file.ts\r\n    var expected = normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try file/index.ts\r\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try (lib)/file.ts\r\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.File_0_not_found,\r\n      reportNode.range, normalizedPathWithoutExtension\r\n    );\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n    var files = this.files;\r\n    var normalizedPath = source.normalizedPath;\r\n    if (files.has(normalizedPath)) return;\r\n    files.add(normalizedPath);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n\r\n      // resolve now if annotated\r\n      if (declaration.type) {\r\n        let resolvedType = this.program.resolveType(declaration.type); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.type.range\r\n          );\r\n          return false;\r\n        }\r\n        global.type = resolvedType;\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n        initExpr = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.type = this.currentType;\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.namespace\r\n            ? global.namespace.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              global.declaration.range\r\n            );\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(0);\r\n            break;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (declaration.isTopLevel) {    // but keep the element as it might be re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n        if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n          module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, member.internalName);\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!(instance && this.compileFunction(instance))) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    var thisType = signature.thisType;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    for (let i = 0; i < numParameters; ++i, ++index) {\r\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\r\n    }\r\n    var resultType = signature.returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var typeRef = this.ensureFunctionType(instance.signature);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType: Type = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\r\n        flow.set(FlowFlags.RETURNS);\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.memberOf);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let namespace = instance.prototype.namespace;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        namespace\r\n          ? namespace.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n      module.addFunctionExport(instance.internalName, declaration.name.text);\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n    var stmtThrows = flow.is(FlowFlags.THROWS);\r\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\r\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\r\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\r\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint\r\n    if (alwaysReturns || alwaysThrows) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      let ret: ExpressionRef;\r\n      if (_BinaryenConstGetValueI32(condExpr)) {\r\n        ret = this.compileStatement(ifTrue);\r\n      } else if (ifFalse) {\r\n        ret = this.compileStatement(ifFalse);\r\n      } else {\r\n        ret = module.createNop();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\r\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    var ifFalseThrows = false;\r\n    var ifFalseAllocates = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\r\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n\r\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\r\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\r\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        currentFunction.signature.returnType\r\n      );\r\n    }\r\n\r\n    // Remember that this flow returns\r\n    currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return this.module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\r\n        alwaysThrows = false;\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\r\n        alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          currentFunction.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        if (declaration.isAny(CommonFlags.LET | CommonFlags.CONST)) { // here: not top-level\r\n          currentFunction.flow.addScopedLocal(name, type, declaration.name); // reports\r\n        } else {\r\n          currentFunction.addLocal(type, name); // reports\r\n        }\r\n        if (init) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!_BinaryenConstGetValueI32(condExpr)) {\r\n        return module.createNop();\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      case TypeKind.F64: {\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          element.declaration.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL)) {\r\n            expr = makeSmallIntegerWrap(expr, toType, module);\r\n          }\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SMALL) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    switch (expression.operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                assert(this.currentType == Type.bool);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnConcat;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnSubtract;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnMultiply;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnDivide;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnFractional;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let fmodPrototype = this.program.elementsLookup.get(\"fmodf\");\r\n            if (!fmodPrototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"fmod\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(fmodPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            let fmodInstance = (<FunctionPrototype>fmodPrototype).resolve();\r\n            if (!(fmodInstance && this.compileFunction(fmodInstance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(fmodInstance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let fmodPrototype = this.program.elementsLookup.get(\"fmod\");\r\n            if (!fmodPrototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"fmod\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(fmodPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            let fmodInstance = (<FunctionPrototype>fmodPrototype).resolve();\r\n            if (!(fmodInstance && this.compileFunction(fmodInstance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(fmodInstance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseAnd;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseOr;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseXor;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileOperatorOverload(\r\n    classInstance: Class,\r\n    operatorName: string,\r\n    leftExpr: ExpressionRef,\r\n    rightExpr: ExpressionRef\r\n  ): ExpressionRef {\r\n    var classPrototype = classInstance.prototype;\r\n    var operatorPrototype = assert(assert(classPrototype.members).get(operatorName));\r\n    assert(operatorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var operatorInstance = (<FunctionPrototype>operatorPrototype).resolve();\r\n    if (!operatorInstance) return this.module.createUnreachable();\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ]);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression, currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var element = resolved.element;\r\n    var elementType: Type;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>element).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>element).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1);\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>element).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\r\n          if (resolved.target && resolved.target.kind == ElementKind.CLASS) {\r\n            if (element.simpleName == (<Class>resolved.target).prototype.fnIndexedGet) {\r\n              let resolvedIndexedSet = (<FunctionPrototype>element).resolve(null); // reports\r\n              if (resolvedIndexedSet) {\r\n                elementType = resolvedIndexedSet.signature.returnType;\r\n                break;\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>resolved.target).toString()\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>element).type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>element).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>element).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) return module.createUnreachable();\r\n        let type = (<Global>element).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = (<Global>element).internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal((<Global>element).internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        assert(resolved.isInstanceTarget);\r\n        let targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          (<Class>resolved.target).type\r\n        );\r\n        let type = (<Field>element).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              targetExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>element).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            targetExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>element).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              assert(resolved.isInstanceTarget);\r\n              let thisArg = this.compileExpression(\r\n                <Expression>resolved.targetExpression,\r\n                (<Class>resolved.target).type\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisArg, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>element).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            let thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisArg),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>element).internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // @operator(\"[]\") ?\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) {\r\n          assert(resolved.isInstanceTarget);\r\n          let getterInstance = (<FunctionPrototype>element).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          // obtain @operator(\"[]=\")\r\n          let setElementName = (<Class>resolved.target).prototype.fnIndexedSet;\r\n          let setElement: Element | null;\r\n          if (\r\n            setElementName != null &&\r\n            (<Class>resolved.target).members &&\r\n            (setElement = (<Map<string,Element>>(<Class>resolved.target).members).get(setElementName)) &&\r\n            setElement.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            let setterInstance = (<FunctionPrototype>setElement).resolve(); // reports\r\n            if (!setterInstance) return module.createUnreachable();\r\n            let targetType = (<Class>resolved.target).type;\r\n            let targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              targetType\r\n            );\r\n            let elementExpr = this.compileExpression(\r\n              (<ElementAccessExpression>expression).elementExpression,\r\n              Type.i32\r\n            );\r\n            if (tee) {\r\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n              let returnType = getterInstance.signature.returnType;\r\n              this.currentFunction.freeTempLocal(tempLocalTarget);\r\n              return module.createBlock(null, [\r\n                this.makeCallDirect(setterInstance, [\r\n                  module.createTeeLocal(tempLocalTarget.index, targetExpr),\r\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                  valueWithCorrectType\r\n                ]),\r\n                this.makeCallDirect(getterInstance, [\r\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n                ])\r\n              ], returnType.toNativeType());\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [\r\n                targetExpr,\r\n                elementExpr,\r\n                valueWithCorrectType\r\n              ]);\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, (<Class>resolved.target).internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (element.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>element;\r\n\r\n        // builtins are compiled on the fly\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          let expr = compileBuiltinCall( // reports\r\n            this,\r\n            prototype,\r\n            prototype.resolveBuiltinTypeArguments(\r\n              expression.typeArguments,\r\n              currentFunction.contextualTypeArguments\r\n            ),\r\n            expression.arguments,\r\n            contextualType,\r\n            expression\r\n          );\r\n          if (!expr) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          return expr;\r\n\r\n        // otherwise compile to a call\r\n        } else {\r\n          let instance = prototype.resolveUsingTypeArguments( // reports\r\n            expression.typeArguments,\r\n            currentFunction.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return module.createUnreachable();\r\n          let thisArg: ExpressionRef = 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            if (!thisArg) return module.createUnreachable();\r\n          } else {\r\n            assert(!resolved.isInstanceTarget);\r\n          }\r\n          return this.compileCallDirect(instance, expression.arguments, expression, thisArg);\r\n        }\r\n      }\r\n\r\n      // indirect call: index argument with signature\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>element).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>element).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>element).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>element).internalName, (<Global>element).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>element).type;\r\n        if (signature = type.signatureReference) {\r\n          let targetExpr = this.compileExpression(assert(resolved.targetExpression), type);\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            targetExpr,\r\n            NativeType.I32,\r\n            (<Field>element).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>element).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>element).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.memberOf);\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    trampoline.contextualTypeArguments = original.contextualTypeArguments;\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"argumentCount\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"argumentCount\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var typeRef = this.ensureFunctionType(trampolineSignature);\r\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n      if (!isCallImport) { // call the trampoline\r\n        instance = this.ensureTrampoline(instance);\r\n        if (!this.compileFunction(instance)) return module.createUnreachable();\r\n        let nativeReturnType = returnType.toNativeType();\r\n        this.currentType = returnType;\r\n        return module.createBlock(null, [\r\n          this.ensureArgumentCount(numArguments),\r\n          module.createCall(instance.internalName, operands, nativeReturnType)\r\n        ], nativeReturnType);\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return isCallImport\r\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\r\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      this.ensureArgumentCount(numArguments), // might still be calling a trampoline\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType());\r\n  }\r\n\r\n  /** Makes sure that the `argumentCount` helper global is present and returns an expression that sets it. */\r\n  private ensureArgumentCount(argumentCount: i32): ExpressionRef {\r\n    var module = this.module;\r\n    if (!this.argumentCountRef) {\r\n      this.argumentCountRef = module.addGlobal(\r\n        \"argumentCount\",\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return module.createSetGlobal(\"argumentCount\", module.createI32(argumentCount));\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    assert( // should be guaranteed by resolveElementAccess\r\n      resolved.element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n      resolved.target &&\r\n      resolved.target.kind == ElementKind.CLASS\r\n    );\r\n    var target = <Class>resolved.target;\r\n    var instance = (<FunctionPrototype>resolved.element).resolve( // reports\r\n      null,\r\n      target.contextualTypeArguments\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    var thisArg = this.compileExpression(expression.expression, target.type);\r\n    return this.compileCallDirect(instance, [\r\n      expression.elementExpression\r\n    ], expression, thisArg);\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + \"~\" + simpleName,\r\n      declaration\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      currentFunction.contextualTypeArguments,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            let flow = currentFunction.flow;\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                makeConditionalAllocate(this, <Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var resolved = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>element, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>element).type;\r\n        let localIndex = (<Local>element).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, expression);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!element.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>element).resolve(\r\n          null,\r\n          this.currentFunction.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.elementsLookup.get(\"Array\")\r\n        ) {\r\n          return this.compileStaticArray(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.elementsLookup.get(\"Array\"));\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayType) return module.createUnreachable();\r\n\r\n    var elementSize = expressions.length;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    var memorySize: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // precompute value expressions\r\n    var exprs = new Array<ExpressionRef>(elementSize);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < elementSize; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n    var headerSize = usizeTypeSize + 4 + 4; // memory + capacity + length\r\n\r\n    if (isStatic) {\r\n      let buffer = new Uint8Array(headerSize + memorySize);\r\n      let segment = this.addMemorySegment(buffer);\r\n\r\n      // make header\r\n      let offset = 0;\r\n      if (usizeTypeSize == 8) {\r\n        writeI64(i64_add(segment.offset, i64_new(headerSize)), buffer, 0); // memory\r\n      } else {\r\n        assert(i64_high(segment.offset) == 0);\r\n        writeI32(i64_low(segment.offset) + headerSize, buffer, 0); // memory\r\n      }\r\n      offset += usizeTypeSize;\r\n      writeI32(elementSize, buffer, offset); // capacity\r\n      offset += 4;\r\n      writeI32(elementSize, buffer, offset); // length\r\n      offset += 4;\r\n      assert(offset == headerSize);\r\n\r\n      // make memory\r\n      switch (nativeType) {\r\n        case NativeType.I32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI32(changetype<i32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI64(changetype<I64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF32(changetype<f32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF64(changetype<f64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      assert(offset == headerSize + memorySize);\r\n      this.currentType = arrayType.type;\r\n      return usizeTypeSize == 8\r\n        ? module.createI64(\r\n            i64_low(segment.offset),\r\n            i64_high(segment.offset)\r\n          )\r\n        : module.createI32(\r\n            i64_low(segment.offset)\r\n          );\r\n    } else {\r\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\r\n      // on top? any benefits?\r\n      throw new Error(\"not implemented\");\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var resolved = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n    if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>resolved.element;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      null,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = makeAllocate(this, classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var resolved = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var targetExpr: ExpressionRef;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, propertyAccess);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        if (!this.compileEnum((<EnumValue>element).enum)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert(resolved.isInstanceTarget);\r\n        assert((<Field>element).memoryOffset >= 0);\r\n        targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          this.options.usizeType,\r\n          ConversionKind.NONE\r\n        );\r\n        this.currentType = (<Field>element).type;\r\n        return module.createLoad(\r\n          (<Field>element).type.size >> 3,\r\n          (<Field>element).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          targetExpr,\r\n          (<Field>element).type.toNativeType(),\r\n          (<Field>element).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>element).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.memberOf);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>parent).type\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, targetExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>element).simpleName, (<Property>element).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      return _BinaryenConstGetValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var currentFunction = this.currentFunction;\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression(\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n\r\n/** Makes an allocation expression for an instance of the specified class. */\r\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n  var currentFunction = compiler.currentFunction;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n\r\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\r\n\r\n  // allocate the necessary memory\r\n  var initializers = new Array<ExpressionRef>();\r\n  initializers.push(\r\n    module.createSetLocal(tempLocal.index,\r\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n\r\n  // apply field initializers\r\n  if (classInstance.members) {\r\n    for (let member of classInstance.members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        let field = <Field>member;\r\n        let fieldType = field.type;\r\n        let nativeFieldType = fieldType.toNativeType();\r\n        let fieldDeclaration = field.prototype.declaration;\r\n        assert(!field.isAny(CommonFlags.CONST));\r\n        if (fieldDeclaration.initializer) { // use initializer\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        } else { // initialize with zero\r\n          // TODO: might be unnecessary if the ctor initializes the field\r\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter\r\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n              : fieldType.toNativeZero(module),\r\n              nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // return `this`\r\n  initializers.push(\r\n    module.createGetLocal(tempLocal.index, nativeSizeType)\r\n  );\r\n\r\n  currentFunction.freeTempLocal(tempLocal);\r\n  compiler.currentType = classInstance.type;\r\n  return module.createBlock(null, initializers, nativeSizeType);\r\n}\r\n\r\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  // requires that `this` is the first local\r\n  var module = compiler.module;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  compiler.currentType = classInstance.type;\r\n  return module.createIf(\r\n    nativeSizeType == NativeType.I64\r\n      ? module.createBinary(\r\n          BinaryOp.NeI64,\r\n          module.createGetLocal(0, NativeType.I64),\r\n          module.createI64(0)\r\n        )\r\n      : module.createGetLocal(0, NativeType.I32),\r\n    module.createGetLocal(0, nativeSizeType),\r\n    module.createTeeLocal(0,\r\n      makeAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].internalPath == internalPath) return;\r\n    }\r\n    this.seenlog.add(internalPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      let name = decorator.name;\r\n      if (name.kind == NodeKind.IDENTIFIER) {\r\n        let text = (<IdentifierExpression>name).text;\r\n        if (text == \"global\") {\r\n          flags |= CommonFlags.GLOBAL;\r\n          continue;\r\n        }\r\n        if (text == \"unmananged\") {\r\n          flags |= CommonFlags.UNMANAGED;\r\n          continue;\r\n        }\r\n        if (text == \"sealed\") {\r\n          flags |= CommonFlags.SEALED;\r\n          continue;\r\n        }\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS: {\r\n        tn.next();\r\n        statement = this.parseClass(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn, isConstructor);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"public\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"protected\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PROTECTED;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"private\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PRIVATE;\r\n    }\r\n    if (tn.skip(Token.READONLY)) {\r\n      if (!startRange) startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"readonly\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.READONLY;\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClass(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at 'class':\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes = new Array<TypeNode>();\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        implementsTypes.push(<TypeNode>type);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      identifier,\r\n      typeParameters,\r\n      extendsType,\r\n      implementsTypes,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Function,\r\n  Class,\r\n  Namespace,\r\n  FunctionPrototype,\r\n  ClassPrototype,\r\n  ConstantValueKind,\r\n  Interface\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program) {\r\n    this.program = program;\r\n  }\r\n\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) {\r\n      this.visitElement(element);\r\n    }\r\n  }\r\n\r\n  visitElement(element: Element): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitEnum(<Enum>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitFunction(<Function>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitClass(<Class>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\r\n          this.visitNamespace(<Namespace>element);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) {\r\n            sb.push(\"const \");\r\n          } else {\r\n            sb.push(\"readonly \");\r\n          }\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) {\r\n          this.visitElement(member);\r\n        }\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          this.seen.add(member);\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) {\r\n        this.visitNamespace(element);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"function \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    sb.push(\"): \");\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    members = element.members; // instance\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) {\r\n    parser = new Parser();\r\n    isEntry = true;\r\n  }\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  Global,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Field\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(\r\n  compiler: Compiler,\r\n  global: Global,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (global.internalName) {\r\n    case \"NaN\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(NaN);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(NaN);\r\n      }\r\n    }\r\n    case \"Infinity\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(Infinity);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(Infinity);\r\n      }\r\n    }\r\n    case \"HEAP_BASE\": { // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringPrototype = compiler.program.elementsLookup.get(\"String\");\r\n        if (stringPrototype) {\r\n          assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n          let stringInstance = (<ClassPrototype>stringPrototype).resolve(null);\r\n          if (!stringInstance) return module.createUnreachable();\r\n          if (classType.isAssignableTo(stringInstance)) {\r\n            return module.createI32(1);\r\n          }\r\n        }\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      return classType != null && classType.prototype.fnIndexedGet != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createBinary(BinaryOp.NeF32,\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createGetLocal(tempLocal.index, NativeType.F32)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createBinary(BinaryOp.NeF64,\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createGetLocal(tempLocal.index, NativeType.F64)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF32,\r\n              module.createUnary(UnaryOp.AbsF32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              module.createF32(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF32,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32),\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF64,\r\n              module.createUnary(UnaryOp.AbsF64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              module.createF64(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF64,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64),\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      let type: Type;\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type);\r\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0))\r\n      return 0;\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, n) {\r\n    HEAP.copyWithin(dest, src, src + n);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, val, off) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    HEAP[ptr] = val;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    return HEAP[ptr];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}
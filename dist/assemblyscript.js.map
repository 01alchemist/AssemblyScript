{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","sources","__extends","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","k","length","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","resolved","resolveIdentifier","ElementKind","CLASS_PROTOTYPE","A_class_may_only_extend_another_class","basePrototype","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","checkGlobalOptions","parentNode","is","CommonFlags","GLOBAL","source","isLibrary","SOURCE","simpleName","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnSubtract","fnMultiply","fnDivide","fnFractional","fnBitwiseAnd","fnBitwiseOr","fnBitwiseXor","fnEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","resolvedElement","ResolvedElement","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","resolveExpression","targetType","target","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","withTarget","base","resolveElementAccess","elementAccess","indexedGetName","indexedGet","FUNCTION_PROTOTYPE","Index_signature_is_missing_in_type_0","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","memberOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","contextualTypeArguments_1","contextualTypeArguments_1_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","SEALED","Class_0_is_sealed_and_cannot_be_extended","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","partialGetterPrototype","partialSetterPrototype","asClass","_b","baseType","isAssignableTo","current","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","scopedLocal","addScopedLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","normalizedPath","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","g","eval","e","window","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","nullableType","ceil","nonNullableType","computeSmallIntegerShift","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argumentCountRef","files","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","typeRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","entries","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","COMPILED","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","ensureTrampoline","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","operatorName","compileOperatorOverload","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","operatorPrototype","operatorInstance","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","resolvedIndexedSet","valueExpr","valueWithCorrectType","tee","isInstanceTarget","targetExpr","setterInstance","thisArg","getterInstance","nativeReturnType","setElementName","setElement","elementExpr","tempLocalTarget","tempLocalElement","Index_signature_in_type_0_only_permits_reading","indexArg","compileCall","compileCallDirect","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","numArgumentsInclThis","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","numOperands","isCallImport","ensureArgumentCount","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayType","memorySize","elementSize","Int32Array","Float32Array","Float64Array","usizeTypeSize","headerSize","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","makeAllocate","ifThenExpr","ifElseExpr","ifThenAllocates","ifElseAllocates","getValue","Unreachable","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","evaluateConstantOffset","NaN","Infinity","Type_0_is_not_generic","tempLocal0","tempLocal1","alignLog2","fieldName","Type_0_has_no_property_1","abort","compileAbort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","off","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","sqrt","trunc","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray","y"],"mappings":"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,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  // ParameterNode,\r\n  // ParameterKind,\r\n  // SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ParameterKind,\r\n  SignatureNode,\r\n  VariableDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedDerivedClasses = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let resolved = this.resolveIdentifier(derivedType.name, null);\r\n      if (resolved) {\r\n        if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n          this.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            derivedType.range\r\n          );\r\n          continue;\r\n        }\r\n        queuedDerivedClasses[i].basePrototype = (\r\n          <ClassPrototype>resolved.element\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\r\n        if (element) this.elementsLookup.set(alias, element);\r\n      }\r\n    }\r\n\r\n    // register array\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register string\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      element.is(CommonFlags.GLOBAL) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        element.set(CommonFlags.GLOBAL);\r\n        this.elementsLookup.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedDerivedClasses: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.is(CommonFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Structs_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) {\r\n      queuedDerivedClasses.push(prototype);\r\n    }\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        if (prototype.is(CommonFlags.EXPORT)) {\r\n          prototype.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperators(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          if (!prototype) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              decorator.range\r\n            );\r\n            continue;\r\n          }\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              switch ((<StringLiteralExpression>firstArg).value) {\r\n                case \"[]\": {\r\n                  classPrototype.fnIndexedGet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"[]=\": {\r\n                  classPrototype.fnIndexedSet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"+\": {\r\n                  classPrototype.fnConcat = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"-\": {\r\n                  classPrototype.fnSubtract = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"*\": {\r\n                  classPrototype.fnMultiply = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"/\": {\r\n                  classPrototype.fnDivide = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"%\": {\r\n                  classPrototype.fnFractional = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"&\": {\r\n                  classPrototype.fnBitwiseAnd = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"|\": {\r\n                  classPrototype.fnBitwiseOr = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"^\": {\r\n                  classPrototype.fnBitwiseXor = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"==\": {\r\n                  classPrototype.fnEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                default: {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\r\n          // methods support built-in @operator only\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            decorator.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.namespace = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (isModuleExport) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtendingClasses: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.namespace = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      global.namespace = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): ResolvedElement | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.namespace) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(element);\r\n          }\r\n        } while (namespace = namespace.namespace);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    resolvedElement = this.resolveExpression( // reports\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n    var targetType: Type;\r\n    var member: Element | null;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        if (!(targetType = (<VariableLikeElement>target).type).classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        if (!(targetType = getter.signature.returnType).classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classReference;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          if (target.members && (member = target.members.get(propertyName))) {\r\n            return resolvedElement.set(member).withTarget(target, targetExpression);\r\n          }\r\n          // check inherited static members on the base prototype while target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // or inherited instance members on the base class while target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        if (target.members && (member = target.members.get(propertyName))) {\r\n          return resolvedElement.set(member).withTarget(target, targetExpression);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target\r\n    var targetExpression = elementAccess.expression;\r\n    resolvedElement = this.resolveExpression(\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (type.classReference) {\r\n          let indexedGetName = (target = type.classReference).prototype.fnIndexedGet;\r\n          let indexedGet: Element | null;\r\n          if (\r\n            indexedGetName != null &&\r\n            target.members &&\r\n            (indexedGet = target.members.get(indexedGetName)) &&\r\n            indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            return resolvedElement.set(indexedGet).withTarget(type.classReference, targetExpression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      // FIXME: indexed access on indexed access\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n      targetExpression.range, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(classType);\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(parent);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(parent);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let resolved = this.resolveExpression(\r\n          (<CallExpression>expression).expression,\r\n          contextualFunction\r\n        );\r\n        if (resolved) {\r\n          let element = resolved.element;\r\n          if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n            let instance = (<FunctionPrototype>element).resolveUsingTypeArguments(\r\n              (<CallExpression>expression).typeArguments,\r\n              contextualFunction.contextualTypeArguments,\r\n              expression\r\n            );\r\n            if (instance) {\r\n              let returnType = instance.signature.returnType;\r\n              let classType = returnType.classReference;\r\n              if (classType) {\r\n                if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                return resolvedElement.set(classType);\r\n              } else {\r\n                let signature = returnType.signatureReference;\r\n                if (signature) {\r\n                  let functionTarget = signature.cachedFunctionTarget;\r\n                  if (!functionTarget) {\r\n                    functionTarget = new FunctionTarget(this, signature);\r\n                    signature.cachedFunctionTarget = functionTarget;\r\n                  }\r\n                  if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                  return resolvedElement.set(functionTarget);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\r\nexport class ResolvedElement {\r\n\r\n  /** The target element, if a property or element access */\r\n  target: Element | null;\r\n  /** The target element's expression, if a property or element access. */\r\n  targetExpression: Expression | null;\r\n  /** The element being accessed. */\r\n  element: Element;\r\n\r\n  /** Clears the target and sets the resolved element. */\r\n  set(element: Element): this {\r\n    this.target = null;\r\n    this.targetExpression = null;\r\n    this.element = element;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the resolved target in addition to the previously set element. */\r\n  withTarget(target: Element, targetExpression: Expression): this {\r\n    this.target = target;\r\n    this.targetExpression = targetExpression;\r\n    return this;\r\n  }\r\n\r\n  /** Tests if the target is a valid instance target. */\r\n  get isInstanceTarget(): bool {\r\n    return (\r\n      this.target != null &&\r\n      this.target.kind == ElementKind.CLASS &&\r\n      this.targetExpression != null\r\n    );\r\n  }\r\n}\r\n\r\n// Cached result structure instance\r\nvar resolvedElement: ResolvedElement | null;\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Internal decorators\r\n\r\n  /** Is global. */\r\n  GLOBAL = 1 << 13,\r\n  /** Is built-in. */\r\n  BUILTIN = 1 << 14,\r\n  /** Is unmanaged. */\r\n  UNMANAGED = 1 << 15,\r\n  /** Is sealed. */\r\n  SEALED = 1 << 16,\r\n\r\n  // Extended modifiers usually derived from basic modifiers or internal decorators\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 17,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 18,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 19,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 20,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 21,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 22,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 23,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 24,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 25,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 26,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 27,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 28\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent namespace, if applicable. */\r\n  namespace: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Parent enum. */\r\n  enum: Enum;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.enum = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(this, internalName, signature, classInstance ? classInstance : classPrototype);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(this.classPrototype);\r\n    if (classTypeArguments && classTypeArguments.length) {\r\n      let partialPrototype = new FunctionPrototype(\r\n        this.program,\r\n        this.simpleName,\r\n        this.internalName,\r\n        this.declaration,\r\n        this.classPrototype\r\n      );\r\n      partialPrototype.flags = this.flags;\r\n      partialPrototype.classTypeArguments = classTypeArguments;\r\n      return partialPrototype;\r\n    }\r\n    return this; // no need to clone\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** If a member of another namespace-like element, the concrete element it is a member of. */\r\n  memberOf: Element | null;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    memberOf: Element | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.memberOf = memberOf;\r\n    this.flags = prototype.flags;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (memberOf && memberOf.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        let contextualTypeArguments = (<Class>memberOf).contextualTypeArguments;\r\n        if (contextualTypeArguments) {\r\n          if (!this.contextualTypeArguments) {\r\n            this.contextualTypeArguments = new Map();\r\n          }\r\n          for (let [inheritedName, inheritedType] of contextualTypeArguments) {\r\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n            // FIXME: declaration?\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Overloaded indexed get method, if any. */\r\n  fnIndexedGet: string | null = null;\r\n  /** Overloaded indexed set method, if any. */\r\n  fnIndexedSet: string | null = null;\r\n  /** Overloaded concatenation method, if any. */\r\n  fnConcat: string | null = null;\r\n  /** Overloaded subtraction method, if any. */\r\n  fnSubtract: string | null = null;\r\n  /** Overloaded multiply method, if any. */\r\n  fnMultiply: string | null = null;\r\n  /** Overloaded divide method, if any. */\r\n  fnDivide: string | null = null;\r\n  /** Overloaded fractional method, if any. */\r\n  fnFractional: string | null = null;\r\n  /** Overloaded bitwise and method, if any. */\r\n  fnBitwiseAnd: string | null = null;\r\n  /** Overloaded bitwise or method, if any. */\r\n  fnBitwiseOr: string | null = null;\r\n  /** Overloaded bitwise xor method, if any. */\r\n  fnBitwiseXor: string | null = null;\r\n  /** Overloaded equality comparison method, if any. */\r\n  fnEquals: string | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.is(CommonFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) {\r\n        instance.constructorInstance = partialConstructor.resolve(); // reports\r\n      }\r\n      // TODO: ^ doesn't know the return type, hence returns null\r\n    }\r\n\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\r\n            if (!instance.members) instance.members = new Map();\r\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (methodPrototype) {\r\n              methodPrototype.internalName = internalName + INSTANCE_DELIMITER + methodPrototype.simpleName;\r\n              instance.members.set(member.simpleName, methodPrototype);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      if (base.contextualTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do {\r\n      if (current == target) {\r\n        return true;\r\n      }\r\n    } while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName, declaration);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Scoped global variables. */\r\n  // scopedGlobals: Map<Local,Global> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.RETURNS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (this.is(FlowFlags.THROWS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (this.is(FlowFlags.ALLOCATES)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, declaration: VariableDeclaration): void {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else if (this.scopedLocals.has(name)) {\r\n      this.currentFunction.program.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range\r\n      );\r\n      return;\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Adds a scoped global for an outer scoped local. */\r\n  // addScopedGlobal(scopedLocal: Local): Global {\r\n  //   var scopedGlobals = this.scopedGlobals;\r\n  //   var scopedGlobal: Global | null;\r\n  //   if (!scopedGlobals) {\r\n  //     this.scopedGlobals = scopedGlobals = new Map();\r\n  //   } else {\r\n  //     scopedGlobal = scopedGlobals.get(scopedLocal);\r\n  //     if (scopedGlobal) return scopedGlobal;\r\n  //   }\r\n  //   scopedGlobal = new Global(\r\n  //     scopedLocal.program,\r\n  //     scopedLocal.simpleName,\r\n  //     this.currentFunction.internalName + \"~\" + scopedLocal.internalName,\r\n  //     scopedLocal.type,\r\n  //     assert(scopedLocal.declaration)\r\n  //   );\r\n  //   scopedGlobals.set(scopedLocal, scopedGlobal);\r\n  //   return scopedGlobal;\r\n  // }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null, \"must be the topmost parent flow\");\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\r\n    start--;\r\n  }\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\r\n    end++;\r\n  }\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    if (expression.kind == NodeKind.IDENTIFIER) {\r\n      switch ((<IdentifierExpression>expression).text) {\r\n        case \"global\": {\r\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case \"operator\": {\r\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case \"unmanaged\": {\r\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\r\n          break;\r\n        }\r\n        case \"offset\": {\r\n          stmt.decoratorKind = DecoratorKind.OFFSET;\r\n          break;\r\n        }\r\n        default: {\r\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  OFFSET\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return decorator;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFomKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFomKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying function reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classReference = this.classReference;       // either a class reference\r\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) {\r\n      return left;\r\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\r\n      return right;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType\r\n          ? \"u32\"\r\n          : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType\r\n          ? \"usize\"\r\n          : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    ret[i] = types[i].toNativeType();\r\n  }\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    sb[i] = types[i].toString();\r\n  }\r\n  return sb.join(\", \");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\r\n        return false;\r\n      }\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) {\r\n      return false; // TODO\r\n    }\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    var sb = [];\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(thisType.toSignatureString());\r\n    }\r\n    var parameterTypes = this.parameterTypes;\r\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n      sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(this.returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) {\r\n          sb.push((<string[]>names)[i]);\r\n        } else {\r\n          sb.push(getGenericParameterName(i));\r\n        }\r\n        if (i >= optionalStart && i != restIndex) {\r\n          sb.push(\"?: \");\r\n        } else {\r\n          sb.push(\": \");\r\n        }\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  Flow\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n  /** Argument count helper global. */\r\n  argumentCountRef: GlobalRef = 0;\r\n  /** Already processed file names. */\r\n  files: Set<string> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) {\r\n        this.compileSource(sources[i]);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\r\n      let funcRef: FunctionRef;\r\n      module.setStart(\r\n        funcRef = module.addFunction(\r\n          startFunctionInstance.internalName,\r\n          typeRef,\r\n          typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n          module.createBlock(null, startFunctionBody)\r\n        )\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested\r\n    if (options.importMemory) {\r\n      module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n    }\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    // import table if requested\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableSize) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var sources = this.program.sources;\r\n\r\n    // try file.ts\r\n    var expected = normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try file/index.ts\r\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try ~lib/file.ts\r\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.File_0_not_found,\r\n      reportNode.range, normalizedPathWithoutExtension\r\n    );\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n    var files = this.files;\r\n    var normalizedPath = source.normalizedPath;\r\n    if (files.has(normalizedPath)) return;\r\n    files.add(normalizedPath);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.namespace\r\n            ? global.namespace.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              assert(global.declaration).range\r\n            );\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(0);\r\n            break;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (declaration) {\r\n          if (declaration.isTopLevel) {    // but keep the element as it might be re-exported\r\n            module.addGlobal(internalName, nativeType, false, initExpr);\r\n          }\r\n          if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n            module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n          }\r\n        } else {\r\n          assert(false); // must have a declaration if constant\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, member.internalName);\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    var thisType = signature.thisType;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    for (let i = 0; i < numParameters; ++i, ++index) {\r\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\r\n    }\r\n    var resultType = signature.returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var typeRef = this.ensureFunctionType(instance.signature);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType: Type = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\r\n        flow.set(FlowFlags.RETURNS);\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.memberOf);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let namespace = instance.prototype.namespace;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        namespace\r\n          ? namespace.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n      module.addFunctionExport(instance.internalName, declaration.name.text);\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n    var stmtThrows = flow.is(FlowFlags.THROWS);\r\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\r\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\r\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\r\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint\r\n    if (alwaysReturns || alwaysThrows) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      let ret: ExpressionRef;\r\n      if (_BinaryenConstGetValueI32(condExpr)) {\r\n        ret = this.compileStatement(ifTrue);\r\n      } else if (ifFalse) {\r\n        ret = this.compileStatement(ifFalse);\r\n      } else {\r\n        ret = module.createNop();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\r\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    var ifFalseThrows = false;\r\n    var ifFalseAllocates = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\r\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n\r\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\r\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\r\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        currentFunction.signature.returnType\r\n      );\r\n    }\r\n\r\n    // Remember that this flow returns\r\n    currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return this.module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\r\n        alwaysThrows = false;\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\r\n        alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          currentFunction.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        if (declaration.isAny(CommonFlags.LET | CommonFlags.CONST)) { // here: not top-level\r\n          currentFunction.flow.addScopedLocal(type, name, declaration); // reports\r\n        } else {\r\n          currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (init) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!_BinaryenConstGetValueI32(condExpr)) {\r\n        return module.createNop();\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      case TypeKind.F64: {\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL)) {\r\n            expr = makeSmallIntegerWrap(expr, toType, module);\r\n          }\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SMALL) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    switch (expression.operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                assert(this.currentType == Type.bool);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnConcat;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnSubtract;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnMultiply;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must be wrapped\r\n        );\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType == Type.f32) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType\r\n          );\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            left\r\n          );\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64\r\n          );\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnDivide;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnFractional;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseAnd;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseOr;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseXor;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileOperatorOverload(\r\n    classInstance: Class,\r\n    operatorName: string,\r\n    leftExpr: ExpressionRef,\r\n    rightExpr: ExpressionRef\r\n  ): ExpressionRef {\r\n    var classPrototype = classInstance.prototype;\r\n    var operatorPrototype = assert(assert(classPrototype.members).get(operatorName));\r\n    assert(operatorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var operatorInstance = (<FunctionPrototype>operatorPrototype).resolve();\r\n    if (!operatorInstance) return this.module.createUnreachable();\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ]);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression, currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var element = resolved.element;\r\n    var elementType: Type;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>element).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>element).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1);\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>element).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\r\n          if (resolved.target && resolved.target.kind == ElementKind.CLASS) {\r\n            if (element.simpleName == (<Class>resolved.target).prototype.fnIndexedGet) {\r\n              let resolvedIndexedSet = (<FunctionPrototype>element).resolve(null); // reports\r\n              if (resolvedIndexedSet) {\r\n                elementType = resolvedIndexedSet.signature.returnType;\r\n                break;\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>resolved.target).toString()\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>element).type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>element).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>element).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) return module.createUnreachable();\r\n        let type = (<Global>element).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = (<Global>element).internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal((<Global>element).internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        assert(resolved.isInstanceTarget);\r\n        let targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          (<Class>resolved.target).type\r\n        );\r\n        let type = (<Field>element).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              targetExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>element).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            targetExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>element).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              assert(resolved.isInstanceTarget);\r\n              let thisArg = this.compileExpression(\r\n                <Expression>resolved.targetExpression,\r\n                (<Class>resolved.target).type\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisArg, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>element).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            let thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisArg),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>element).internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // @operator(\"[]\") ?\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) {\r\n          assert(resolved.isInstanceTarget);\r\n          let getterInstance = (<FunctionPrototype>element).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          // obtain @operator(\"[]=\")\r\n          let setElementName = (<Class>resolved.target).prototype.fnIndexedSet;\r\n          let setElement: Element | null;\r\n          if (\r\n            setElementName != null &&\r\n            (<Class>resolved.target).members &&\r\n            (setElement = (<Map<string,Element>>(<Class>resolved.target).members).get(setElementName)) &&\r\n            setElement.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            let setterInstance = (<FunctionPrototype>setElement).resolve(); // reports\r\n            if (!setterInstance) return module.createUnreachable();\r\n            let targetType = (<Class>resolved.target).type;\r\n            let targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              targetType\r\n            );\r\n            let elementExpr = this.compileExpression(\r\n              (<ElementAccessExpression>expression).elementExpression,\r\n              Type.i32\r\n            );\r\n            if (tee) {\r\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n              let returnType = getterInstance.signature.returnType;\r\n              this.currentFunction.freeTempLocal(tempLocalTarget);\r\n              return module.createBlock(null, [\r\n                this.makeCallDirect(setterInstance, [\r\n                  module.createTeeLocal(tempLocalTarget.index, targetExpr),\r\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                  valueWithCorrectType\r\n                ]),\r\n                this.makeCallDirect(getterInstance, [\r\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n                ])\r\n              ], returnType.toNativeType());\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [\r\n                targetExpr,\r\n                elementExpr,\r\n                valueWithCorrectType\r\n              ]);\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, (<Class>resolved.target).internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (element.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>element;\r\n\r\n        // builtins are compiled on the fly\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          let expr = compileBuiltinCall( // reports\r\n            this,\r\n            prototype,\r\n            prototype.resolveBuiltinTypeArguments(\r\n              expression.typeArguments,\r\n              currentFunction.contextualTypeArguments\r\n            ),\r\n            expression.arguments,\r\n            contextualType,\r\n            expression\r\n          );\r\n          if (!expr) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          return expr;\r\n\r\n        // otherwise compile to a call\r\n        } else {\r\n          let instance = prototype.resolveUsingTypeArguments( // reports\r\n            expression.typeArguments,\r\n            currentFunction.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return module.createUnreachable();\r\n          let thisArg: ExpressionRef = 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            if (!thisArg) return module.createUnreachable();\r\n          } else {\r\n            assert(!resolved.isInstanceTarget);\r\n          }\r\n          return this.compileCallDirect(instance, expression.arguments, expression, thisArg);\r\n        }\r\n      }\r\n\r\n      // indirect call: index argument with signature\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>element).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>element).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>element).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>element).internalName, (<Global>element).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>element).type;\r\n        if (signature = type.signatureReference) {\r\n          let targetExpr = this.compileExpression(assert(resolved.targetExpression), type);\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            targetExpr,\r\n            NativeType.I32,\r\n            (<Field>element).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>element).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>element).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.memberOf);\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    trampoline.contextualTypeArguments = original.contextualTypeArguments;\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"argumentCount\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"argumentCount\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var typeRef = this.ensureFunctionType(trampolineSignature);\r\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n      if (!isCallImport) { // call the trampoline\r\n        instance = this.ensureTrampoline(instance);\r\n        if (!this.compileFunction(instance)) return module.createUnreachable();\r\n        let nativeReturnType = returnType.toNativeType();\r\n        this.currentType = returnType;\r\n        return module.createBlock(null, [\r\n          this.ensureArgumentCount(numArguments),\r\n          module.createCall(instance.internalName, operands, nativeReturnType)\r\n        ], nativeReturnType);\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return isCallImport\r\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\r\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      this.ensureArgumentCount(numArguments), // might still be calling a trampoline\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType());\r\n  }\r\n\r\n  /** Makes sure that the `argumentCount` helper global is present and returns an expression that sets it. */\r\n  private ensureArgumentCount(argumentCount: i32): ExpressionRef {\r\n    var module = this.module;\r\n    if (!this.argumentCountRef) {\r\n      this.argumentCountRef = module.addGlobal(\r\n        \"argumentCount\",\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return module.createSetGlobal(\"argumentCount\", module.createI32(argumentCount));\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    assert( // should be guaranteed by resolveElementAccess\r\n      resolved.element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n      resolved.target &&\r\n      resolved.target.kind == ElementKind.CLASS\r\n    );\r\n    var target = <Class>resolved.target;\r\n    var instance = (<FunctionPrototype>resolved.element).resolve( // reports\r\n      null,\r\n      target.contextualTypeArguments\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    var thisArg = this.compileExpression(expression.expression, target.type);\r\n    return this.compileCallDirect(instance, [\r\n      expression.elementExpression\r\n    ], expression, thisArg);\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + \"~\" + simpleName,\r\n      declaration\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      currentFunction.contextualTypeArguments,\r\n      currentFunction.flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            let flow = currentFunction.flow;\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                makeConditionalAllocate(this, <Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var resolved = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>element, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>element).type;\r\n        let localIndex = (<Local>element).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, expression);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!element.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>element).resolve(\r\n          null,\r\n          this.currentFunction.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileStaticArray(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayType) return module.createUnreachable();\r\n\r\n    var elementSize = expressions.length;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    var memorySize: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // precompute value expressions\r\n    var exprs = new Array<ExpressionRef>(elementSize);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < elementSize; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n    var headerSize = usizeTypeSize + 4 + 4; // memory + capacity + length\r\n\r\n    if (isStatic) {\r\n      let buffer = new Uint8Array(headerSize + memorySize);\r\n      let segment = this.addMemorySegment(buffer);\r\n\r\n      // make header\r\n      let offset = 0;\r\n      if (usizeTypeSize == 8) {\r\n        writeI64(i64_add(segment.offset, i64_new(headerSize)), buffer, 0); // memory\r\n      } else {\r\n        assert(i64_high(segment.offset) == 0);\r\n        writeI32(i64_low(segment.offset) + headerSize, buffer, 0); // memory\r\n      }\r\n      offset += usizeTypeSize;\r\n      writeI32(elementSize, buffer, offset); // capacity\r\n      offset += 4;\r\n      writeI32(elementSize, buffer, offset); // length\r\n      offset += 4;\r\n      assert(offset == headerSize);\r\n\r\n      // make memory\r\n      switch (nativeType) {\r\n        case NativeType.I32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI32(changetype<i32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI64(changetype<I64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF32(changetype<f32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF64(changetype<f64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      assert(offset == headerSize + memorySize);\r\n      this.currentType = arrayType.type;\r\n      return usizeTypeSize == 8\r\n        ? module.createI64(\r\n            i64_low(segment.offset),\r\n            i64_high(segment.offset)\r\n          )\r\n        : module.createI32(\r\n            i64_low(segment.offset)\r\n          );\r\n    } else {\r\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\r\n      // on top? any benefits?\r\n      throw new Error(\"not implemented\");\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var resolved = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n    if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>resolved.element;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      null,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = makeAllocate(this, classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var resolved = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var targetExpr: ExpressionRef;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, propertyAccess);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        if (!this.compileEnum((<EnumValue>element).enum)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert(resolved.isInstanceTarget);\r\n        assert((<Field>element).memoryOffset >= 0);\r\n        targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          this.options.usizeType,\r\n          ConversionKind.NONE\r\n        );\r\n        this.currentType = (<Field>element).type;\r\n        return module.createLoad(\r\n          (<Field>element).type.size >> 3,\r\n          (<Field>element).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          targetExpr,\r\n          (<Field>element).type.toNativeType(),\r\n          (<Field>element).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>element).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.memberOf);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>parent).type\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, targetExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>element).simpleName, (<Property>element).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      return _BinaryenConstGetValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var currentFunction = this.currentFunction;\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    if (_BinaryenExpressionGetId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n\r\n/** Makes an allocation expression for an instance of the specified class. */\r\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n  var currentFunction = compiler.currentFunction;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n\r\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\r\n\r\n  // allocate the necessary memory\r\n  var initializers = new Array<ExpressionRef>();\r\n  initializers.push(\r\n    module.createSetLocal(tempLocal.index,\r\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n\r\n  // apply field initializers\r\n  if (classInstance.members) {\r\n    for (let member of classInstance.members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        let field = <Field>member;\r\n        let fieldType = field.type;\r\n        let nativeFieldType = fieldType.toNativeType();\r\n        let fieldDeclaration = field.prototype.declaration;\r\n        assert(!field.isAny(CommonFlags.CONST));\r\n        if (fieldDeclaration.initializer) { // use initializer\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        } else { // initialize with zero\r\n          // TODO: might be unnecessary if the ctor initializes the field\r\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter\r\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n              : fieldType.toNativeZero(module),\r\n              nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // return `this`\r\n  initializers.push(\r\n    module.createGetLocal(tempLocal.index, nativeSizeType)\r\n  );\r\n\r\n  currentFunction.freeTempLocal(tempLocal);\r\n  compiler.currentType = classInstance.type;\r\n  return module.createBlock(null, initializers, nativeSizeType);\r\n}\r\n\r\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  // requires that `this` is the first local\r\n  var module = compiler.module;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  compiler.currentType = classInstance.type;\r\n  return module.createIf(\r\n    nativeSizeType == NativeType.I64\r\n      ? module.createBinary(\r\n          BinaryOp.NeI64,\r\n          module.createGetLocal(0, NativeType.I64),\r\n          module.createI64(0)\r\n        )\r\n      : module.createGetLocal(0, NativeType.I32),\r\n    module.createGetLocal(0, nativeSizeType),\r\n    module.createTeeLocal(0,\r\n      makeAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].internalPath == internalPath) return;\r\n    }\r\n    this.seenlog.add(internalPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      let name = decorator.name;\r\n      if (name.kind == NodeKind.IDENTIFIER) {\r\n        let text = (<IdentifierExpression>name).text;\r\n        if (text == \"global\") {\r\n          flags |= CommonFlags.GLOBAL;\r\n          continue;\r\n        }\r\n        if (text == \"unmananged\") {\r\n          flags |= CommonFlags.UNMANAGED;\r\n          continue;\r\n        }\r\n        if (text == \"sealed\") {\r\n          flags |= CommonFlags.SEALED;\r\n          continue;\r\n        }\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn, isConstructor);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"public\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"protected\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PROTECTED;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"private\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PRIVATE;\r\n    }\r\n    if (tn.skip(Token.READONLY)) {\r\n      if (!startRange) startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"readonly\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.READONLY;\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Function,\r\n  Class,\r\n  Namespace,\r\n  FunctionPrototype,\r\n  ClassPrototype,\r\n  ConstantValueKind,\r\n  Interface\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program) {\r\n    this.program = program;\r\n  }\r\n\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) {\r\n      this.visitElement(element);\r\n    }\r\n  }\r\n\r\n  visitElement(element: Element): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitEnum(<Enum>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitFunction(<Function>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitClass(<Class>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\r\n          this.visitNamespace(<Namespace>element);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) {\r\n            sb.push(\"const \");\r\n          } else {\r\n            sb.push(\"readonly \");\r\n          }\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) {\r\n          this.visitElement(member);\r\n        }\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          this.seen.add(member);\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) {\r\n        this.visitNamespace(element);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"function \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    sb.push(\"): \");\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    members = element.members; // instance\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) {\r\n    parser = new Parser();\r\n    isEntry = true;\r\n  }\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  Global,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(\r\n  compiler: Compiler,\r\n  global: Global,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (global.internalName) {\r\n    case \"NaN\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(NaN);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(NaN);\r\n      }\r\n    }\r\n    case \"Infinity\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(Infinity);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(Infinity);\r\n      }\r\n    }\r\n    case \"HEAP_BASE\": { // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (!stringInstance) return module.createUnreachable();\r\n        if (classType.isAssignableTo(stringInstance)) {\r\n          return module.createI32(1);\r\n        }\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      return classType != null && classType.prototype.fnIndexedGet != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createBinary(BinaryOp.NeF32,\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createGetLocal(tempLocal.index, NativeType.F32)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createBinary(BinaryOp.NeF64,\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createGetLocal(tempLocal.index, NativeType.F64)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF32,\r\n              module.createUnary(UnaryOp.AbsF32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              module.createF32(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF32,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32),\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF64,\r\n              module.createUnary(UnaryOp.AbsF64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              module.createF64(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF64,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64),\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      let type: Type;\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type);\r\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0))\r\n      return 0;\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, n) {\r\n    HEAP.copyWithin(dest, src, src + n);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, val, off) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    HEAP[ptr] = val;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    return HEAP[ptr];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}
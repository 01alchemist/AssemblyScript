{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","sources","__extends","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","k","length","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","resolved","resolveIdentifier","ElementKind","CLASS_PROTOTYPE","A_class_may_only_extend_another_class","basePrototype","checkInternalDecorators","parentNode","is","CommonFlags","GLOBAL","source","isLibrary","SOURCE","simpleName","has","Duplicate_identifier_0","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","programLevelInternalName","instance","resolve","type","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","alias","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","resolvedElement","ResolvedElement","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","resolveExpression","targetType","target","propertyName","LOCAL","FIELD","classType","Property_0_does_not_exist_on_type_1","CLASS","withTarget","base","resolveElementAccess","elementAccess","indexedGetName","indexedGet","FUNCTION_PROTOTYPE","Index_signature_is_missing_in_type_0","PARENTHESIZED","ASSERTION","toType","BINARY","THIS","instanceMethodOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","functionType","functionTarget","cachedFunctionTarget","FunctionTarget","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","apply","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","_b","_c","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","asClass","baseType","isAssignableTo","current","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","enterBranchOrScope","branchFlow","leaveBranchOrScope","scopedLocal","addScopedLocal","DiagnosticCategory","diagnosticMessages_generated_1","charcode_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","normalizedPath","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","Binary","output","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","load","Uint8Array","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","path_1","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalize","startsWith","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPE","TYPEPARAMETER","PARAMETER","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","nullableType","ceil","nonNullableType","computeSmallIntegerShift","computeSmallIntegerMask","asNullable","isReference","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","memoryBase","allocateImpl","freeImpl","ConversionKind","Compiler","startFunctionBody","currentEnum","currentType","memorySegments","stringSegments","functionTable","files","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","typeRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","entries","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","COMPILED","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","allBranchesReturn","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifFalseExpr","ifFalseReturns","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","resolvedIndexedSet","valueExpr","valueWithCorrectType","tee","isInstanceTarget","targetExpr","setterInstance","thisArg","makeCallDirect","getterInstance","nativeReturnType","setElementName","setElement","elementExpr","tempLocalTarget","tempLocalElement","Index_signature_in_type_0_only_permits_reading","indexArg","compileCall","compileCallDirect","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","numArgumentsInclThis","ensureTrampoline","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","nativeSizeType","trampolineParameterTypes","trampolineSignature","trampolineName","numOperands","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_i16","i64_is_i32","i64_is_u8","i64_is_u16","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","Int32Array","Float32Array","Float64Array","thisExpr","compileAllocate","field","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","ifThenExpr","ifElseExpr","nativeOne","setValue","getValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","g","eval","e","window","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","Parser","backlog","seenlog","currentDeclareStart","currentDeclareEnd","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","isNamespaceMember","startPos","parseDecorator","exportStart","exportEnd","declareStart","declareEnd","first","parseEnum","parseVariable","parseFunction","parseClass","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","AMBIENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","isConstructor","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","indentX1","indentX2","indentX4","indent","text_1","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","Unreachable","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setSourceMap","setMemoryBase","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","evaluateConstantOffset","compiler","compileAbort","abortPrototype","abortInstance","messageArg","filenameArg","NaN","Infinity","tempLocal0","tempLocal1","Type_0_is_not_generic","stringPrototype","stringInstance","abort","cls","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","EPSILON","clz32","abs","sqrt","trunc","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray"],"mappings":"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AM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n","/**\r\n * @file AssemblyScript's IR describing a program's elements.\r\n */\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  // ParameterNode,\r\n  // ParameterKind,\r\n  // SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ParameterKind,\r\n  SignatureNode\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"(lib)\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedDerivedClasses = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let resolved = this.resolveIdentifier(derivedType.name, null);\r\n      if (resolved) {\r\n        if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n          this.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            derivedType.range\r\n          );\r\n          continue;\r\n        }\r\n        queuedDerivedClasses[i].basePrototype = (\r\n          <ClassPrototype>resolved.element\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  /** Processes internal decorators, if present. */\r\n  private checkInternalDecorators(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      element.is(CommonFlags.GLOBAL) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        element.set(CommonFlags.GLOBAL);\r\n        this.elementsLookup.set(simpleName, element);\r\n        this.fileLevelExports.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedDerivedClasses: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    var numImplementsTypes = implementsTypes.length;\r\n    if (prototype.is(CommonFlags.UNMANAGED)) {\r\n      if (implementsTypes && numImplementsTypes) {\r\n        this.error(\r\n          DiagnosticCode.Structs_cannot_implement_interfaces,\r\n          Range.join(\r\n            declaration.name.range,\r\n            implementsTypes[numImplementsTypes - 1].range\r\n          )\r\n        );\r\n      }\r\n    } else if (numImplementsTypes) {\r\n      for (let i = 0; i < numImplementsTypes; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          implementsTypes[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) {\r\n      queuedDerivedClasses.push(prototype);\r\n    }\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        if (prototype.is(CommonFlags.EXPORT)) {\r\n          prototype.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // check and possibly register string type\r\n    if (\r\n      prototype.is(CommonFlags.GLOBAL) &&\r\n      declaration.name.text == \"String\"\r\n    ) {\r\n      if (!this.typesLookup.has(\"string\")) {\r\n        let instance = prototype.resolve(null);\r\n        if (instance) this.typesLookup.set(\"string\", instance.type);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, declaration.programLevelInternalName\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this, name, internalName, declaration, Type.void\r\n      );\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name, internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        null\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperators(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          if (!prototype) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              decorator.range\r\n            );\r\n            continue;\r\n          }\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              switch ((<StringLiteralExpression>firstArg).value) {\r\n                case \"[]\": {\r\n                  classPrototype.fnIndexedGet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"[]=\": {\r\n                  classPrototype.fnIndexedSet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"+\": {\r\n                  classPrototype.fnConcat = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"==\": {\r\n                  classPrototype.fnEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                default: {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\r\n          // methods support built-in @operator only\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            decorator.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.namespace = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    this.checkInternalDecorators(element, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (isModuleExport) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtendingClasses: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.namespace = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkInternalDecorators(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        Type.void // resolved later on\r\n      );\r\n      global.namespace = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      this.checkInternalDecorators(global, declaration);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): ResolvedElement | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.namespace) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(element);\r\n          }\r\n        } while (namespace = namespace.namespace);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    resolvedElement = this.resolveExpression( // reports\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n    var targetType: Type;\r\n    var member: Element | null;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        if (!(targetType = (<VariableLikeElement>target).type).classType) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classType;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        if (!(targetType = getter.signature.returnType).classType) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classType;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          if (target.members && (member = target.members.get(propertyName))) {\r\n            return resolvedElement.set(member).withTarget(target, targetExpression);\r\n          }\r\n          // check inherited static members on the base prototype while target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // or inherited instance members on the cbase class while target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        if (target.members && (member = target.members.get(propertyName))) {\r\n          return resolvedElement.set(member).withTarget(target, targetExpression);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = elementAccess.expression;\r\n    resolvedElement = this.resolveExpression(\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (type.classType) {\r\n          let indexedGetName = (target = type.classType).prototype.fnIndexedGet;\r\n          let indexedGet: Element | null;\r\n          if (\r\n            indexedGetName != null &&\r\n            target.members &&\r\n            (indexedGet = target.members.get(indexedGetName)) &&\r\n            indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            return resolvedElement.set(indexedGet).withTarget(type.classType, targetExpression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n      targetExpression.range, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classType;\r\n          if (classType) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(classType);\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class\r\n        let classType = contextualFunction.instanceMethodOf;\r\n        if (classType) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(classType);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        let classType = contextualFunction.instanceMethodOf;\r\n        if (classType && (classType = classType.base)) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(classType);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let resolved = this.resolveExpression(\r\n          (<CallExpression>expression).expression,\r\n          contextualFunction\r\n        );\r\n        if (resolved) {\r\n          let element = resolved.element;\r\n          if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n            let instance = (<FunctionPrototype>element).resolveUsingTypeArguments(\r\n              (<CallExpression>expression).typeArguments,\r\n              null,\r\n              expression\r\n            );\r\n            if (instance) {\r\n              let returnType = instance.signature.returnType;\r\n              let classType = returnType.classType;\r\n              if (classType) {\r\n                if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                return resolvedElement.set(classType);\r\n              } else {\r\n                let signature = returnType.functionType;\r\n                if (signature) {\r\n                  let functionTarget = signature.cachedFunctionTarget;\r\n                  if (!functionTarget) {\r\n                    functionTarget = new FunctionTarget(this, signature);\r\n                    signature.cachedFunctionTarget = functionTarget;\r\n                  }\r\n                  if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                  return resolvedElement.set(functionTarget);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\r\nexport class ResolvedElement {\r\n\r\n  /** The target element, if a property or element access */\r\n  target: Element | null;\r\n  /** The target element's expression, if a property or element access. */\r\n  targetExpression: Expression | null;\r\n  /** The element being accessed. */\r\n  element: Element;\r\n\r\n  /** Clears the target and sets the resolved element. */\r\n  set(element: Element): this {\r\n    this.target = null;\r\n    this.targetExpression = null;\r\n    this.element = element;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the resolved target in addition to the previously set element. */\r\n  withTarget(target: Element, targetExpression: Expression): this {\r\n    this.target = target;\r\n    this.targetExpression = targetExpression;\r\n    return this;\r\n  }\r\n\r\n  /** Tests if the target is a valid instance target. */\r\n  get isInstanceTarget(): bool {\r\n    return (\r\n      this.target != null &&\r\n      this.target.kind == ElementKind.CLASS &&\r\n      this.targetExpression != null\r\n    );\r\n  }\r\n}\r\n\r\n// Cached result structure instance\r\nvar resolvedElement: ResolvedElement | null;\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Internal decorators\r\n\r\n  /** Is global. */\r\n  GLOBAL = 1 << 13,\r\n  /** Is built-in. */\r\n  BUILTIN = 1 << 14,\r\n  /** Is unmanaged. */\r\n  UNMANAGED = 1 << 15,\r\n\r\n  // Extended modifiers usually derived from basic modifiers or internal decorators\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 16,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 17,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 18,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 19,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 20,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 21,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 22,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 23,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 24,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 25,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 26\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent namespace, if applicable. */\r\n  namespace: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Parent enum. */\r\n  enum: Enum;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.enum = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: VariableLikeDeclarationStatement,\r\n    type: Type\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n\r\n  constructor(program: Program, simpleName: string, index: i32, type: Type) {\r\n    super(program, simpleName, simpleName);\r\n    this.index = index;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n\r\n    // inherit contextual type arguments as provided. might be be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      let classDeclaration = (<ClassPrototype>assert(this.classPrototype)).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      let classPrototype = assert(this.classPrototype);\r\n      classInstance = classPrototype.resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n    } else {\r\n      assert(!this.classPrototype);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET) || this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = Type.void; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(this, internalName, signature, classInstance);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.classPrototype);\r\n    if (classTypeArguments && classTypeArguments.length) {\r\n      let partialPrototype = new FunctionPrototype(\r\n        this.program,\r\n        this.simpleName,\r\n        this.internalName,\r\n        this.declaration,\r\n        this.classPrototype\r\n      );\r\n      partialPrototype.flags = this.flags;\r\n      partialPrototype.classTypeArguments = classTypeArguments;\r\n      return partialPrototype;\r\n    }\r\n    return this; // no need to clone\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** If an instance method, the concrete class it is a member of. */\r\n  instanceMethodOf: Class | null;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    instanceMethodOf: Class | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.instanceMethodOf = instanceMethodOf;\r\n    this.flags = prototype.flags;\r\n    if (!(prototype.is(CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (instanceMethodOf) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        if (instanceMethodOf.contextualTypeArguments) {\r\n          if (!this.contextualTypeArguments) {\r\n            this.contextualTypeArguments = new Map();\r\n          }\r\n          for (let [inheritedName, inheritedType] of instanceMethodOf.contextualTypeArguments) {\r\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(prototype: FieldPrototype, internalName: string, type: Type) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Overloaded indexed get method, if any. */\r\n  fnIndexedGet: string | null = null;\r\n  /** Overloaded indexed set method, if any. */\r\n  fnIndexedSet: string | null = null;\r\n  /** Overloaded concatenation method, if any. */\r\n  fnConcat: string | null = null;\r\n  /** Overloaded equality comparison method, if any. */\r\n  fnEquals: string | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classType)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) {\r\n        instance.constructorInstance = partialConstructor.resolve(); // reports\r\n      }\r\n      // TODO: ^ doesn't know the return type, hence returns null\r\n    }\r\n\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(<FieldPrototype>member, (<FieldPrototype>member).internalName, fieldType);\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\r\n            if (!instance.members) instance.members = new Map();\r\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (methodPrototype) {\r\n              instance.members.set(member.simpleName, methodPrototype);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\r\n            if (!instance.members) instance.members = new Map();\r\n            assert((<Property>member).getterPrototype);\r\n            let instanceProperty = new Property(this.program, member.simpleName, member.internalName, this);\r\n            instanceProperty.getterPrototype = (\r\n              (<FunctionPrototype>(<Property>member).getterPrototype).resolvePartial(\r\n                typeArguments\r\n              )\r\n            );\r\n            if ((<Property>member).setterPrototype) {\r\n              instanceProperty.setterPrototype = (\r\n                (<FunctionPrototype>(<Property>member).setterPrototype).resolvePartial(\r\n                  typeArguments\r\n                )\r\n              );\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: throw new Error(\"instance member expected\");\r\n        }\r\n      }\r\n    }\r\n    instance.currentMemoryOffset = memoryOffset; // sizeof<this>() is its byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      if (base.contextualTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do {\r\n      if (current == target) {\r\n        return true;\r\n      }\r\n    } while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.prototype.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName, declaration);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch possibly throws. */\r\n  POSSIBLY_THROWS = 1 << 1,\r\n  /** This branch possible breaks. */\r\n  POSSIBLY_BREAKS = 1 << 2,\r\n  /** This branch possible continues. */\r\n  POSSIBLY_CONTINUES = 1 << 3\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branchFlow = new Flow();\r\n    branchFlow.parent = this;\r\n    branchFlow.flags = this.flags;\r\n    branchFlow.currentFunction = this.currentFunction;\r\n    branchFlow.continueLabel = this.continueLabel;\r\n    branchFlow.breakLabel = this.breakLabel;\r\n    return branchFlow;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.POSSIBLY_THROWS)) {\r\n      parent.set(FlowFlags.POSSIBLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.POSSIBLY_BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.POSSIBLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.POSSIBLY_CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.POSSIBLY_CONTINUES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, reportNode: Node): void {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else if (this.scopedLocals.has(name)) {\r\n      this.currentFunction.program.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        reportNode.range\r\n      );\r\n      return;\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): bool {\r\n    assert(this.parent == null, \"must be the topmost parent flow\");\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    return this.is(FlowFlags.RETURNS);\r\n  }\r\n}\r\n","/**\r\n * @file Shared diagnostic handling inherited by the parser and the compiler.\r\n */\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util/charcode\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\r\n    start--;\r\n  }\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\r\n    end++;\r\n  }\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * @file A thin wrapper around Binaryen's C-API.\r\n */\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n  // TODO: static readonly MAX_MEMORY_WASM64\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): Binary {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new Binary();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nexport function readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nexport function readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nclass Binary {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * @file Abstract syntax tree representing a source file once parsed.\r\n */\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalize as normalizePath,\r\n  resolve as resolvePath\r\n} from \"./util/path\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    if (expression.kind == NodeKind.IDENTIFIER) {\r\n      switch ((<IdentifierExpression>expression).text) {\r\n        case \"global\": {\r\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case \"operator\": {\r\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case \"unmanaged\": {\r\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\r\n          break;\r\n        }\r\n        case \"offset\": {\r\n          stmt.decoratorKind = DecoratorKind.OFFSET;\r\n          break;\r\n        }\r\n        default: {\r\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[], // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode | null;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode | null;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  OFFSET\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented. */\r\n  implementsTypes: TypeNode[]; // can't be a function\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return decorator;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * @file A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n */\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util/charcode\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFomKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFomKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * @file Mappings from AssemblyScript types to WebAssembly types.\r\n */\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n  I8,\r\n  I16,\r\n  I32,\r\n  I64,\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n  U8,\r\n  U16,\r\n  U32,\r\n  U64,\r\n  USIZE,\r\n  BOOL, // sic\r\n\r\n  // floats\r\n  F32,\r\n  F64,\r\n\r\n  // other\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class type, if a class type. */\r\n  classType: Class | null;\r\n  /** Underlying function type, if a function type. */\r\n  functionType: Signature | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classType = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Tests if this type is a class type. */\r\n  get isClass(): bool { return this.classType != null; }\r\n  /** Tests if this type is a function type. */\r\n  get isFunction(): bool { return this.functionType != null; }\r\n  /** Tests if this type is a reference type. */\r\n  get isReference(): bool { return this.classType != null || this.functionType != null; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classType);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classType = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(functionType: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.functionType);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.functionType = functionType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.isReference);\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classType = this.classType;       // either a class reference\r\n      this.nullableType.functionType = this.functionType; // or a function reference\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.isReference) {\r\n      if (target.isReference) {\r\n        if (currentClass = this.classType) {\r\n          if (targetClass = target.classType) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.functionType) {\r\n          if (targetFunction = target.functionType) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.isReference) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) {\r\n      return left;\r\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\r\n      return right;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.functionType;\r\n        return kindOnly || !functionType\r\n          ? \"u32\"\r\n          : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classType;\r\n        return kindOnly || !classType\r\n          ? \"usize\"\r\n          : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    ret[i] = types[i].toNativeType();\r\n  }\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    sb[i] = types[i].toString();\r\n  }\r\n  return sb.join(\", \");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\r\n        return false;\r\n      }\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) {\r\n      return false; // TODO\r\n    }\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // check return type\r\n    return this.returnType.isAssignableTo(target.returnType);\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    var sb = [];\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(thisType.toSignatureString());\r\n    }\r\n    var parameterTypes = this.parameterTypes;\r\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n      sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(this.returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) {\r\n          sb.push((<string[]>names)[i]);\r\n        } else {\r\n          sb.push(getGenericParameterName(i));\r\n        }\r\n        if (i >= optionalStart && i != restIndex) {\r\n          sb.push(\"?: \");\r\n        } else {\r\n          sb.push(\": \");\r\n        }\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * @file The AssemblyScript compiler.\r\n */\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** Memory allocation implementation to use. */\r\n  allocateImpl: string = \"allocate_memory\";\r\n  /** Memory freeing implementation to use. */\r\n  freeImpl: string = \"free_memory\";\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n\r\n  /** Already processed file names. */\r\n  files: Set<string> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) {\r\n        this.compileSource(sources[i]);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\r\n      let funcRef: FunctionRef;\r\n      module.setStart(\r\n        funcRef = module.addFunction(\r\n          startFunctionInstance.internalName,\r\n          typeRef,\r\n          typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n          module.createBlock(null, startFunctionBody)\r\n        )\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        Module.MAX_MEMORY_WASM32, // TODO: not WASM64 compatible yet\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested\r\n    if (options.importMemory) {\r\n      module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n    }\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var sources = this.program.sources;\r\n\r\n    // try file.ts\r\n    var expected = normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try file/index.ts\r\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try (lib)/file.ts\r\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.File_0_not_found,\r\n      reportNode.range, normalizedPathWithoutExtension\r\n    );\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n    var files = this.files;\r\n    var normalizedPath = source.normalizedPath;\r\n    if (files.has(normalizedPath)) return;\r\n    files.add(normalizedPath);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.BUILTIN)) return true;\r\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n\r\n      // resolve now if annotated\r\n      if (declaration.type) {\r\n        let resolvedType = this.program.resolveType(declaration.type); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.type.range\r\n          );\r\n          return false;\r\n        }\r\n        global.type = resolvedType;\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n        initExpr = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.type = this.currentType;\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.DECLARE)) {\r\n\r\n      // constant global\r\n      if (global.is(CommonFlags.CONST)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.namespace\r\n            ? global.namespace.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (global.is(CommonFlags.CONST)) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (global.is(CommonFlags.CONST)) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              global.declaration.range\r\n            );\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(0);\r\n            break;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (declaration.isTopLevel) {     // but keep the element if it might be re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n        if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n          module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !global.is(CommonFlags.CONST), initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, member.internalName);\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!(instance && this.compileFunction(instance))) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    var thisType = signature.thisType;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    for (let i = 0; i < numParameters; ++i, ++index) {\r\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\r\n    }\r\n    var resultType = signature.returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.BUILTIN) || instance.simpleName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.DECLARE)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.DECLARE)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var typeRef = this.ensureFunctionType(instance.signature);\r\n    var module = this.module;\r\n    if (body) {\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let stmt = this.compileStatement(body);\r\n\r\n      // make sure all branches return\r\n      let allBranchesReturn = instance.flow.finalize();\r\n      let returnType = instance.signature.returnType;\r\n      if (returnType != Type.void && !allBranchesReturn) {\r\n        this.error(\r\n          DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n          assert(declaration.signature.returnType, \"return type expected\").range\r\n        );\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let namespace = instance.prototype.namespace;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        namespace\r\n          ? namespace.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n      module.addFunctionExport(instance.internalName, declaration.name.text);\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) {\r\n      flow.set(FlowFlags.RETURNS);\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.POSSIBLY_BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.POSSIBLY_CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      flow.set(FlowFlags.RETURNS);\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      let ret: ExpressionRef;\r\n      if (_BinaryenConstGetValueI32(condExpr)) {\r\n        ret = this.compileStatement(ifTrue);\r\n      } else if (ifFalse) {\r\n        ret = this.compileStatement(ifFalse);\r\n      } else {\r\n        ret = module.createNop();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n    if (ifTrueReturns && ifFalseReturns) { // not necessary to append a hint\r\n      flow.set(FlowFlags.RETURNS);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        currentFunction.signature.returnType\r\n      );\r\n    }\r\n\r\n    // Remember that this flow returns\r\n    currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return this.module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0 && alwaysReturns) {\r\n      currentFunction.flow.set(FlowFlags.RETURNS);\r\n      // Binaryen understands that so we don't need a hint\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch possibly throws\r\n    flow.set(FlowFlags.POSSIBLY_THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          currentFunction.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return 0;\r\n            }\r\n            scopedLocals.set(name, local);\r\n            return 0;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (declaration.is(CommonFlags.LET)) { // here: not top-level\r\n        currentFunction.flow.addScopedLocal(name, type, declaration.name); // reports\r\n      } else {\r\n        currentFunction.addLocal(type, name); // reports\r\n      }\r\n      if (init) {\r\n        initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!_BinaryenConstGetValueI32(condExpr)) {\r\n        return module.createNop();\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate possible always-true conditions\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      case TypeKind.F64: {\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          element.declaration.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL)) {\r\n            expr = makeSmallIntegerWrap(expr, toType, module);\r\n          }\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SMALL) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    switch (expression.operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            // TODO: internal fmod, possibly simply imported from JS\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression, currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var element = resolved.element;\r\n    var elementType: Type;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>element).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>element).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1);\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>element).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\r\n          if (resolved.target && resolved.target.kind == ElementKind.CLASS) {\r\n            if (element.simpleName == (<Class>resolved.target).prototype.fnIndexedGet) {\r\n              let resolvedIndexedSet = (<FunctionPrototype>element).resolve(null); // reports\r\n              if (resolvedIndexedSet) {\r\n                elementType = resolvedIndexedSet.signature.returnType;\r\n                break;\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>resolved.target).toString()\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>element).type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>element).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>element).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) return module.createUnreachable();\r\n        let type = (<Global>element).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = (<Global>element).internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal((<Global>element).internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        assert(resolved.isInstanceTarget);\r\n        let targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          (<Class>resolved.target).type\r\n        );\r\n        let type = (<Field>element).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              targetExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>element).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            targetExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>element).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              assert(resolved.isInstanceTarget);\r\n              let thisArg = this.compileExpression(\r\n                <Expression>resolved.targetExpression,\r\n                (<Class>resolved.target).type\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisArg, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>element).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            let thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisArg),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>element).internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // @operator(\"[]\") ?\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) {\r\n          assert(resolved.isInstanceTarget);\r\n          let getterInstance = (<FunctionPrototype>element).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          // obtain @operator(\"[]=\")\r\n          let setElementName = (<Class>resolved.target).prototype.fnIndexedSet;\r\n          let setElement: Element | null;\r\n          if (\r\n            setElementName != null &&\r\n            (<Class>resolved.target).members &&\r\n            (setElement = (<Map<string,Element>>(<Class>resolved.target).members).get(setElementName)) &&\r\n            setElement.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            let setterInstance = (<FunctionPrototype>setElement).resolve(); // reports\r\n            if (!setterInstance) return module.createUnreachable();\r\n            let targetType = (<Class>resolved.target).type;\r\n            let targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              targetType\r\n            );\r\n            let elementExpr = this.compileExpression(\r\n              (<ElementAccessExpression>expression).elementExpression,\r\n              Type.i32\r\n            );\r\n            if (tee) {\r\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n              let returnType = getterInstance.signature.returnType;\r\n              this.currentFunction.freeTempLocal(tempLocalTarget);\r\n              return module.createBlock(null, [\r\n                this.makeCallDirect(setterInstance, [\r\n                  module.createTeeLocal(tempLocalTarget.index, targetExpr),\r\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                  valueWithCorrectType\r\n                ]),\r\n                this.makeCallDirect(getterInstance, [\r\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n                ])\r\n              ], returnType.toNativeType());\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [\r\n                targetExpr,\r\n                elementExpr,\r\n                valueWithCorrectType\r\n              ]);\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, (<Class>resolved.target).internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (element.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>element;\r\n\r\n        // builtins are compiled on the fly\r\n        if (prototype.is(CommonFlags.BUILTIN)) {\r\n          let expr = compileBuiltinCall( // reports\r\n            this,\r\n            prototype,\r\n            prototype.resolveBuiltinTypeArguments(\r\n              expression.typeArguments,\r\n              currentFunction.contextualTypeArguments\r\n            ),\r\n            expression.arguments,\r\n            contextualType,\r\n            expression\r\n          );\r\n          if (!expr) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          return expr;\r\n\r\n        // otherwise compile to a call\r\n        } else {\r\n          let instance = prototype.resolveUsingTypeArguments( // reports\r\n            expression.typeArguments,\r\n            currentFunction.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return module.createUnreachable();\r\n          let thisArg: ExpressionRef = 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            if (!thisArg) return module.createUnreachable();\r\n          } else {\r\n            assert(!resolved.isInstanceTarget);\r\n          }\r\n          return this.compileCallDirect(instance, expression.arguments, expression, thisArg);\r\n        }\r\n      }\r\n\r\n      // indirect call: index argument with signature\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>element).type.functionType) {\r\n          indexArg = module.createGetLocal((<Local>element).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>element).type.functionType) {\r\n          indexArg = module.createGetGlobal((<Global>element).internalName, (<Global>element).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>element).type;\r\n        if (signature = type.functionType) {\r\n          let targetExpr = this.compileExpression(assert(resolved.targetExpression), type);\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            targetExpr,\r\n            NativeType.I32,\r\n            (<Field>element).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>element).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>element).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = maxOperands - minOperands;\r\n    assert(numOptional);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // append an additional parameter taking the number of optional arguments provided\r\n    var trampolineParameterTypes = new Array<Type>(maxArguments + 1);\r\n    for (let i = 0; i < maxArguments; ++i) {\r\n      trampolineParameterTypes[i] = originalParameterTypes[i];\r\n    }\r\n    trampolineParameterTypes[maxArguments] = Type.i32;\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(trampolineParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments + 1;\r\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.instanceMethodOf);\r\n    trampoline.flags = original.flags;\r\n    trampoline.set(CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. 'with0'\r\n    var names = new Array<string>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = \"N=\" + i.toString();\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"N=invalid\", [\r\n        module.createSwitch(names, \"N=invalid\",\r\n          module.createGetLocal(maxOperands, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var typeRef = this.ensureFunctionType(trampolineSignature);\r\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(instance: Function, operands: ExpressionRef[] | null = null): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    if (numOperands < maxOperands) {\r\n      instance = this.ensureTrampoline(instance);\r\n      if (!this.compileFunction(instance)) return module.createUnreachable();\r\n      if (!operands) {\r\n        operands = new Array(maxOperands + 1);\r\n        operands.length = 0;\r\n      }\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(instance.signature.parameterTypes[i].toNativeZero(module));\r\n      }\r\n      operands.push(module.createI32(numOperands - minOperands));\r\n    }\r\n    var returnType = instance.signature.returnType;\r\n    this.currentType = returnType;\r\n    if (instance.is(CommonFlags.MODULE_IMPORT)) {\r\n      return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    } else {\r\n      return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    }\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(signature: Signature, indexArg: ExpressionRef, operands: ExpressionRef[]): ExpressionRef {\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    this.ensureFunctionType(signature);\r\n    return this.module.createCallIndirect(indexArg, operands, signature.toSignatureString());\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    assert( // should be guaranteed by resolveElementAccess\r\n      resolved.element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n      resolved.target &&\r\n      resolved.target.kind == ElementKind.CLASS\r\n    );\r\n    var target = <Class>resolved.target;\r\n    var instance = (<FunctionPrototype>resolved.element).resolve( // reports\r\n      null,\r\n      target.contextualTypeArguments\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    var thisArg = this.compileExpression(expression.expression, target.type);\r\n    return this.compileCallDirect(instance, [\r\n      expression.elementExpression\r\n    ], expression, thisArg);\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + \"~\" + simpleName,\r\n      declaration\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      currentFunction.contextualTypeArguments,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = Type.u32.asFunction(instance.signature); // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classType) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisType = assert(currentFunction.instanceMethodOf).type;\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let base = assert(currentFunction.instanceMethodOf).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var resolved = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>element, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>element).type;\r\n        let localIndex = (<Local>element).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, expression);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!element.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classType;\r\n        if (\r\n          classType &&\r\n          classType == this.program.elementsLookup.get(\"Array\") &&\r\n          classType.typeArguments && classType.typeArguments.length == 1\r\n        ) {\r\n          return this.compileStaticArray(\r\n            classType.typeArguments[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    // compile as static if all element expressions are precomputable, otherwise\r\n    // initialize in place.\r\n    var isStatic = true;\r\n    var size = expressions.length;\r\n\r\n    var module = this.module;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(size));\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(size));\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(size));\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(size));\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var exprs = new Array<ExpressionRef>(size);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < size; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isStatic) {\r\n      // TODO: convert to Uint8Array and create the segment\r\n    } else {\r\n      // TODO: initialize in place\r\n    }\r\n    // TODO: alternatively, static elements could go into data segments while\r\n    // dynamic ones are initialized on top? any benefits? (doesn't seem so)\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var resolved = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (resolved) {\r\n      if (resolved.element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let prototype = <ClassPrototype>resolved.element;\r\n        let instance = prototype.resolveUsingTypeArguments( // reports\r\n          expression.typeArguments,\r\n          null,\r\n          expression\r\n        );\r\n        if (instance) {\r\n          let thisExpr = compileBuiltinAllocate(this, instance, expression);\r\n          let initializers = new Array<ExpressionRef>();\r\n\r\n          // use a temp local for 'this'\r\n          let tempLocal = currentFunction.getTempLocal(options.usizeType);\r\n          initializers.push(module.createSetLocal(tempLocal.index, thisExpr));\r\n\r\n          // apply field initializers\r\n          if (instance.members) {\r\n            for (let member of instance.members.values()) {\r\n              if (member.kind == ElementKind.FIELD) {\r\n                let field = <Field>member;\r\n                let fieldDeclaration = field.prototype.declaration;\r\n                if (field.is(CommonFlags.CONST)) {\r\n                  assert(false); // there are no built-in fields currently\r\n                } else if (fieldDeclaration && fieldDeclaration.initializer) {\r\n                  initializers.push(module.createStore(field.type.byteSize,\r\n                    module.createGetLocal(tempLocal.index, options.nativeSizeType),\r\n                    this.compileExpression(fieldDeclaration.initializer, field.type),\r\n                    field.type.toNativeType(),\r\n                    field.memoryOffset\r\n                  ));\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // apply constructor\r\n          let constructorInstance = instance.constructorInstance;\r\n          if (constructorInstance) {\r\n            initializers.push(this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n              module.createGetLocal(tempLocal.index, options.nativeSizeType)\r\n            ));\r\n          }\r\n\r\n          // return 'this'\r\n          initializers.push(module.createGetLocal(tempLocal.index, options.nativeSizeType));\r\n          currentFunction.freeTempLocal(tempLocal);\r\n          thisExpr = module.createBlock(null, initializers, options.nativeSizeType);\r\n\r\n          this.currentType = instance.type;\r\n          return thisExpr;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n          expression.expression.range\r\n        );\r\n      }\r\n    }\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var resolved = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var targetExpr: ExpressionRef;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, propertyAccess);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        if (!this.compileEnum((<EnumValue>element).enum)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert(resolved.isInstanceTarget);\r\n        assert((<Field>element).memoryOffset >= 0);\r\n        targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          this.options.usizeType,\r\n          ConversionKind.NONE\r\n        );\r\n        this.currentType = (<Field>element).type;\r\n        return module.createLoad(\r\n          (<Field>element).type.size >> 3,\r\n          (<Field>element).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          targetExpr,\r\n          (<Field>element).type.toNativeType(),\r\n          (<Field>element).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>element).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.instanceMethodOf) {\r\n            targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              instance.instanceMethodOf.type\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, targetExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>element).simpleName, (<Property>element).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      return _BinaryenConstGetValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n    var ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression(\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.isReference) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.isReference) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.isReference) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.isReference) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * @file Minimalistic path utility for normalizing and resolving relative paths.\r\n */\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalize(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolve(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalize(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/**\r\n * @file Character code utility.\r\n */\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","// code below is generated from diagnosticsMessages.json by scripts/build-diagnostics\n/* tslint:disable:max-line-length */\n\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * @file A TypeScript parser for the AssemblyScript subset.\r\n */\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalize as normalizePath\r\n} from \"./util/path\";\r\n\r\nimport {\r\n\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n  CommentKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n\r\n  currentDeclareStart: i32 = 0;\r\n  currentDeclareEnd: i32 = 0;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].normalizedPath == normalizedPath) return;\r\n    }\r\n    this.seenlog.add(normalizedPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    isNamespaceMember: bool = false\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      let name = decorator.name;\r\n      if (name.kind == NodeKind.IDENTIFIER) {\r\n        let text = (<IdentifierExpression>name).text;\r\n        if (text == \"global\") {\r\n          flags |= CommonFlags.GLOBAL;\r\n          continue;\r\n        }\r\n        if (text == \"builtin\") {\r\n          flags |= CommonFlags.BUILTIN;\r\n          continue;\r\n        }\r\n        if (text == \"unmananged\") {\r\n          flags |= CommonFlags.UNMANAGED;\r\n          continue;\r\n        }\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.DECLARE;\r\n      this.currentDeclareStart = declareStart = tn.tokenPos;\r\n      this.currentDeclareEnd = declareEnd = tn.pos;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS: {\r\n        tn.next();\r\n        statement = this.parseClass(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!isNamespaceMember) {\r\n            statement = this.parseStatement(tn, true);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.DECLARE)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    suppressErrors: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: '...'? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      isRest = true;\r\n      startRange = tn.range();\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      return Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    if (flags & CommonFlags.DECLARE) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range(this.currentDeclareStart, this.currentDeclareEnd)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.AMBIENT;\r\n      }\r\n    }\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClass(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at 'class':\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes = new Array<TypeNode>();\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        implementsTypes.push(<TypeNode>type);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (flags & CommonFlags.DECLARE) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range(this.currentDeclareStart, this.currentDeclareEnd)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.AMBIENT;\r\n      }\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, flags);\r\n        if (!member) return null;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassDeclaration(\r\n      identifier,\r\n      typeParameters,\r\n      extendsType,\r\n      implementsTypes,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parentFlags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parentFlags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn);\r\n      if (!parameters) return null;\r\n\r\n      if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, true);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        }\r\n        let ret = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      if (ret.normalizedPath && !this.seenlog.has(<string>ret.normalizedPath)) {\r\n        this.backlog.push(<string>ret.normalizedPath);\r\n        this.seenlog.add(<string>ret.normalizedPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        if (!this.seenlog.has(ret.normalizedPath)) {\r\n          this.backlog.push(ret.normalizedPath);\r\n          this.seenlog.add(ret.normalizedPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * @file Common text utilities.\r\n */\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/**\r\n * @file Definition builders for WebIDL and TypeScript.\r\n */\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Function,\r\n  Class,\r\n  Namespace,\r\n  FunctionPrototype,\r\n  ClassPrototype,\r\n  ConstantValueKind,\r\n  Interface\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util/text\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program) {\r\n    this.program = program;\r\n  }\r\n\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) {\r\n      this.visitElement(element);\r\n    }\r\n  }\r\n\r\n  visitElement(element: Element): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitEnum(<Enum>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitFunction(<Function>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitClass(<Class>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\r\n          this.visitNamespace(<Namespace>element);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) {\r\n            sb.push(\"const \");\r\n          } else {\r\n            sb.push(\"readonly \");\r\n          }\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) {\r\n          this.visitElement(member);\r\n        }\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          this.seen.add(member);\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) {\r\n        this.visitNamespace(element);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"function \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    sb.push(\"): \");\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    members = element.members; // instance\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\r\n","/**\r\n * @file A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n */\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * @file Low-level C-like compiler API.\r\n */\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) {\r\n    parser = new Parser();\r\n    isEntry = true;\r\n  }\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * @file I64 implementation for JavaScript using long.js.\r\n * @see https://github.com/dcodeIO/long.js\r\n */\r\n\r\nconst Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/**\r\n * @file Built-in elements providing otherwise hard-to-implement functionality.\r\n */\r\n\r\nimport {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  Expression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  Global,\r\n  FunctionPrototype,\r\n  Local,\r\n  Class,\r\n  ElementKind,\r\n  ClassPrototype\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(\r\n  compiler: Compiler,\r\n  global: Global,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (global.internalName) {\r\n    case \"NaN\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(NaN);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(NaN);\r\n      }\r\n    }\r\n    case \"Infinity\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(Infinity);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(Infinity);\r\n      }\r\n    }\r\n    case \"HEAP_BASE\": { // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  var tempLocal0: Local,\r\n      tempLocal1: Local;\r\n\r\n  var type: Type,\r\n      offset: i32;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classType;\r\n      if (classType) {\r\n        let stringPrototype = compiler.program.elementsLookup.get(\"String\");\r\n        if (stringPrototype) {\r\n          assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n          let stringInstance = (<ClassPrototype>stringPrototype).resolve(null);\r\n          if (!stringInstance) return module.createUnreachable();\r\n          if (classType.isAssignableTo(stringInstance)) {\r\n            return module.createI32(1);\r\n          }\r\n        }\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classType;\r\n      return classType != null && classType.prototype.fnIndexedGet != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createBinary(BinaryOp.NeF32,\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createBinary(BinaryOp.NeF64,\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF32,\r\n              module.createUnary(UnaryOp.AbsF32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              module.createF32(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32),\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF64,\r\n              module.createUnary(UnaryOp.AbsF64,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              module.createF64(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64),\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        ret = compiler.options.isWasm64\r\n          ? module.createI64(typeArguments[0].byteSize, 0)\r\n          : module.createI32(typeArguments[0].byteSize);\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], type = compiler.currentType);\r\n      arg2 = compiler.compileExpression(operands[2], Type.bool);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal0.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal0.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  cls: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(cls.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var prototype = program.elementsLookup.get(options.allocateImpl);\r\n  if (!prototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, options.allocateImpl\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (prototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, prototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var instance = (<FunctionPrototype>prototype).resolve(); // reports\r\n  if (!(instance && compiler.compileFunction(instance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = cls.type;\r\n  return module.createCall(\r\n    instance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(cls.currentMemoryOffset)\r\n        : module.createI32(cls.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(\"abort\"); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/**\r\n * @file Glue code for linking Binaryen with AssemblyScript.\r\n */\r\n\r\n// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","/**\r\n * @file Environment implementation for compiling AssemblyScript to JavaScript using tsc.\r\n */\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n","/**\r\n * @file JavaScript glue code.\r\n */\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\n"],"sourceRoot":""}
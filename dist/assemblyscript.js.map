{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","sources","__extends","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","k","length","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","resolved","resolveIdentifier","ElementKind","CLASS_PROTOTYPE","A_class_may_only_extend_another_class","basePrototype","checkInternalDecorators","parentNode","is","CommonFlags","GLOBAL","source","isLibrary","SOURCE","simpleName","has","Duplicate_identifier_0","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","programLevelInternalName","instance","resolve","type","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","alias","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","resolvedElement","ResolvedElement","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","resolveExpression","targetType","target","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","withTarget","base","resolveElementAccess","elementAccess","indexedGetName","indexedGet","FUNCTION_PROTOTYPE","Index_signature_is_missing_in_type_0","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","memberOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","apply","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","contextualTypeArguments_1","contextualTypeArguments_1_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_c","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","partialGetterPrototype","partialSetterPrototype","asClass","_b","baseType","isAssignableTo","current","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","enterBranchOrScope","branchFlow","leaveBranchOrScope","scopedLocal","addScopedLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","normalizedPath","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","g","eval","e","window","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPE","TYPEPARAMETER","PARAMETER","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","nullableType","ceil","nonNullableType","computeSmallIntegerShift","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","memoryBase","ConversionKind","Compiler","startFunctionBody","currentEnum","currentType","memorySegments","stringSegments","functionTable","files","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","typeRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","entries","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","COMPILED","AMBIENT","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","allBranchesReturn","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifFalseExpr","ifFalseReturns","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","resolvedIndexedSet","valueExpr","valueWithCorrectType","tee","isInstanceTarget","targetExpr","setterInstance","thisArg","makeCallDirect","getterInstance","nativeReturnType","setElementName","setElement","elementExpr","tempLocalTarget","tempLocalElement","Index_signature_in_type_0_only_permits_reading","indexArg","compileCall","compileCallDirect","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","numArgumentsInclThis","ensureTrampoline","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","nativeSizeType","trampolineParameterTypes","trampolineSignature","trampolineName","numOperands","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_i16","i64_is_i32","i64_is_u8","i64_is_u16","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayPrototype","arrayType","memorySize","elementSize","Int32Array","Float32Array","Float64Array","usizeTypeSize","headerSize","writeI64","writeI32","writeF32","writeF64","thisExpr","compileAllocate","field","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","ifThenExpr","ifElseExpr","nativeOne","setValue","getValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClass","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","isConstructor","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","Unreachable","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setSourceMap","setMemoryBase","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","evaluateConstantOffset","compiler","NaN","Infinity","tempLocal0","tempLocal1","Type_0_is_not_generic","stringPrototype","stringInstance","abort","compileAbort","allocateInternalName","abortPrototype","abortInstance","messageArg","filenameArg","cls","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","off","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","sqrt","trunc","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray"],"mappings":"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,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  // ParameterNode,\r\n  // ParameterKind,\r\n  // SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ParameterKind,\r\n  SignatureNode\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"(lib)\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedDerivedClasses = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let resolved = this.resolveIdentifier(derivedType.name, null);\r\n      if (resolved) {\r\n        if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n          this.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            derivedType.range\r\n          );\r\n          continue;\r\n        }\r\n        queuedDerivedClasses[i].basePrototype = (\r\n          <ClassPrototype>resolved.element\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  /** Processes internal decorators, if present. */\r\n  private checkInternalDecorators(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      element.is(CommonFlags.GLOBAL) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        element.set(CommonFlags.GLOBAL);\r\n        this.elementsLookup.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedDerivedClasses: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    var numImplementsTypes = implementsTypes.length;\r\n    if (prototype.is(CommonFlags.UNMANAGED)) {\r\n      if (implementsTypes && numImplementsTypes) {\r\n        this.error(\r\n          DiagnosticCode.Structs_cannot_implement_interfaces,\r\n          Range.join(\r\n            declaration.name.range,\r\n            implementsTypes[numImplementsTypes - 1].range\r\n          )\r\n        );\r\n      }\r\n    } else if (numImplementsTypes) {\r\n      for (let i = 0; i < numImplementsTypes; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          implementsTypes[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) {\r\n      queuedDerivedClasses.push(prototype);\r\n    }\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        if (prototype.is(CommonFlags.EXPORT)) {\r\n          prototype.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    // check and possibly register string type\r\n    if (\r\n      prototype.is(CommonFlags.GLOBAL) &&\r\n      declaration.name.text == \"String\"\r\n    ) {\r\n      if (!this.typesLookup.has(\"string\")) {\r\n        let instance = prototype.resolve(null);\r\n        if (instance) this.typesLookup.set(\"string\", instance.type);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, declaration.programLevelInternalName\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        declaration,\r\n        Type.void\r\n      );\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperators(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          if (!prototype) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              decorator.range\r\n            );\r\n            continue;\r\n          }\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              switch ((<StringLiteralExpression>firstArg).value) {\r\n                case \"[]\": {\r\n                  classPrototype.fnIndexedGet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"[]=\": {\r\n                  classPrototype.fnIndexedSet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"+\": {\r\n                  classPrototype.fnConcat = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"==\": {\r\n                  classPrototype.fnEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                default: {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\r\n          // methods support built-in @operator only\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            decorator.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.namespace = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkInternalDecorators(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (isModuleExport) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtendingClasses: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.namespace = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkInternalDecorators(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        Type.void // resolved later on\r\n      );\r\n      global.namespace = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkInternalDecorators(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): ResolvedElement | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.namespace) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(element);\r\n          }\r\n        } while (namespace = namespace.namespace);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    resolvedElement = this.resolveExpression( // reports\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n    var targetType: Type;\r\n    var member: Element | null;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        if (!(targetType = (<VariableLikeElement>target).type).classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        if (!(targetType = getter.signature.returnType).classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classReference;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          if (target.members && (member = target.members.get(propertyName))) {\r\n            return resolvedElement.set(member).withTarget(target, targetExpression);\r\n          }\r\n          // check inherited static members on the base prototype while target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // or inherited instance members on the base class while target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        if (target.members && (member = target.members.get(propertyName))) {\r\n          return resolvedElement.set(member).withTarget(target, targetExpression);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = elementAccess.expression;\r\n    resolvedElement = this.resolveExpression(\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (type.classReference) {\r\n          let indexedGetName = (target = type.classReference).prototype.fnIndexedGet;\r\n          let indexedGet: Element | null;\r\n          if (\r\n            indexedGetName != null &&\r\n            target.members &&\r\n            (indexedGet = target.members.get(indexedGetName)) &&\r\n            indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            return resolvedElement.set(indexedGet).withTarget(type.classReference, targetExpression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n      targetExpression.range, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(classType);\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(parent);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(parent);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let resolved = this.resolveExpression(\r\n          (<CallExpression>expression).expression,\r\n          contextualFunction\r\n        );\r\n        if (resolved) {\r\n          let element = resolved.element;\r\n          if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n            let instance = (<FunctionPrototype>element).resolveUsingTypeArguments(\r\n              (<CallExpression>expression).typeArguments,\r\n              contextualFunction.contextualTypeArguments,\r\n              expression\r\n            );\r\n            if (instance) {\r\n              let returnType = instance.signature.returnType;\r\n              let classType = returnType.classReference;\r\n              if (classType) {\r\n                if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                return resolvedElement.set(classType);\r\n              } else {\r\n                let signature = returnType.signatureReference;\r\n                if (signature) {\r\n                  let functionTarget = signature.cachedFunctionTarget;\r\n                  if (!functionTarget) {\r\n                    functionTarget = new FunctionTarget(this, signature);\r\n                    signature.cachedFunctionTarget = functionTarget;\r\n                  }\r\n                  if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                  return resolvedElement.set(functionTarget);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\r\nexport class ResolvedElement {\r\n\r\n  /** The target element, if a property or element access */\r\n  target: Element | null;\r\n  /** The target element's expression, if a property or element access. */\r\n  targetExpression: Expression | null;\r\n  /** The element being accessed. */\r\n  element: Element;\r\n\r\n  /** Clears the target and sets the resolved element. */\r\n  set(element: Element): this {\r\n    this.target = null;\r\n    this.targetExpression = null;\r\n    this.element = element;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the resolved target in addition to the previously set element. */\r\n  withTarget(target: Element, targetExpression: Expression): this {\r\n    this.target = target;\r\n    this.targetExpression = targetExpression;\r\n    return this;\r\n  }\r\n\r\n  /** Tests if the target is a valid instance target. */\r\n  get isInstanceTarget(): bool {\r\n    return (\r\n      this.target != null &&\r\n      this.target.kind == ElementKind.CLASS &&\r\n      this.targetExpression != null\r\n    );\r\n  }\r\n}\r\n\r\n// Cached result structure instance\r\nvar resolvedElement: ResolvedElement | null;\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Internal decorators\r\n\r\n  /** Is global. */\r\n  GLOBAL = 1 << 13,\r\n  /** Is built-in. */\r\n  BUILTIN = 1 << 14,\r\n  /** Is unmanaged. */\r\n  UNMANAGED = 1 << 15,\r\n\r\n  // Extended modifiers usually derived from basic modifiers or internal decorators\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 16,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 17,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 18,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 19,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 20,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 21,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 22,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 23,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 24,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 25,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 26\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent namespace, if applicable. */\r\n  namespace: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Parent enum. */\r\n  enum: Enum;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.enum = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: VariableLikeDeclarationStatement,\r\n    type: Type\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n\r\n  constructor(program: Program, simpleName: string, index: i32, type: Type) {\r\n    super(program, simpleName, simpleName);\r\n    this.index = index;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET) || this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = Type.void; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(this, internalName, signature, classInstance ? classInstance : classPrototype);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(this.classPrototype);\r\n    if (classTypeArguments && classTypeArguments.length) {\r\n      let partialPrototype = new FunctionPrototype(\r\n        this.program,\r\n        this.simpleName,\r\n        this.internalName,\r\n        this.declaration,\r\n        this.classPrototype\r\n      );\r\n      partialPrototype.flags = this.flags;\r\n      partialPrototype.classTypeArguments = classTypeArguments;\r\n      return partialPrototype;\r\n    }\r\n    return this; // no need to clone\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** If a member of another namespace-like element, the concrete element it is a member of. */\r\n  memberOf: Element | null;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    memberOf: Element | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.memberOf = memberOf;\r\n    this.flags = prototype.flags;\r\n    if (!(prototype.is(CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (memberOf && memberOf.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        let contextualTypeArguments = (<Class>memberOf).contextualTypeArguments;\r\n        if (contextualTypeArguments) {\r\n          if (!this.contextualTypeArguments) {\r\n            this.contextualTypeArguments = new Map();\r\n          }\r\n          for (let [inheritedName, inheritedType] of contextualTypeArguments) {\r\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(prototype: FieldPrototype, internalName: string, type: Type) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Overloaded indexed get method, if any. */\r\n  fnIndexedGet: string | null = null;\r\n  /** Overloaded indexed set method, if any. */\r\n  fnIndexedSet: string | null = null;\r\n  /** Overloaded concatenation method, if any. */\r\n  fnConcat: string | null = null;\r\n  /** Overloaded equality comparison method, if any. */\r\n  fnEquals: string | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) {\r\n        instance.constructorInstance = partialConstructor.resolve(); // reports\r\n      }\r\n      // TODO: ^ doesn't know the return type, hence returns null\r\n    }\r\n\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\r\n            if (!instance.members) instance.members = new Map();\r\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (methodPrototype) {\r\n              methodPrototype.internalName = internalName + INSTANCE_DELIMITER + methodPrototype.simpleName;\r\n              instance.members.set(member.simpleName, methodPrototype);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n    instance.currentMemoryOffset = memoryOffset; // sizeof<this>() is its byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      if (base.contextualTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do {\r\n      if (current == target) {\r\n        return true;\r\n      }\r\n    } while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.prototype.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName, declaration);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch possibly throws. */\r\n  POSSIBLY_THROWS = 1 << 1,\r\n  /** This branch possible breaks. */\r\n  POSSIBLY_BREAKS = 1 << 2,\r\n  /** This branch possible continues. */\r\n  POSSIBLY_CONTINUES = 1 << 3\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branchFlow = new Flow();\r\n    branchFlow.parent = this;\r\n    branchFlow.flags = this.flags;\r\n    branchFlow.currentFunction = this.currentFunction;\r\n    branchFlow.continueLabel = this.continueLabel;\r\n    branchFlow.breakLabel = this.breakLabel;\r\n    return branchFlow;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.POSSIBLY_THROWS)) {\r\n      parent.set(FlowFlags.POSSIBLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.POSSIBLY_BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.POSSIBLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.POSSIBLY_CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.POSSIBLY_CONTINUES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, reportNode: Node): void {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else if (this.scopedLocals.has(name)) {\r\n      this.currentFunction.program.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        reportNode.range\r\n      );\r\n      return;\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): bool {\r\n    assert(this.parent == null, \"must be the topmost parent flow\");\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    return this.is(FlowFlags.RETURNS);\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\r\n    start--;\r\n  }\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\r\n    end++;\r\n  }\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    if (expression.kind == NodeKind.IDENTIFIER) {\r\n      switch ((<IdentifierExpression>expression).text) {\r\n        case \"global\": {\r\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case \"operator\": {\r\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case \"unmanaged\": {\r\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\r\n          break;\r\n        }\r\n        case \"offset\": {\r\n          stmt.decoratorKind = DecoratorKind.OFFSET;\r\n          break;\r\n        }\r\n        default: {\r\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[], // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  OFFSET\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented. */\r\n  implementsTypes: TypeNode[]; // can't be a function\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return decorator;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFomKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFomKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying function reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classReference = this.classReference;       // either a class reference\r\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) {\r\n      return left;\r\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\r\n      return right;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType\r\n          ? \"u32\"\r\n          : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType\r\n          ? \"usize\"\r\n          : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    ret[i] = types[i].toNativeType();\r\n  }\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    sb[i] = types[i].toString();\r\n  }\r\n  return sb.join(\", \");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\r\n        return false;\r\n      }\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) {\r\n      return false; // TODO\r\n    }\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    var sb = [];\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(thisType.toSignatureString());\r\n    }\r\n    var parameterTypes = this.parameterTypes;\r\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n      sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(this.returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) {\r\n          sb.push((<string[]>names)[i]);\r\n        } else {\r\n          sb.push(getGenericParameterName(i));\r\n        }\r\n        if (i >= optionalStart && i != restIndex) {\r\n          sb.push(\"?: \");\r\n        } else {\r\n          sb.push(\": \");\r\n        }\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n\r\n  /** Already processed file names. */\r\n  files: Set<string> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) {\r\n        this.compileSource(sources[i]);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\r\n      let funcRef: FunctionRef;\r\n      module.setStart(\r\n        funcRef = module.addFunction(\r\n          startFunctionInstance.internalName,\r\n          typeRef,\r\n          typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n          module.createBlock(null, startFunctionBody)\r\n        )\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested\r\n    if (options.importMemory) {\r\n      module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n    }\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var sources = this.program.sources;\r\n\r\n    // try file.ts\r\n    var expected = normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try file/index.ts\r\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try (lib)/file.ts\r\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.File_0_not_found,\r\n      reportNode.range, normalizedPathWithoutExtension\r\n    );\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n    var files = this.files;\r\n    var normalizedPath = source.normalizedPath;\r\n    if (files.has(normalizedPath)) return;\r\n    files.add(normalizedPath);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n\r\n      // resolve now if annotated\r\n      if (declaration.type) {\r\n        let resolvedType = this.program.resolveType(declaration.type); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.type.range\r\n          );\r\n          return false;\r\n        }\r\n        global.type = resolvedType;\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n        initExpr = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.type = this.currentType;\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.namespace\r\n            ? global.namespace.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              global.declaration.range\r\n            );\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(0);\r\n            break;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (declaration.isTopLevel) {    // but keep the element as it might be re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n        if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n          module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, member.internalName);\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!(instance && this.compileFunction(instance))) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    var thisType = signature.thisType;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    for (let i = 0; i < numParameters; ++i, ++index) {\r\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\r\n    }\r\n    var resultType = signature.returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.simpleName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var typeRef = this.ensureFunctionType(instance.signature);\r\n    var module = this.module;\r\n    if (body) {\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\r\n        flow.set(FlowFlags.RETURNS);\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        // make sure all branches return\r\n        let allBranchesReturn = flow.finalize();\r\n        if (returnType != Type.void && !allBranchesReturn) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let namespace = instance.prototype.namespace;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        namespace\r\n          ? namespace.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n      module.addFunctionExport(instance.internalName, declaration.name.text);\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) {\r\n      flow.set(FlowFlags.RETURNS);\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.POSSIBLY_BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.POSSIBLY_CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      flow.set(FlowFlags.RETURNS);\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      let ret: ExpressionRef;\r\n      if (_BinaryenConstGetValueI32(condExpr)) {\r\n        ret = this.compileStatement(ifTrue);\r\n      } else if (ifFalse) {\r\n        ret = this.compileStatement(ifFalse);\r\n      } else {\r\n        ret = module.createNop();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n    if (ifTrueReturns && ifFalseReturns) { // not necessary to append a hint\r\n      flow.set(FlowFlags.RETURNS);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        currentFunction.signature.returnType\r\n      );\r\n    }\r\n\r\n    // Remember that this flow returns\r\n    currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return this.module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0 && alwaysReturns) {\r\n      currentFunction.flow.set(FlowFlags.RETURNS);\r\n      // Binaryen understands that so we don't need a hint\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch possibly throws\r\n    flow.set(FlowFlags.POSSIBLY_THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          currentFunction.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return 0;\r\n            }\r\n            scopedLocals.set(name, local);\r\n            return 0;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (declaration.is(CommonFlags.LET)) { // here: not top-level\r\n        currentFunction.flow.addScopedLocal(name, type, declaration.name); // reports\r\n      } else {\r\n        currentFunction.addLocal(type, name); // reports\r\n      }\r\n      if (init) {\r\n        initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!_BinaryenConstGetValueI32(condExpr)) {\r\n        return module.createNop();\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate possible always-true conditions\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      case TypeKind.F64: {\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          element.declaration.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL)) {\r\n            expr = makeSmallIntegerWrap(expr, toType, module);\r\n          }\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SMALL) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    switch (expression.operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            // TODO: internal fmod, possibly simply imported from JS\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression, currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var element = resolved.element;\r\n    var elementType: Type;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>element).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>element).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1);\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>element).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\r\n          if (resolved.target && resolved.target.kind == ElementKind.CLASS) {\r\n            if (element.simpleName == (<Class>resolved.target).prototype.fnIndexedGet) {\r\n              let resolvedIndexedSet = (<FunctionPrototype>element).resolve(null); // reports\r\n              if (resolvedIndexedSet) {\r\n                elementType = resolvedIndexedSet.signature.returnType;\r\n                break;\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>resolved.target).toString()\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>element).type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>element).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>element).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) return module.createUnreachable();\r\n        let type = (<Global>element).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = (<Global>element).internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal((<Global>element).internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        assert(resolved.isInstanceTarget);\r\n        let targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          (<Class>resolved.target).type\r\n        );\r\n        let type = (<Field>element).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              targetExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>element).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            targetExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>element).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              assert(resolved.isInstanceTarget);\r\n              let thisArg = this.compileExpression(\r\n                <Expression>resolved.targetExpression,\r\n                (<Class>resolved.target).type\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisArg, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>element).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            let thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisArg),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>element).internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // @operator(\"[]\") ?\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) {\r\n          assert(resolved.isInstanceTarget);\r\n          let getterInstance = (<FunctionPrototype>element).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          // obtain @operator(\"[]=\")\r\n          let setElementName = (<Class>resolved.target).prototype.fnIndexedSet;\r\n          let setElement: Element | null;\r\n          if (\r\n            setElementName != null &&\r\n            (<Class>resolved.target).members &&\r\n            (setElement = (<Map<string,Element>>(<Class>resolved.target).members).get(setElementName)) &&\r\n            setElement.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            let setterInstance = (<FunctionPrototype>setElement).resolve(); // reports\r\n            if (!setterInstance) return module.createUnreachable();\r\n            let targetType = (<Class>resolved.target).type;\r\n            let targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              targetType\r\n            );\r\n            let elementExpr = this.compileExpression(\r\n              (<ElementAccessExpression>expression).elementExpression,\r\n              Type.i32\r\n            );\r\n            if (tee) {\r\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n              let returnType = getterInstance.signature.returnType;\r\n              this.currentFunction.freeTempLocal(tempLocalTarget);\r\n              return module.createBlock(null, [\r\n                this.makeCallDirect(setterInstance, [\r\n                  module.createTeeLocal(tempLocalTarget.index, targetExpr),\r\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                  valueWithCorrectType\r\n                ]),\r\n                this.makeCallDirect(getterInstance, [\r\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n                ])\r\n              ], returnType.toNativeType());\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [\r\n                targetExpr,\r\n                elementExpr,\r\n                valueWithCorrectType\r\n              ]);\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, (<Class>resolved.target).internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (element.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>element;\r\n\r\n        // builtins are compiled on the fly\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          let expr = compileBuiltinCall( // reports\r\n            this,\r\n            prototype,\r\n            prototype.resolveBuiltinTypeArguments(\r\n              expression.typeArguments,\r\n              currentFunction.contextualTypeArguments\r\n            ),\r\n            expression.arguments,\r\n            contextualType,\r\n            expression\r\n          );\r\n          if (!expr) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          return expr;\r\n\r\n        // otherwise compile to a call\r\n        } else {\r\n          let instance = prototype.resolveUsingTypeArguments( // reports\r\n            expression.typeArguments,\r\n            currentFunction.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return module.createUnreachable();\r\n          let thisArg: ExpressionRef = 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            if (!thisArg) return module.createUnreachable();\r\n          } else {\r\n            assert(!resolved.isInstanceTarget);\r\n          }\r\n          return this.compileCallDirect(instance, expression.arguments, expression, thisArg);\r\n        }\r\n      }\r\n\r\n      // indirect call: index argument with signature\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>element).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>element).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>element).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>element).internalName, (<Global>element).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>element).type;\r\n        if (signature = type.signatureReference) {\r\n          let targetExpr = this.compileExpression(assert(resolved.targetExpression), type);\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            targetExpr,\r\n            NativeType.I32,\r\n            (<Field>element).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>element).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>element).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = maxOperands - minOperands;\r\n    assert(numOptional);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // append an additional parameter taking the number of optional arguments provided\r\n    var trampolineParameterTypes = new Array<Type>(maxArguments + 1);\r\n    for (let i = 0; i < maxArguments; ++i) {\r\n      trampolineParameterTypes[i] = originalParameterTypes[i];\r\n    }\r\n    trampolineParameterTypes[maxArguments] = Type.i32;\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(trampolineParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments + 1;\r\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.memberOf);\r\n    trampoline.flags = original.flags;\r\n    trampoline.contextualTypeArguments = original.contextualTypeArguments;\r\n    trampoline.set(CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. 'with0'\r\n    var names = new Array<string>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = \"N=\" + i.toString();\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"N=invalid\", [\r\n        module.createSwitch(names, \"N=invalid\",\r\n          module.createGetLocal(maxOperands, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var typeRef = this.ensureFunctionType(trampolineSignature);\r\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(instance: Function, operands: ExpressionRef[] | null = null): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    if (numOperands < maxOperands) {\r\n      instance = this.ensureTrampoline(instance);\r\n      if (!this.compileFunction(instance)) return module.createUnreachable();\r\n      if (!operands) {\r\n        operands = new Array(maxOperands + 1);\r\n        operands.length = 0;\r\n      }\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(instance.signature.parameterTypes[i].toNativeZero(module));\r\n      }\r\n      operands.push(module.createI32(numOperands - minOperands));\r\n    }\r\n    var returnType = instance.signature.returnType;\r\n    this.currentType = returnType;\r\n    if (instance.is(CommonFlags.MODULE_IMPORT)) {\r\n      return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    } else {\r\n      return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    }\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(signature: Signature, indexArg: ExpressionRef, operands: ExpressionRef[]): ExpressionRef {\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    this.ensureFunctionType(signature);\r\n    return this.module.createCallIndirect(indexArg, operands, signature.toSignatureString());\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    assert( // should be guaranteed by resolveElementAccess\r\n      resolved.element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n      resolved.target &&\r\n      resolved.target.kind == ElementKind.CLASS\r\n    );\r\n    var target = <Class>resolved.target;\r\n    var instance = (<FunctionPrototype>resolved.element).resolve( // reports\r\n      null,\r\n      target.contextualTypeArguments\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    var thisArg = this.compileExpression(expression.expression, target.type);\r\n    return this.compileCallDirect(instance, [\r\n      expression.elementExpression\r\n    ], expression, thisArg);\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + \"~\" + simpleName,\r\n      declaration\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      currentFunction.contextualTypeArguments,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var resolved = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>element, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>element).type;\r\n        let localIndex = (<Local>element).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, expression);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!element.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>element).resolve(\r\n          null,\r\n          this.currentFunction.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.elementsLookup.get(\"Array\")\r\n        ) {\r\n          return this.compileStaticArray(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.elementsLookup.get(\"Array\"));\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayType) return module.createUnreachable();\r\n\r\n    var elementSize = expressions.length;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    var memorySize: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // precompute value expressions\r\n    var exprs = new Array<ExpressionRef>(elementSize);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < elementSize; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n    var headerSize = usizeTypeSize + 4 + 4; // memory + capacity + length\r\n\r\n    if (isStatic) {\r\n      let buffer = new Uint8Array(headerSize + memorySize);\r\n      let segment = this.addMemorySegment(buffer);\r\n\r\n      // make header\r\n      let offset = 0;\r\n      if (usizeTypeSize == 8) {\r\n        writeI64(i64_add(segment.offset, i64_new(headerSize)), buffer, 0); // memory\r\n      } else {\r\n        assert(i64_high(segment.offset) == 0);\r\n        writeI32(i64_low(segment.offset) + headerSize, buffer, 0); // memory\r\n      }\r\n      offset += usizeTypeSize;\r\n      writeI32(elementSize, buffer, offset); // capacity\r\n      offset += 4;\r\n      writeI32(elementSize, buffer, offset); // length\r\n      offset += 4;\r\n      assert(offset == headerSize);\r\n\r\n      // make memory\r\n      switch (nativeType) {\r\n        case NativeType.I32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI32(changetype<i32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI64(changetype<I64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF32(changetype<f32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF64(changetype<f64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      assert(offset == headerSize + memorySize);\r\n      this.currentType = arrayType.type;\r\n      return usizeTypeSize == 8\r\n        ? module.createI64(\r\n            i64_low(segment.offset),\r\n            i64_high(segment.offset)\r\n          )\r\n        : module.createI32(\r\n            i64_low(segment.offset)\r\n          );\r\n    } else {\r\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\r\n      // on top? any benefits?\r\n      throw new Error(\"not implemented\");\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var resolved = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (resolved) {\r\n      if (resolved.element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let prototype = <ClassPrototype>resolved.element;\r\n        let instance = prototype.resolveUsingTypeArguments( // reports\r\n          expression.typeArguments,\r\n          null,\r\n          expression\r\n        );\r\n        if (instance) {\r\n          let thisExpr = compileBuiltinAllocate(this, instance, expression);\r\n          let initializers = new Array<ExpressionRef>();\r\n\r\n          // use a temp local for 'this'\r\n          let tempLocal = currentFunction.getTempLocal(options.usizeType);\r\n          initializers.push(module.createSetLocal(tempLocal.index, thisExpr));\r\n\r\n          // apply field initializers\r\n          if (instance.members) {\r\n            for (let member of instance.members.values()) {\r\n              if (member.kind == ElementKind.FIELD) {\r\n                let field = <Field>member;\r\n                let fieldDeclaration = field.prototype.declaration;\r\n                if (field.is(CommonFlags.CONST)) {\r\n                  assert(false); // there are no built-in fields currently\r\n                } else if (fieldDeclaration && fieldDeclaration.initializer) {\r\n                  initializers.push(module.createStore(field.type.byteSize,\r\n                    module.createGetLocal(tempLocal.index, options.nativeSizeType),\r\n                    this.compileExpression(fieldDeclaration.initializer, field.type),\r\n                    field.type.toNativeType(),\r\n                    field.memoryOffset\r\n                  ));\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // apply constructor\r\n          let constructorInstance = instance.constructorInstance;\r\n          if (constructorInstance) {\r\n            initializers.push(this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n              module.createGetLocal(tempLocal.index, options.nativeSizeType)\r\n            ));\r\n          }\r\n\r\n          // return 'this'\r\n          initializers.push(module.createGetLocal(tempLocal.index, options.nativeSizeType));\r\n          currentFunction.freeTempLocal(tempLocal);\r\n          thisExpr = module.createBlock(null, initializers, options.nativeSizeType);\r\n\r\n          this.currentType = instance.type;\r\n          return thisExpr;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n          expression.expression.range\r\n        );\r\n      }\r\n    }\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var resolved = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var targetExpr: ExpressionRef;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, propertyAccess);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        if (!this.compileEnum((<EnumValue>element).enum)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert(resolved.isInstanceTarget);\r\n        assert((<Field>element).memoryOffset >= 0);\r\n        targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          this.options.usizeType,\r\n          ConversionKind.NONE\r\n        );\r\n        this.currentType = (<Field>element).type;\r\n        return module.createLoad(\r\n          (<Field>element).type.size >> 3,\r\n          (<Field>element).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          targetExpr,\r\n          (<Field>element).type.toNativeType(),\r\n          (<Field>element).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>element).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.memberOf);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>parent).type\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, targetExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>element).simpleName, (<Property>element).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      return _BinaryenConstGetValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n    var ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression(\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].normalizedPath == normalizedPath) return;\r\n    }\r\n    this.seenlog.add(normalizedPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      let name = decorator.name;\r\n      if (name.kind == NodeKind.IDENTIFIER) {\r\n        let text = (<IdentifierExpression>name).text;\r\n        if (text == \"global\") {\r\n          flags |= CommonFlags.GLOBAL;\r\n          continue;\r\n        }\r\n        if (text == \"unmananged\") {\r\n          flags |= CommonFlags.UNMANAGED;\r\n          continue;\r\n        }\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS: {\r\n        tn.next();\r\n        statement = this.parseClass(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    suppressErrors: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: '...'? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      isRest = true;\r\n      startRange = tn.range();\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      return Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClass(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at 'class':\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes = new Array<TypeNode>();\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        implementsTypes.push(<TypeNode>type);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, flags);\r\n        if (!member) return null;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassDeclaration(\r\n      identifier,\r\n      typeParameters,\r\n      extendsType,\r\n      implementsTypes,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parentFlags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parentFlags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn);\r\n      if (!parameters) return null;\r\n\r\n      if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      if (ret.normalizedPath && !this.seenlog.has(<string>ret.normalizedPath)) {\r\n        this.backlog.push(<string>ret.normalizedPath);\r\n        this.seenlog.add(<string>ret.normalizedPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        if (!this.seenlog.has(ret.normalizedPath)) {\r\n          this.backlog.push(ret.normalizedPath);\r\n          this.seenlog.add(ret.normalizedPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Function,\r\n  Class,\r\n  Namespace,\r\n  FunctionPrototype,\r\n  ClassPrototype,\r\n  ConstantValueKind,\r\n  Interface\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program) {\r\n    this.program = program;\r\n  }\r\n\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) {\r\n      this.visitElement(element);\r\n    }\r\n  }\r\n\r\n  visitElement(element: Element): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitEnum(<Enum>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitFunction(<Function>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitClass(<Class>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\r\n          this.visitNamespace(<Namespace>element);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) {\r\n            sb.push(\"const \");\r\n          } else {\r\n            sb.push(\"readonly \");\r\n          }\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) {\r\n          this.visitElement(member);\r\n        }\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          this.seen.add(member);\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) {\r\n        this.visitNamespace(element);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"function \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    sb.push(\"): \");\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    members = element.members; // instance\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) {\r\n    parser = new Parser();\r\n    isEntry = true;\r\n  }\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  Expression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  Global,\r\n  Local,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(\r\n  compiler: Compiler,\r\n  global: Global,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (global.internalName) {\r\n    case \"NaN\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(NaN);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(NaN);\r\n      }\r\n    }\r\n    case \"Infinity\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(Infinity);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(Infinity);\r\n      }\r\n    }\r\n    case \"HEAP_BASE\": { // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  var tempLocal0: Local,\r\n      tempLocal1: Local;\r\n\r\n  var type: Type,\r\n      offset: i32;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringPrototype = compiler.program.elementsLookup.get(\"String\");\r\n        if (stringPrototype) {\r\n          assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n          let stringInstance = (<ClassPrototype>stringPrototype).resolve(null);\r\n          if (!stringInstance) return module.createUnreachable();\r\n          if (classType.isAssignableTo(stringInstance)) {\r\n            return module.createI32(1);\r\n          }\r\n        }\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      return classType != null && classType.prototype.fnIndexedGet != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createBinary(BinaryOp.NeF32,\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createBinary(BinaryOp.NeF64,\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF32,\r\n              module.createUnary(UnaryOp.AbsF32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              module.createF32(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32),\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF64,\r\n              module.createUnary(UnaryOp.AbsF64,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              module.createF64(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64),\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        ret = compiler.options.isWasm64\r\n          ? module.createI64(typeArguments[0].byteSize, 0)\r\n          : module.createI32(typeArguments[0].byteSize);\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], type = compiler.currentType);\r\n      arg2 = compiler.compileExpression(operands[2], Type.bool);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal0.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal0.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  cls: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(cls.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var prototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!prototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (prototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, prototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var instance = (<FunctionPrototype>prototype).resolve(); // reports\r\n  if (!(instance && compiler.compileFunction(instance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = cls.type;\r\n  return module.createCall(\r\n    instance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(cls.currentMemoryOffset)\r\n        : module.createI32(cls.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(\"abort\"); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","var globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nvar HEAP = new Uint8Array(0);\r\nvar HEAP_OFFSET = 0;\r\n\r\nglobalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n  if (!(size >>>= 0))\r\n    return 0;\r\n  if (HEAP_OFFSET + size > HEAP.length) {\r\n    var oldHeap = HEAP;\r\n    HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n    HEAP.set(oldHeap);\r\n  }\r\n  var ptr = HEAP_OFFSET;\r\n  if ((HEAP_OFFSET += size) & 7)\r\n    HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n  return ptr;\r\n};\r\n\r\nglobalScope[\"free_memory\"] = function free_memory(ptr) {\r\n  // TODO\r\n};\r\n\r\nglobalScope[\"move_memory\"] = function move_memory(dest, src, n) {\r\n  HEAP.copyWithin(dest, src, src + n);\r\n};\r\n\r\nglobalScope[\"store\"] = function store(ptr, val, off) {\r\n  if (typeof off === \"number\")\r\n    ptr += off;\r\n  HEAP[ptr] = val;\r\n};\r\n\r\nglobalScope[\"load\"] = function load(ptr) {\r\n  if (typeof off === \"number\")\r\n    ptr += off;\r\n  return HEAP[ptr];\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nrequire(\"./portable/memory\");\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}
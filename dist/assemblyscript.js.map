{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromString","str","INDEXED_GET","INDEXED_SET","ADD","SUB","MUL","DIV","REM","POW","AND","OR","XOR","EQ","NE","GT","GE","LT","LE","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","length","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","assert","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","IDENTIFIER","flag","decoratorKindToFlag","stringToDecoratorKind","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","isLibrary","is","SOURCE","simpleName","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","toString","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","ENUM","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","asThis","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","_b","scopedLocal","addScopedLocal","existingLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","CUSTOM","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","PRECOMPUTE","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","g","eval","e","window","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","nullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argumentCountRef","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","typeRef","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","ensureTrampoline","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","compileAbort","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","argumentExpressions","thisArg","compileCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedSet","Index_signature_in_type_0_only_permits_reading","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","numOperands","isCallImport","ensureArgumentCount","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayType","byteLength","elementCount","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenAllocates","ifElseAllocates","getValue","Unreachable","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","explicitSimpleName","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitCompiledFunctions","visitCompiledClasses","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","evaluateConstantType","evaluateConstantOffset","NaN","Infinity","tempLocal0","tempLocal1","alignLog2","fieldName","Type_0_has_no_property_1","abort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","off","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","sqrt","trunc","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray","y"],"mappings":"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AK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  stringToDecoratorKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n  INDEXED_GET,\r\n  INDEXED_SET,\r\n  ADD,\r\n  SUB,\r\n  MUL,\r\n  DIV,\r\n  REM,\r\n  POW,\r\n  AND,\r\n  OR,\r\n  XOR,\r\n  EQ,\r\n  NE,\r\n  GT,\r\n  GE,\r\n  LT,\r\n  LE\r\n}\r\n\r\nfunction operatorKindFromString(str: string): OperatorKind {\r\n  switch (str) {\r\n    case \"[]\" : return OperatorKind.INDEXED_GET;\r\n    case \"[]=\": return OperatorKind.INDEXED_SET;\r\n    case \"+\"  : return OperatorKind.ADD;\r\n    case \"-\"  : return OperatorKind.SUB;\r\n    case \"*\"  : return OperatorKind.MUL;\r\n    case \"/\"  : return OperatorKind.DIV;\r\n    case \"%\"  : return OperatorKind.REM;\r\n    case \"**\" : return OperatorKind.POW;\r\n    case \"&\"  : return OperatorKind.AND;\r\n    case \"|\"  : return OperatorKind.OR;\r\n    case \"^\"  : return OperatorKind.XOR;\r\n    case \"==\" : return OperatorKind.EQ;\r\n    case \"!=\" : return OperatorKind.NE;\r\n    case \">\"  : return OperatorKind.GT;\r\n    case \">=\" : return OperatorKind.GE;\r\n    case \"<\"  : return OperatorKind.LT;\r\n    case \"<=\" : return OperatorKind.LE;\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\r\n        if (element) this.elementsLookup.set(alias, element);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.name.kind == NodeKind.IDENTIFIER) {\r\n        let name = (<IdentifierExpression>decorator.name).text;\r\n        let kind = stringToDecoratorKind(name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, name\r\n            );\r\n          } else if (presentFlags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, name\r\n            );\r\n          } else {\r\n            presentFlags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              let kind = operatorKindFromString((<StringLiteralExpression>firstArg).value);\r\n              if (kind == OperatorKind.INVALID) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  firstArg.range\r\n                );\r\n              } else {\r\n                let overloads = classPrototype.overloadPrototypes;\r\n                if (overloads.has(kind)) {\r\n                  this.error(\r\n                    DiagnosticCode.Duplicate_function_implementation,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  prototype.operatorKind = kind;\r\n                  overloads.set(kind, prototype);\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      declaration.name.text,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        let member: Element | null;\r\n        if (members && (member = members.get(propertyName))) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = null;\r\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 2,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 3,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 4\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type.asThis();\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n            // FIXME: declaration?\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration,\r\n                instance\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind): Function | null {\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9,\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 10\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Scoped global variables. */\r\n  // scopedGlobals: Map<Local,Global> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.RETURNS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (this.is(FlowFlags.THROWS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (this.is(FlowFlags.ALLOCATES)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Adds a scoped global for an outer scoped local. */\r\n  // addScopedGlobal(scopedLocal: Local): Global {\r\n  //   var scopedGlobals = this.scopedGlobals;\r\n  //   var scopedGlobal: Global | null;\r\n  //   if (!scopedGlobals) {\r\n  //     this.scopedGlobals = scopedGlobals = new Map();\r\n  //   } else {\r\n  //     scopedGlobal = scopedGlobals.get(scopedLocal);\r\n  //     if (scopedGlobal) return scopedGlobal;\r\n  //   }\r\n  //   scopedGlobal = new Global(\r\n  //     scopedLocal.program,\r\n  //     scopedLocal.simpleName,\r\n  //     this.currentFunction.internalName + INNER_DELIMITER + scopedLocal.internalName,\r\n  //     scopedLocal.type,\r\n  //     assert(scopedLocal.declaration)\r\n  //   );\r\n  //   scopedGlobals.set(scopedLocal, scopedGlobal);\r\n  //   return scopedGlobal;\r\n  // }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr)) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = expression.kind == NodeKind.IDENTIFIER\r\n      ? stringToDecoratorKind((<IdentifierExpression>expression).text)\r\n      : DecoratorKind.CUSTOM;\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  PRECOMPUTE\r\n}\r\n\r\n/** Returns the decorator kind represented by the specified string. */\r\nexport function stringToDecoratorKind(str: string): DecoratorKind {\r\n  switch (str) {\r\n    case \"global\": return DecoratorKind.GLOBAL;\r\n    case \"operator\": return DecoratorKind.OPERATOR;\r\n    case \"unmanaged\": return DecoratorKind.UNMANAGED;\r\n    case \"sealed\": return DecoratorKind.SEALED;\r\n    case \"inline\": return DecoratorKind.INLINE;\r\n    case \"precompute\": return DecoratorKind.PRECOMPUTE;\r\n    default: return DecoratorKind.CUSTOM;\r\n  }\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return decorator;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is the special 'this' type. */\r\n  THIS = 1 << 10\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying function reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Respective special 'this' type. */\r\n  thisType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classReference = this.classReference;       // either a class reference\r\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Composes the respective 'this' type of this type. */\r\n  asThis(): Type {\r\n    var thisType = this.thisType;\r\n    if (thisType) return thisType;\r\n    thisType = new Type(this.kind, this.flags | TypeFlags.THIS, this.size);\r\n    thisType.classReference = this.classReference;\r\n    thisType.nullableType = this.nullableType;\r\n    thisType.nonNullableType = this.nonNullableType;\r\n    this.thisType = thisType;\r\n    return thisType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) {\r\n      return left;\r\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\r\n      return right;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType\r\n          ? \"u32\"\r\n          : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType\r\n          ? \"usize\"\r\n          : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    ret[i] = types[i].toNativeType();\r\n  }\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    sb[i] = types[i].toString();\r\n  }\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\r\n        return false;\r\n      }\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) {\r\n      return false; // TODO\r\n    }\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        sb.push(parameterTypes[i].toSignatureString());\r\n      }\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) {\r\n          sb.push((<string[]>names)[i]);\r\n        } else {\r\n          sb.push(getGenericParameterName(i));\r\n        }\r\n        if (i >= optionalStart && i != restIndex) {\r\n          sb.push(\"?: \");\r\n        } else {\r\n          sb.push(\": \");\r\n        }\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n  /** Argument count helper global. */\r\n  argumentCountRef: GlobalRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) {\r\n        this.compileSource(sources[i]);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (!source) {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileSource(source);\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n     if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              assert(global.declaration).range\r\n            );\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType: Type = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\r\n        flow.set(FlowFlags.RETURNS);\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        assert(false);\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n    var stmtThrows = flow.is(FlowFlags.THROWS);\r\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\r\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\r\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\r\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint\r\n    if (alwaysReturns || alwaysThrows) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      let ret: ExpressionRef;\r\n      if (_BinaryenConstGetValueI32(condExpr)) {\r\n        ret = this.compileStatement(ifTrue);\r\n      } else if (ifFalse) {\r\n        ret = this.compileStatement(ifFalse);\r\n      } else {\r\n        ret = module.createNop();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\r\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    var ifFalseThrows = false;\r\n    var ifFalseAllocates = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\r\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n\r\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\r\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\r\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // When inlining, break to the end of the inlined function's block\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (statement.value) {\r\n        expression = this.compileExpression(\r\n          statement.value,\r\n          assert(flow.returnType)\r\n        );\r\n      }\r\n      return module.createBreak(assert(flow.returnLabel), 0, expression);\r\n    }\r\n\r\n    // Otherwise return as usual\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        flow.returnType\r\n      );\r\n    }\r\n    return module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\r\n        alwaysThrows = false;\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\r\n        alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          flow.addScopedLocal(type, name, declaration); // reports\r\n        } else {\r\n          currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (init) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!_BinaryenConstGetValueI32(condExpr)) {\r\n        return module.createNop();\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      case TypeKind.F64: {\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL)) {\r\n            expr = makeSmallIntegerWrap(expr, toType, module);\r\n          }\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SMALL) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EQUALS_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EXCLAMATION_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must be wrapped\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.POW);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType == Type.f32) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType\r\n          );\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            left\r\n          );\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64\r\n          );\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.REM);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.AND);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.OR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.XOR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n      // checks and recompiles the argument according to its actual annotated type\r\n      var argumentExpressions: Expression[];\r\n      var thisArg: ExpressionRef = 0;\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(operatorInstance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        thisArg = this.compileExpression(value, (<Class>parent).type);\r\n        argumentExpressions = [];\r\n      } else {\r\n        argumentExpressions = [ value ];\r\n      }\r\n      return this.compileCallDirect(\r\n        operatorInstance,\r\n        argumentExpressions,\r\n        reportNode,\r\n        thisArg,\r\n        operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n      );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // checks and recompiles the arguments according to their actual annotated types\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = this.compileExpression(left, (<Class>parent).type);\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ];\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var elementType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, (<Class>target).internalName\r\n            );\r\n            return this.module.createUnreachable();\r\n          }\r\n          elementType = indexedGet.signature.returnType;\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>target).type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32\r\n          );\r\n          if (tee) {\r\n            let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n            let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameterTypes;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameterTypes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\");\r\n      body.push(\r\n        module.createSetLocal(thisLocal.index, thisArg)\r\n      );\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let argumentLocal = flow.addScopedLocal(parameterTypes[i], signature.getParameterName(i));\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index,\r\n          this.compileExpression(\r\n            argumentExpressions[i],\r\n            parameterTypes[i]\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let argumentLocal = flow.addScopedLocal(parameterTypes[i], signature.getParameterName(i));\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index,\r\n          this.compileExpression(\r\n            assert(declaration.signature.parameterTypes[i].initializer),\r\n            parameterTypes[i]\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) { // it's ok to unwrap the block here\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        body.push(this.compileStatement(statements[i]));\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches return\r\n    if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"argumentCount\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"argumentCount\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n      if (!isCallImport) { // call the trampoline\r\n        instance = this.ensureTrampoline(instance);\r\n        if (!this.compileFunction(instance)) return module.createUnreachable();\r\n        let nativeReturnType = returnType.toNativeType();\r\n        this.currentType = returnType;\r\n        return module.createBlock(null, [\r\n          this.ensureArgumentCount(numArguments),\r\n          module.createCall(instance.internalName, operands, nativeReturnType)\r\n        ], nativeReturnType);\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return isCallImport\r\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\r\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      this.ensureArgumentCount(numArguments), // might still be calling a trampoline\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType());\r\n  }\r\n\r\n  /** Makes sure that the `argumentCount` helper global is present and returns an expression that sets it. */\r\n  private ensureArgumentCount(argumentCount: i32): ExpressionRef {\r\n    var module = this.module;\r\n    if (!this.argumentCountRef) {\r\n      this.argumentCountRef = module.addGlobal(\r\n        \"argumentCount\",\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return module.createSetGlobal(\"argumentCount\", module.createI32(argumentCount));\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type);\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                makeConditionalAllocate(this, <Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (target.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>target, expression);\r\n        }\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          this.currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileStaticArray(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayType) return module.createUnreachable();\r\n\r\n    var elementCount = expressions.length;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    var byteLength: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(elementCount));\r\n        byteLength = elementCount * 4;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(elementCount));\r\n        byteLength = elementCount * 8;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(elementCount));\r\n        byteLength = elementCount * 4;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(elementCount));\r\n        byteLength = elementCount * 8;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // precompute value expressions\r\n    var exprs = new Array<ExpressionRef>(elementCount);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < elementCount; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    if (isStatic) {\r\n      // Create a combined static memory segment composed of:\r\n      // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n      let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n      let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n      let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n      let data = new Uint8Array(arraySize + bufferTotalSize);\r\n      let segment = this.addMemorySegment(data);\r\n      let offset = 0;\r\n\r\n      // write Array struct\r\n      if (usizeTypeSize == 8) {\r\n        writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n        offset += 8;\r\n      } else {\r\n        assert(i64_high(segment.offset) == 0);\r\n        writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n        offset += 4;\r\n      }\r\n      writeI32(elementCount, data, offset); // length_\r\n      offset += 4;\r\n      assert(offset == arraySize);\r\n\r\n      // write ArrayBuffer struct\r\n      writeI32(byteLength, data, offset);\r\n      offset += bufferHeaderSize; // incl. alignment\r\n\r\n      // write ArrayBuffer data\r\n      switch (nativeType) {\r\n        case NativeType.I32: {\r\n          for (let i = 0; i < elementCount; ++i) {\r\n            writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          for (let i = 0; i < elementCount; ++i) {\r\n            writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          for (let i = 0; i < elementCount; ++i) {\r\n            writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          for (let i = 0; i < elementCount; ++i) {\r\n            writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      assert(offset <= arraySize + bufferTotalSize);\r\n\r\n      this.currentType = arrayType.type;\r\n      return usizeTypeSize == 8\r\n        ? module.createI64(\r\n            i64_low(segment.offset),\r\n            i64_high(segment.offset)\r\n          )\r\n        : module.createI32(\r\n            i64_low(segment.offset)\r\n          );\r\n    } else {\r\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\r\n      // on top? any benefits?\r\n      throw new Error(\"not implemented\");\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      null,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = makeAllocate(this, classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (target.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>target, propertyAccess);\r\n        }\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      return _BinaryenConstGetValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var currentFunction = this.currentFunction;\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    if (_BinaryenExpressionGetId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, explicitSimpleName: string | null = null): string {\r\n  var simpleName = explicitSimpleName != null\r\n    ? explicitSimpleName\r\n    : element.simpleName;\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n\r\n/** Makes an allocation expression for an instance of the specified class. */\r\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n  var currentFunction = compiler.currentFunction;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n\r\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\r\n\r\n  // allocate the necessary memory\r\n  var initializers = new Array<ExpressionRef>();\r\n  initializers.push(\r\n    module.createSetLocal(tempLocal.index,\r\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n\r\n  // apply field initializers\r\n  if (classInstance.members) {\r\n    for (let member of classInstance.members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        let field = <Field>member;\r\n        let fieldType = field.type;\r\n        let nativeFieldType = fieldType.toNativeType();\r\n        let fieldDeclaration = field.prototype.declaration;\r\n        assert(!field.isAny(CommonFlags.CONST));\r\n        if (fieldDeclaration.initializer) { // use initializer\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        } else { // initialize with zero\r\n          // TODO: might be unnecessary if the ctor initializes the field\r\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter\r\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n              : fieldType.toNativeZero(module),\r\n              nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // return `this`\r\n  initializers.push(\r\n    module.createGetLocal(tempLocal.index, nativeSizeType)\r\n  );\r\n\r\n  currentFunction.freeTempLocal(tempLocal);\r\n  compiler.currentType = classInstance.type;\r\n  return module.createBlock(null, initializers, nativeSizeType);\r\n}\r\n\r\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  // requires that `this` is the first local\r\n  var module = compiler.module;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  compiler.currentType = classInstance.type;\r\n  return module.createIf(\r\n    nativeSizeType == NativeType.I64\r\n      ? module.createBinary(\r\n          BinaryOp.NeI64,\r\n          module.createGetLocal(0, NativeType.I64),\r\n          module.createI64(0)\r\n        )\r\n      : module.createGetLocal(0, NativeType.I32),\r\n    module.createGetLocal(0, nativeSizeType),\r\n    module.createTeeLocal(0,\r\n      makeAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  File_0_not_found = 6054\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].internalPath == internalPath) return;\r\n    }\r\n    this.seenlog.add(internalPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn, isConstructor);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"public\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"protected\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PROTECTED;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"private\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PRIVATE;\r\n    }\r\n    if (tn.skip(Token.READONLY)) {\r\n      if (!startRange) startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"readonly\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.READONLY;\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program) {\r\n    this.program = program;\r\n  }\r\n\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n  }\r\n\r\n  visitElement(element: Element): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitCompiledFunctions(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitCompiledClasses(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitCompiledFunctions(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitCompiledFunctions(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(<Namespace>element)) this.visitNamespace(<Namespace>element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  visitCompiledFunctions(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  visitCompiledClasses(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else assert(false);\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          this.seen.add(member);\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n    } else if (element.is(CommonFlags.SET)) {\r\n      sb.push(\"set \");\r\n      sb.push(element.prototype.declaration.name.text);\r\n    } else {\r\n      if (!element.is(CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    /* TBD: the compiler implicitly generates setters if the class is exported\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"get \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(): \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    if (!element.is(CommonFlags.READONLY)) {\r\n      indent(sb, this.indentLevel);\r\n      if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n      if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n      if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n      sb.push(\"set \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\"(\");\r\n      sb.push(element.simpleName);\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(element.type));\r\n      sb.push(\");\\n\");\r\n    }\r\n    */\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  Global,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(\r\n  compiler: Compiler,\r\n  global: Global,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (global.internalName) {\r\n    case \"NaN\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(NaN);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(NaN);\r\n      }\r\n    }\r\n    case \"Infinity\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(Infinity);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(Infinity);\r\n      }\r\n    }\r\n    case \"HEAP_BASE\": { // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(\r\n            BinaryOp.GtU32,\r\n            module.createBinary(\r\n              BinaryOp.AndI32,\r\n              module.createUnary(UnaryOp.ReinterpretF32, arg0),\r\n              module.createI32(0x7FFFFFFF)\r\n            ),\r\n            module.createI32(0x7F800000)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(\r\n            BinaryOp.GtU64,\r\n            module.createBinary(\r\n              BinaryOp.AndI64,\r\n              module.createUnary(UnaryOp.ReinterpretF64, arg0),\r\n              module.createI64(0xFFFFFFFF, 0x7FFFFFFF)\r\n            ),\r\n            module.createI64(0, 0x7FF00000)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(\r\n            BinaryOp.LtU32,\r\n            module.createBinary(\r\n              BinaryOp.AndI32,\r\n              module.createUnary(UnaryOp.ReinterpretF32, arg0),\r\n              module.createI32(0x7FFFFFFF)\r\n            ),\r\n            module.createI32(0x7F800000)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(\r\n            BinaryOp.LtU64,\r\n            module.createBinary(\r\n              BinaryOp.AndI64,\r\n              module.createUnary(UnaryOp.ReinterpretF64, arg0),\r\n              module.createI64(0xFFFFFFFF, 0x7FFFFFFF)\r\n            ),\r\n            module.createI64(0, 0x7FF00000)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      let type: Type;\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type);\r\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, false);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0))\r\n      return 0;\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, n) {\r\n    HEAP.copyWithin(dest, src, src + n);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, val, off) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    HEAP[ptr] = val;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    return HEAP[ptr];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}
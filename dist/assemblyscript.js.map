{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","sources","__extends","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","k","length","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","resolved","resolveIdentifier","ElementKind","CLASS_PROTOTYPE","A_class_may_only_extend_another_class","basePrototype","checkInternalDecorators","parentNode","is","CommonFlags","GLOBAL","source","isLibrary","SOURCE","simpleName","has","Duplicate_identifier_0","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","programLevelInternalName","instance","resolve","type","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","numArgs","arguments","firstArg","LITERAL","literalKind","fnIndexedGet","fnIndexedSet","fnConcat","fnEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","alias","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","resolvedElement","ResolvedElement","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","resolveExpression","targetType","target","propertyName","LOCAL","FIELD","classType","Property_0_does_not_exist_on_type_1","CLASS","withTarget","base","resolveElementAccess","elementAccess","indexedGetName","indexedGet","FUNCTION_PROTOTYPE","Index_signature_is_missing_in_type_0","PARENTHESIZED","ASSERTION","toType","BINARY","THIS","instanceMethodOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","functionType","functionTarget","cachedFunctionTarget","FunctionTarget","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","apply","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","_b","_c","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","asClass","baseType","isAssignableTo","current","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","enterBranchOrScope","branchFlow","leaveBranchOrScope","scopedLocal","addScopedLocal","DiagnosticCategory","diagnosticMessages_generated_1","charcode_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCodeToString","colorBlue","colorYellow","colorRed","colorReset","diagnosticCategoryToColor","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","normalizedPath","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","context","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","Binary","output","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","load","Uint8Array","cp","u1","u2","u3","u4","arr","String","fromCodePoints","Token","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","BREAK","CASE","CATCH","CONTINUE","DEBUGGER","DELETE","DO","ELSE","EXTENDS","FALSE","FINALLY","FOR","FROM","IF","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","NEW","NULL","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","RETURN","SWITCH","THROW","TRUE","TRY","TYPE","TYPEOF","VAR","VOID","WHILE","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","COMMA","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","program_1","tokenizer_1","path_1","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalize","startsWith","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPEPARAMETER","PARAMETER","DecoratorKind","DECORATOR","Expression","LiteralKind","LiteralExpression","AssertionKind","TERNARY","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","IMPORTDECLARATION","SWITCHCASE","VARIABLEDECLARATION","getFirstDecorator","asGlobal","hasDecorator","TypeKind","TypeFlags","size","nullableType","ceil","nonNullableType","computeSmallIntegerShift","computeSmallIntegerMask","asNullable","isReference","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","memoryBase","allocateImpl","freeImpl","ConversionKind","Compiler","startFunctionBody","currentEnum","currentType","memorySegments","stringSegments","functionTable","files","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","typeRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","entries","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","COMPILED","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","allBranchesReturn","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","makeIsTrueish","alwaysReturns","ifTrueExpr","ifTrueReturns","ifFalseExpr","ifFalseReturns","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","condExpr","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","resolvedIndexedSet","valueExpr","valueWithCorrectType","tee","isInstanceTarget","targetExpr","setterInstance","thisArg","makeCallDirect","getterInstance","nativeReturnType","setElementName","setElement","elementExpr","tempLocalTarget","tempLocalElement","Index_signature_in_type_0_only_permits_reading","indexArg","compileCall","compileCallDirect","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","numArgumentsInclThis","ensureTrampoline","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","nativeSizeType","trampolineParameterTypes","trampolineSignature","trampolineName","numOperands","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_i16","i64_is_i32","i64_is_u8","i64_is_u16","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","Int32Array","Float32Array","Float64Array","thisExpr","compileAllocate","field","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","nativeOne","setValue","getValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","g","eval","e","window","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","Parser","backlog","seenlog","currentDeclareStart","currentDeclareEnd","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","isNamespaceMember","startPos","parseDecorator","exportStart","exportEnd","declareStart","declareEnd","first","parseEnum","parseVariable","parseFunction","parseClass","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","AMBIENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","isConstructor","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","indentX1","indentX2","indentX4","indent","text_1","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","Unreachable","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setSourceMap","setMemoryBase","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","evaluateConstantOffset","compiler","compileAbort","abortPrototype","abortInstance","messageArg","filenameArg","NaN","Infinity","tempLocal0","tempLocal1","Type_0_is_not_generic","abort","cls","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","EPSILON","clz32","abs","sqrt","trunc","isTrueish","undefined","fromCodePoint"],"mappings":"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M,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n","import {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  // ParameterNode,\r\n  // ParameterKind,\r\n  // SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ParameterKind,\r\n  SignatureNode\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"(lib)\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedDerivedClasses = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let resolved = this.resolveIdentifier(derivedType.name, null);\r\n      if (resolved) {\r\n        if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n          this.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            derivedType.range\r\n          );\r\n          continue;\r\n        }\r\n        queuedDerivedClasses[i].basePrototype = (\r\n          <ClassPrototype>resolved.element\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  /** Processes internal decorators, if present. */\r\n  private checkInternalDecorators(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      element.is(CommonFlags.GLOBAL) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        element.set(CommonFlags.GLOBAL);\r\n        this.elementsLookup.set(simpleName, element);\r\n        this.fileLevelExports.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedDerivedClasses: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    var numImplementsTypes = implementsTypes.length;\r\n    if (prototype.is(CommonFlags.UNMANAGED)) {\r\n      if (implementsTypes && numImplementsTypes) {\r\n        this.error(\r\n          DiagnosticCode.Structs_cannot_implement_interfaces,\r\n          Range.join(\r\n            declaration.name.range,\r\n            implementsTypes[numImplementsTypes - 1].range\r\n          )\r\n        );\r\n      }\r\n    } else if (numImplementsTypes) {\r\n      for (let i = 0; i < numImplementsTypes; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          implementsTypes[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) {\r\n      queuedDerivedClasses.push(prototype);\r\n    }\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        if (prototype.is(CommonFlags.EXPORT)) {\r\n          prototype.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // check and possibly register string type\r\n    if (\r\n      prototype.is(CommonFlags.GLOBAL) &&\r\n      declaration.name.text == \"String\"\r\n    ) {\r\n      if (!this.typesLookup.has(\"string\")) {\r\n        let instance = prototype.resolve(null);\r\n        if (instance) this.typesLookup.set(\"string\", instance.type);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, declaration.programLevelInternalName\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this, name, internalName, declaration, Type.void\r\n      );\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name, internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        null\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperators(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          if (!prototype) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              decorator.range\r\n            );\r\n            continue;\r\n          }\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              switch ((<StringLiteralExpression>firstArg).value) {\r\n                case \"[]\": {\r\n                  classPrototype.fnIndexedGet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"[]=\": {\r\n                  classPrototype.fnIndexedSet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"+\": {\r\n                  classPrototype.fnConcat = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"==\": {\r\n                  classPrototype.fnEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                default: {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\r\n          // methods support built-in @operator only\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            decorator.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.namespace = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    this.checkInternalDecorators(element, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (isModuleExport) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtendingClasses: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.namespace = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkInternalDecorators(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        Type.void // resolved later on\r\n      );\r\n      global.namespace = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      this.checkInternalDecorators(global, declaration);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): ResolvedElement | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.namespace) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(element);\r\n          }\r\n        } while (namespace = namespace.namespace);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    resolvedElement = this.resolveExpression( // reports\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n    var targetType: Type;\r\n    var member: Element | null;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        if (!(targetType = (<VariableLikeElement>target).type).classType) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classType;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        if (!(targetType = getter.signature.returnType).classType) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classType;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          if (target.members && (member = target.members.get(propertyName))) {\r\n            return resolvedElement.set(member).withTarget(target, targetExpression);\r\n          }\r\n          // check inherited static members on the base prototype while target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // or inherited instance members on the cbase class while target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        if (target.members && (member = target.members.get(propertyName))) {\r\n          return resolvedElement.set(member).withTarget(target, targetExpression);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = elementAccess.expression;\r\n    resolvedElement = this.resolveExpression(\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (type.classType) {\r\n          let indexedGetName = (target = type.classType).prototype.fnIndexedGet;\r\n          let indexedGet: Element | null;\r\n          if (\r\n            indexedGetName != null &&\r\n            target.members &&\r\n            (indexedGet = target.members.get(indexedGetName)) &&\r\n            indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            return resolvedElement.set(indexedGet).withTarget(type.classType, targetExpression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n      targetExpression.range, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classType;\r\n          if (classType) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(classType);\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class\r\n        let classType = contextualFunction.instanceMethodOf;\r\n        if (classType) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(classType);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        let classType = contextualFunction.instanceMethodOf;\r\n        if (classType && (classType = classType.base)) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(classType);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let resolved = this.resolveExpression(\r\n          (<CallExpression>expression).expression,\r\n          contextualFunction\r\n        );\r\n        if (resolved) {\r\n          let element = resolved.element;\r\n          if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n            let instance = (<FunctionPrototype>element).resolveUsingTypeArguments(\r\n              (<CallExpression>expression).typeArguments,\r\n              null,\r\n              expression\r\n            );\r\n            if (instance) {\r\n              let returnType = instance.signature.returnType;\r\n              let classType = returnType.classType;\r\n              if (classType) {\r\n                if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                return resolvedElement.set(classType);\r\n              } else {\r\n                let signature = returnType.functionType;\r\n                if (signature) {\r\n                  let functionTarget = signature.cachedFunctionTarget;\r\n                  if (!functionTarget) {\r\n                    functionTarget = new FunctionTarget(this, signature);\r\n                    signature.cachedFunctionTarget = functionTarget;\r\n                  }\r\n                  if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                  return resolvedElement.set(functionTarget);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\r\nexport class ResolvedElement {\r\n\r\n  /** The target element, if a property or element access */\r\n  target: Element | null;\r\n  /** The target element's expression, if a property or element access. */\r\n  targetExpression: Expression | null;\r\n  /** The element being accessed. */\r\n  element: Element;\r\n\r\n  /** Clears the target and sets the resolved element. */\r\n  set(element: Element): this {\r\n    this.target = null;\r\n    this.targetExpression = null;\r\n    this.element = element;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the resolved target in addition to the previously set element. */\r\n  withTarget(target: Element, targetExpression: Expression): this {\r\n    this.target = target;\r\n    this.targetExpression = targetExpression;\r\n    return this;\r\n  }\r\n\r\n  /** Tests if the target is a valid instance target. */\r\n  get isInstanceTarget(): bool {\r\n    return (\r\n      this.target != null &&\r\n      this.target.kind == ElementKind.CLASS &&\r\n      this.targetExpression != null\r\n    );\r\n  }\r\n}\r\n\r\n// Cached result structure instance\r\nvar resolvedElement: ResolvedElement | null;\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Internal decorators\r\n\r\n  /** Is global. */\r\n  GLOBAL = 1 << 13,\r\n  /** Is built-in. */\r\n  BUILTIN = 1 << 14,\r\n  /** Is unmanaged. */\r\n  UNMANAGED = 1 << 15,\r\n\r\n  // Extended modifiers usually derived from basic modifiers or internal decorators\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 16,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 17,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 18,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 19,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 20,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 21,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 22,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 23,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 24,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 25\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent namespace, if applicable. */\r\n  namespace: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Parent enum. */\r\n  enum: Enum;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.enum = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: VariableLikeDeclarationStatement,\r\n    type: Type\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n\r\n  constructor(program: Program, simpleName: string, index: i32, type: Type) {\r\n    super(program, simpleName, simpleName);\r\n    this.index = index;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n\r\n    // inherit contextual type arguments as provided. might be be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      let classDeclaration = (<ClassPrototype>assert(this.classPrototype)).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      let classPrototype = assert(this.classPrototype);\r\n      classInstance = classPrototype.resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n    } else {\r\n      assert(!this.classPrototype);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET) || this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = Type.void; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(this, internalName, signature, classInstance);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.classPrototype);\r\n    if (classTypeArguments && classTypeArguments.length) {\r\n      let partialPrototype = new FunctionPrototype(\r\n        this.program,\r\n        this.simpleName,\r\n        this.internalName,\r\n        this.declaration,\r\n        this.classPrototype\r\n      );\r\n      partialPrototype.flags = this.flags;\r\n      partialPrototype.classTypeArguments = classTypeArguments;\r\n      return partialPrototype;\r\n    }\r\n    return this; // no need to clone\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** If an instance method, the concrete class it is a member of. */\r\n  instanceMethodOf: Class | null;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    instanceMethodOf: Class | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.instanceMethodOf = instanceMethodOf;\r\n    this.flags = prototype.flags;\r\n    if (!(prototype.is(CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (instanceMethodOf) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        if (instanceMethodOf.contextualTypeArguments) {\r\n          if (!this.contextualTypeArguments) {\r\n            this.contextualTypeArguments = new Map();\r\n          }\r\n          for (let [inheritedName, inheritedType] of instanceMethodOf.contextualTypeArguments) {\r\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(prototype: FieldPrototype, internalName: string, type: Type) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Overloaded indexed get method, if any. */\r\n  fnIndexedGet: string | null = null;\r\n  /** Overloaded indexed set method, if any. */\r\n  fnIndexedSet: string | null = null;\r\n  /** Overloaded concatenation method, if any. */\r\n  fnConcat: string | null = null;\r\n  /** Overloaded equality comparison method, if any. */\r\n  fnEquals: string | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classType)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) {\r\n        instance.constructorInstance = partialConstructor.resolve(); // reports\r\n      }\r\n      // TODO: ^ doesn't know the return type, hence returns null\r\n    }\r\n\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(<FieldPrototype>member, (<FieldPrototype>member).internalName, fieldType);\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\r\n            if (!instance.members) instance.members = new Map();\r\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (methodPrototype) {\r\n              instance.members.set(member.simpleName, methodPrototype);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\r\n            if (!instance.members) instance.members = new Map();\r\n            assert((<Property>member).getterPrototype);\r\n            let instanceProperty = new Property(this.program, member.simpleName, member.internalName, this);\r\n            instanceProperty.getterPrototype = (\r\n              (<FunctionPrototype>(<Property>member).getterPrototype).resolvePartial(\r\n                typeArguments\r\n              )\r\n            );\r\n            if ((<Property>member).setterPrototype) {\r\n              instanceProperty.setterPrototype = (\r\n                (<FunctionPrototype>(<Property>member).setterPrototype).resolvePartial(\r\n                  typeArguments\r\n                )\r\n              );\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: throw new Error(\"instance member expected\");\r\n        }\r\n      }\r\n    }\r\n    instance.currentMemoryOffset = memoryOffset; // sizeof<this>() is its byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      if (base.contextualTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do {\r\n      if (current == target) {\r\n        return true;\r\n      }\r\n    } while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.prototype.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName, declaration);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch possibly throws. */\r\n  POSSIBLY_THROWS = 1 << 1,\r\n  /** This branch possible breaks. */\r\n  POSSIBLY_BREAKS = 1 << 2,\r\n  /** This branch possible continues. */\r\n  POSSIBLY_CONTINUES = 1 << 3\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branchFlow = new Flow();\r\n    branchFlow.parent = this;\r\n    branchFlow.flags = this.flags;\r\n    branchFlow.currentFunction = this.currentFunction;\r\n    branchFlow.continueLabel = this.continueLabel;\r\n    branchFlow.breakLabel = this.breakLabel;\r\n    return branchFlow;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.POSSIBLY_THROWS)) {\r\n      parent.set(FlowFlags.POSSIBLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.POSSIBLY_BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.POSSIBLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.POSSIBLY_CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.POSSIBLY_CONTINUES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, reportNode: Node): void {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else if (this.scopedLocals.has(name)) {\r\n      this.currentFunction.program.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        reportNode.range\r\n      );\r\n      return;\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): bool {\r\n    assert(this.parent == null, \"must be the topmost parent flow\");\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    return this.is(FlowFlags.RETURNS);\r\n  }\r\n}\r\n","import {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util/charcode\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nexport enum DiagnosticCategory {\r\n  INFO,\r\n  WARNING,\r\n  ERROR\r\n}\r\n\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: return \"\";\r\n  }\r\n}\r\n\r\nconst colorBlue: string = \"\\u001b[93m\";\r\nconst colorYellow: string = \"\\u001b[93m\";\r\nconst colorRed: string = \"\\u001b[91m\";\r\nconst colorReset: string = \"\\u001b[0m\";\r\n\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return colorBlue;\r\n    case DiagnosticCategory.WARNING: return colorYellow;\r\n    case DiagnosticCategory.ERROR: return colorRed;\r\n    default: return \"\";\r\n  }\r\n}\r\n\r\nexport class DiagnosticMessage {\r\n\r\n  code: i32;\r\n  category: DiagnosticCategory;\r\n  message: string;\r\n  range: Range | null = null;\r\n\r\n  constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n  // format context first (uses same string builder)\r\n  var context = \"\";\r\n  if (message.range && showContext) {\r\n    context = formatDiagnosticContext(message.range, useColors);\r\n  }\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(colorReset);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // range information if available\r\n  if (message.range) {\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(context);\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\r\n    start--;\r\n  }\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\r\n    end++;\r\n  }\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(colorRed);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(colorReset);\r\n  return sb.join(\"\");\r\n}\r\n\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  diagnostics: DiagnosticMessage[];\r\n  // silentDiagnostics: bool = false;\r\n\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","import {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n  // TODO: static readonly MAX_MEMORY_WASM64\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): Binary {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new Binary();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nexport function readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nexport function readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nclass Binary {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/*\r\n\r\n This is a modified version of TypeScript's scanner that doesn't perform as much bookkeeping, simply\r\n skips over trivia and provides a more general mark/reset mechanism for the parser to utilize on\r\n ambiguous tokens.\r\n\r\n next()                 advances the token\r\n peek()                 peeks for the next token\r\n skip(token)            skips over a token if possible\r\n mark()                 marks at current token\r\n reset()                resets to marked state\r\n range()                gets the range of the current token\r\n\r\n readFloat()            on FLOATLITERAL\r\n readIdentifier()       on IDENTIFIER\r\n readInteger()          on INTEGERLITERAL\r\n readString()           on STRINGLITERAL\r\n\r\n*/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util/charcode\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFomKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              // TODO: triple-slash?\r\n              // if (\r\n              //   this.pos + 1 < this.end &&\r\n              //   text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              // ) {\r\n              // }\r\n              while (++this.pos < this.end) {\r\n                if (isLineBreak(text.charCodeAt(this.pos))) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFomKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","import {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalize as normalizePath,\r\n  resolve as resolvePath\r\n} from \"./util/path\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    if (expression.kind == NodeKind.IDENTIFIER) {\r\n      switch ((<IdentifierExpression>expression).text) {\r\n        case \"global\": {\r\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case \"operator\": {\r\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case \"unmanaged\": {\r\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\r\n          break;\r\n        }\r\n        case \"offset\": {\r\n          stmt.decoratorKind = DecoratorKind.OFFSET;\r\n          break;\r\n        }\r\n        default: {\r\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[], // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode | null;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode | null;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport const enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  OFFSET\r\n}\r\n\r\n/** Depresents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport const enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport const enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented. */\r\n  implementsTypes: TypeNode[]; // can't be a function\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return decorator;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","import {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n  I8,\r\n  I16,\r\n  I32,\r\n  I64,\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n  U8,\r\n  U16,\r\n  U32,\r\n  U64,\r\n  USIZE,\r\n  BOOL, // sic\r\n\r\n  // floats\r\n  F32,\r\n  F64,\r\n\r\n  // other\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class type, if a class type. */\r\n  classType: Class | null;\r\n  /** Underlying function type, if a function type. */\r\n  functionType: Signature | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classType = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Tests if this type is a class type. */\r\n  get isClass(): bool { return this.classType != null; }\r\n  /** Tests if this type is a function type. */\r\n  get isFunction(): bool { return this.functionType != null; }\r\n  /** Tests if this type is a reference type. */\r\n  get isReference(): bool { return this.classType != null || this.functionType != null; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classType);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classType = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(functionType: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.functionType);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.functionType = functionType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.isReference);\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classType = this.classType;       // either a class reference\r\n      this.nullableType.functionType = this.functionType; // or a function reference\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.isReference) {\r\n      if (target.isReference) {\r\n        if (currentClass = this.classType) {\r\n          if (targetClass = target.classType) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.functionType) {\r\n          if (targetFunction = target.functionType) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.isReference) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) {\r\n      return left;\r\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\r\n      return right;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.functionType;\r\n        return kindOnly || !functionType\r\n          ? \"u32\"\r\n          : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classType;\r\n        return kindOnly || !classType\r\n          ? \"usize\"\r\n          : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    ret[i] = types[i].toNativeType();\r\n  }\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    sb[i] = types[i].toString();\r\n  }\r\n  return sb.join(\", \");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\r\n        return false;\r\n      }\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) {\r\n      return false; // TODO\r\n    }\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // check return type\r\n    return this.returnType.isAssignableTo(target.returnType);\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    var sb = [];\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(thisType.toSignatureString());\r\n    }\r\n    var parameterTypes = this.parameterTypes;\r\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n      sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(this.returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) {\r\n          sb.push((<string[]>names)[i]);\r\n        } else {\r\n          sb.push(getGenericParameterName(i));\r\n        }\r\n        if (i >= optionalStart && i != restIndex) {\r\n          sb.push(\"?: \");\r\n        } else {\r\n          sb.push(\": \");\r\n        }\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","import {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** Memory allocation implementation to use. */\r\n  allocateImpl: string = \"allocate_memory\";\r\n  /** Memory freeing implementation to use. */\r\n  freeImpl: string = \"free_memory\";\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n\r\n  /** Already processed file names. */\r\n  files: Set<string> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) {\r\n        this.compileSource(sources[i]);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\r\n      let funcRef: FunctionRef;\r\n      module.setStart(\r\n        funcRef = module.addFunction(\r\n          startFunctionInstance.internalName,\r\n          typeRef,\r\n          typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n          module.createBlock(null, startFunctionBody)\r\n        )\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        Module.MAX_MEMORY_WASM32, // TODO: not WASM64 compatible yet\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested\r\n    if (options.importMemory) {\r\n      module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n    }\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var sources = this.program.sources;\r\n\r\n    // try file.ts\r\n    var expected = normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try file/index.ts\r\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try (lib)/file.ts\r\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.File_0_not_found,\r\n      reportNode.range, normalizedPathWithoutExtension\r\n    );\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n    var files = this.files;\r\n    var normalizedPath = source.normalizedPath;\r\n    if (files.has(normalizedPath)) return;\r\n    files.add(normalizedPath);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.BUILTIN)) return true;\r\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n\r\n      // resolve now if annotated\r\n      if (declaration.type) {\r\n        let resolvedType = this.program.resolveType(declaration.type); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.type.range\r\n          );\r\n          return false;\r\n        }\r\n        global.type = resolvedType;\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n        initExpr = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.type = this.currentType;\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.DECLARE)) {\r\n\r\n      // constant global\r\n      if (global.is(CommonFlags.CONST)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.namespace\r\n            ? global.namespace.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (global.is(CommonFlags.CONST)) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (global.is(CommonFlags.CONST)) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              global.declaration.range\r\n            );\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(0);\r\n            break;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (declaration.isTopLevel) {     // but keep the element if it might be re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n        if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n          module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !global.is(CommonFlags.CONST), initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, member.internalName);\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!(instance && this.compileFunction(instance))) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    var thisType = signature.thisType;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    for (let i = 0; i < numParameters; ++i, ++index) {\r\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\r\n    }\r\n    var resultType = signature.returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.BUILTIN) || instance.simpleName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.DECLARE)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.DECLARE)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var typeRef = this.ensureFunctionType(instance.signature);\r\n    var module = this.module;\r\n    if (body) {\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let stmt = this.compileStatement(body);\r\n\r\n      // make sure all branches return\r\n      let allBranchesReturn = instance.flow.finalize();\r\n      let returnType = instance.signature.returnType;\r\n      if (returnType != Type.void && !allBranchesReturn) {\r\n        this.error(\r\n          DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n          assert(declaration.signature.returnType, \"return type expected\").range\r\n        );\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let namespace = instance.prototype.namespace;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        namespace\r\n          ? namespace.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n      module.addFunctionExport(instance.internalName, declaration.name.text);\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) {\r\n      flow.set(FlowFlags.RETURNS);\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.POSSIBLY_BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.POSSIBLY_CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condition = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condition)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      flow.set(FlowFlags.RETURNS);\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condition = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Each arm initiates a branch\r\n    var currentFunction = this.currentFunction;\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(statement.ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    var ifFalse = statement.ifFalse;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n    if (ifTrueReturns && ifFalseReturns) { // not necessary to append a hint\r\n      flow.set(FlowFlags.RETURNS);\r\n    }\r\n    return module.createIf(condition, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        currentFunction.signature.returnType\r\n      );\r\n    }\r\n\r\n    // Remember that this flow returns\r\n    currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return this.module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0 && alwaysReturns) {\r\n      currentFunction.flow.set(FlowFlags.RETURNS);\r\n      // Binaryen understands that so we don't need a hint\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch possibly throws\r\n    flow.set(FlowFlags.POSSIBLY_THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          currentFunction.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return 0;\r\n            }\r\n            scopedLocals.set(name, local);\r\n            return 0;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (declaration.is(CommonFlags.LET)) { // here: not top-level\r\n        currentFunction.flow.addScopedLocal(name, type, declaration.name); // reports\r\n      } else {\r\n        currentFunction.addLocal(type, name); // reports\r\n      }\r\n      if (init) {\r\n        initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condition = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate possible always-true conditions\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      case TypeKind.F64: {\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          element.declaration.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL)) {\r\n            expr = makeSmallIntegerWrap(expr, toType, module);\r\n          }\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SMALL) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    switch (expression.operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            // TODO: internal fmod, possibly simply imported from JS\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression, currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var element = resolved.element;\r\n    var elementType: Type;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>element).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>element).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1);\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>element).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\r\n          if (resolved.target && resolved.target.kind == ElementKind.CLASS) {\r\n            if (element.simpleName == (<Class>resolved.target).prototype.fnIndexedGet) {\r\n              let resolvedIndexedSet = (<FunctionPrototype>element).resolve(null); // reports\r\n              if (resolvedIndexedSet) {\r\n                elementType = resolvedIndexedSet.signature.returnType;\r\n                break;\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>resolved.target).toString()\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>element).type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>element).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>element).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) return module.createUnreachable();\r\n        let type = (<Global>element).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = (<Global>element).internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal((<Global>element).internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        assert(resolved.isInstanceTarget);\r\n        let targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          (<Class>resolved.target).type\r\n        );\r\n        let type = (<Field>element).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              targetExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>element).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            targetExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>element).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              assert(resolved.isInstanceTarget);\r\n              let thisArg = this.compileExpression(\r\n                <Expression>resolved.targetExpression,\r\n                (<Class>resolved.target).type\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisArg, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>element).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            let thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisArg),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>element).internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // @operator(\"[]\") ?\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) {\r\n          assert(resolved.isInstanceTarget);\r\n          let getterInstance = (<FunctionPrototype>element).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          // obtain @operator(\"[]=\")\r\n          let setElementName = (<Class>resolved.target).prototype.fnIndexedSet;\r\n          let setElement: Element | null;\r\n          if (\r\n            setElementName != null &&\r\n            (<Class>resolved.target).members &&\r\n            (setElement = (<Map<string,Element>>(<Class>resolved.target).members).get(setElementName)) &&\r\n            setElement.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            let setterInstance = (<FunctionPrototype>setElement).resolve(); // reports\r\n            if (!setterInstance) return module.createUnreachable();\r\n            let targetType = (<Class>resolved.target).type;\r\n            let targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              targetType\r\n            );\r\n            let elementExpr = this.compileExpression(\r\n              (<ElementAccessExpression>expression).elementExpression,\r\n              Type.i32\r\n            );\r\n            if (tee) {\r\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n              let returnType = getterInstance.signature.returnType;\r\n              this.currentFunction.freeTempLocal(tempLocalTarget);\r\n              return module.createBlock(null, [\r\n                this.makeCallDirect(setterInstance, [\r\n                  module.createTeeLocal(tempLocalTarget.index, targetExpr),\r\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                  valueWithCorrectType\r\n                ]),\r\n                this.makeCallDirect(getterInstance, [\r\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n                ])\r\n              ], returnType.toNativeType());\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [\r\n                targetExpr,\r\n                elementExpr,\r\n                valueWithCorrectType\r\n              ]);\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, (<Class>resolved.target).internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (element.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>element;\r\n\r\n        // builtins are compiled on the fly\r\n        if (prototype.is(CommonFlags.BUILTIN)) {\r\n          let expr = compileBuiltinCall( // reports\r\n            this,\r\n            prototype,\r\n            prototype.resolveBuiltinTypeArguments(\r\n              expression.typeArguments,\r\n              currentFunction.contextualTypeArguments\r\n            ),\r\n            expression.arguments,\r\n            contextualType,\r\n            expression\r\n          );\r\n          if (!expr) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          return expr;\r\n\r\n        // otherwise compile to a call\r\n        } else {\r\n          let instance = prototype.resolveUsingTypeArguments( // reports\r\n            expression.typeArguments,\r\n            currentFunction.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return module.createUnreachable();\r\n          let thisArg: ExpressionRef = 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            if (!thisArg) return module.createUnreachable();\r\n          } else {\r\n            assert(!resolved.isInstanceTarget);\r\n          }\r\n          return this.compileCallDirect(instance, expression.arguments, expression, thisArg);\r\n        }\r\n      }\r\n\r\n      // indirect call: index argument with signature\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>element).type.functionType) {\r\n          indexArg = module.createGetLocal((<Local>element).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>element).type.functionType) {\r\n          indexArg = module.createGetGlobal((<Global>element).internalName, (<Global>element).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>element).type;\r\n        if (signature = type.functionType) {\r\n          let targetExpr = this.compileExpression(assert(resolved.targetExpression), type);\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            targetExpr,\r\n            NativeType.I32,\r\n            (<Field>element).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>element).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>element).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = maxOperands - minOperands;\r\n    assert(numOptional);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // append an additional parameter taking the number of optional arguments provided\r\n    var trampolineParameterTypes = new Array<Type>(maxArguments + 1);\r\n    for (let i = 0; i < maxArguments; ++i) {\r\n      trampolineParameterTypes[i] = originalParameterTypes[i];\r\n    }\r\n    trampolineParameterTypes[maxArguments] = Type.i32;\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(trampolineParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments + 1;\r\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.instanceMethodOf);\r\n    trampoline.flags = original.flags;\r\n    trampoline.set(CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. 'with0'\r\n    var names = new Array<string>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = \"N=\" + i.toString();\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"N=invalid\", [\r\n        module.createSwitch(names, \"N=invalid\",\r\n          module.createGetLocal(maxOperands, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var typeRef = this.ensureFunctionType(trampolineSignature);\r\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(instance: Function, operands: ExpressionRef[] | null = null): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    if (numOperands < maxOperands) {\r\n      instance = this.ensureTrampoline(instance);\r\n      if (!this.compileFunction(instance)) return module.createUnreachable();\r\n      if (!operands) {\r\n        operands = new Array(maxOperands + 1);\r\n        operands.length = 0;\r\n      }\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(instance.signature.parameterTypes[i].toNativeZero(module));\r\n      }\r\n      operands.push(module.createI32(numOperands - minOperands));\r\n    }\r\n    var returnType = instance.signature.returnType;\r\n    this.currentType = returnType;\r\n    if (instance.is(CommonFlags.MODULE_IMPORT)) {\r\n      return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    } else {\r\n      return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    }\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(signature: Signature, indexArg: ExpressionRef, operands: ExpressionRef[]): ExpressionRef {\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    this.ensureFunctionType(signature);\r\n    return this.module.createCallIndirect(indexArg, operands, signature.toSignatureString());\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    assert( // should be guaranteed by resolveElementAccess\r\n      resolved.element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n      resolved.target &&\r\n      resolved.target.kind == ElementKind.CLASS\r\n    );\r\n    var target = <Class>resolved.target;\r\n    var instance = (<FunctionPrototype>resolved.element).resolve( // reports\r\n      null,\r\n      target.contextualTypeArguments\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    var thisArg = this.compileExpression(expression.expression, target.type);\r\n    return this.compileCallDirect(instance, [\r\n      expression.elementExpression\r\n    ], expression, thisArg);\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + \"~\" + simpleName,\r\n      declaration\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      currentFunction.contextualTypeArguments,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = Type.u32.asFunction(instance.signature); // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classType) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisType = assert(currentFunction.instanceMethodOf).type;\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let base = assert(currentFunction.instanceMethodOf).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var resolved = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>element, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>element).type;\r\n        let localIndex = (<Local>element).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, expression);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!element.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classType;\r\n        if (\r\n          classType &&\r\n          classType == this.program.elementsLookup.get(\"Array\") &&\r\n          classType.typeArguments && classType.typeArguments.length == 1\r\n        ) {\r\n          return this.compileStaticArray(\r\n            classType.typeArguments[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    // compile as static if all element expressions are precomputable, otherwise\r\n    // initialize in place.\r\n    var isStatic = true;\r\n    var size = expressions.length;\r\n\r\n    var module = this.module;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(size));\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(size));\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(size));\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(size));\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var exprs = new Array<ExpressionRef>(size);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < size; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isStatic) {\r\n      // TODO: convert to Uint8Array and create the segment\r\n    } else {\r\n      // TODO: initialize in place\r\n    }\r\n    // TODO: alternatively, static elements could go into data segments while\r\n    // dynamic ones are initialized on top? any benefits? (doesn't seem so)\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var resolved = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (resolved) {\r\n      if (resolved.element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let prototype = <ClassPrototype>resolved.element;\r\n        let instance = prototype.resolveUsingTypeArguments( // reports\r\n          expression.typeArguments,\r\n          null,\r\n          expression\r\n        );\r\n        if (instance) {\r\n          let thisExpr = compileBuiltinAllocate(this, instance, expression);\r\n          let initializers = new Array<ExpressionRef>();\r\n\r\n          // use a temp local for 'this'\r\n          let tempLocal = currentFunction.getTempLocal(options.usizeType);\r\n          initializers.push(module.createSetLocal(tempLocal.index, thisExpr));\r\n\r\n          // apply field initializers\r\n          if (instance.members) {\r\n            for (let member of instance.members.values()) {\r\n              if (member.kind == ElementKind.FIELD) {\r\n                let field = <Field>member;\r\n                let fieldDeclaration = field.prototype.declaration;\r\n                if (field.is(CommonFlags.CONST)) {\r\n                  assert(false); // there are no built-in fields currently\r\n                } else if (fieldDeclaration && fieldDeclaration.initializer) {\r\n                  initializers.push(module.createStore(field.type.byteSize,\r\n                    module.createGetLocal(tempLocal.index, options.nativeSizeType),\r\n                    this.compileExpression(fieldDeclaration.initializer, field.type),\r\n                    field.type.toNativeType(),\r\n                    field.memoryOffset\r\n                  ));\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // apply constructor\r\n          let constructorInstance = instance.constructorInstance;\r\n          if (constructorInstance) {\r\n            initializers.push(this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n              module.createGetLocal(tempLocal.index, options.nativeSizeType)\r\n            ));\r\n          }\r\n\r\n          // return 'this'\r\n          initializers.push(module.createGetLocal(tempLocal.index, options.nativeSizeType));\r\n          currentFunction.freeTempLocal(tempLocal);\r\n          thisExpr = module.createBlock(null, initializers, options.nativeSizeType);\r\n\r\n          this.currentType = instance.type;\r\n          return thisExpr;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n          expression.expression.range\r\n        );\r\n      }\r\n    }\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var resolved = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var targetExpr: ExpressionRef;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, propertyAccess);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        if (!this.compileEnum((<EnumValue>element).enum)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert(resolved.isInstanceTarget);\r\n        assert((<Field>element).memoryOffset >= 0);\r\n        targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          this.options.usizeType,\r\n          ConversionKind.NONE\r\n        );\r\n        this.currentType = (<Field>element).type;\r\n        return module.createLoad(\r\n          (<Field>element).type.size >> 3,\r\n          (<Field>element).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          targetExpr,\r\n          (<Field>element).type.toNativeType(),\r\n          (<Field>element).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>element).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.instanceMethodOf) {\r\n            targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              instance.instanceMethodOf.type\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, targetExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>element).simpleName, (<Property>element).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var condition = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n    var ifThen = this.compileExpression(expression.ifThen, contextualType);\r\n    var ifElse = this.compileExpression(expression.ifElse, contextualType);\r\n    return this.module.createIf(condition, ifThen, ifElse);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression(\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.isReference) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.isReference) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.isReference) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.isReference) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.isReference) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","import {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalize(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolve(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalize(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is an octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","// code below is generated from diagnosticsMessages.json by scripts/build-diagnostics\n/* tslint:disable:max-line-length */\n\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/*\r\n\r\n This is a custom parser specifically written for the AssemblyScript subset. It accepts some of the\r\n most common TypeScript-only patterns that it knows an appropriate error message for but, though it\r\n uses TypeScript's codes for diagnostics, doesn't ultimately aim at full compatibility.\r\n\r\n*/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalize as normalizePath\r\n} from \"./util/path\";\r\n\r\nimport {\r\n\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n\r\n  currentDeclareStart: i32 = 0;\r\n  currentDeclareEnd: i32 = 0;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].normalizedPath == normalizedPath) return;\r\n    }\r\n    this.seenlog.add(normalizedPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    source.tokenizer = tn;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        source.statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    isNamespaceMember: bool = false\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      let name = decorator.name;\r\n      if (name.kind == NodeKind.IDENTIFIER) {\r\n        let text = (<IdentifierExpression>name).text;\r\n        if (text == \"global\") {\r\n          flags |= CommonFlags.GLOBAL;\r\n          continue;\r\n        }\r\n        if (text == \"builtin\") {\r\n          flags |= CommonFlags.BUILTIN;\r\n          continue;\r\n        }\r\n        if (text == \"unmananged\") {\r\n          flags |= CommonFlags.UNMANAGED;\r\n          continue;\r\n        }\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.DECLARE;\r\n      this.currentDeclareStart = declareStart = tn.tokenPos;\r\n      this.currentDeclareEnd = declareEnd = tn.pos;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS: {\r\n        tn.next();\r\n        statement = this.parseClass(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!isNamespaceMember) {\r\n            statement = this.parseStatement(tn, true);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.DECLARE)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    suppressErrors: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: '...'? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      isRest = true;\r\n      startRange = tn.range();\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      return Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    if (flags & CommonFlags.DECLARE) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range(this.currentDeclareStart, this.currentDeclareEnd)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.AMBIENT;\r\n      }\r\n    }\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClass(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at 'class':\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes = new Array<TypeNode>();\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        implementsTypes.push(<TypeNode>type);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (flags & CommonFlags.DECLARE) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range(this.currentDeclareStart, this.currentDeclareEnd)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.AMBIENT;\r\n      }\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, flags);\r\n        if (!member) return null;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassDeclaration(\r\n      identifier,\r\n      typeParameters,\r\n      extendsType,\r\n      implementsTypes,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parentFlags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else if (tn.skip(Token.ABSTRACT)) {\r\n      flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n      abstractStart = tn.tokenPos;\r\n      abstractEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn);\r\n      if (!parameters) return null;\r\n\r\n      if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, true);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        }\r\n        let ret = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      if (ret.normalizedPath && !this.seenlog.has(<string>ret.normalizedPath)) {\r\n        this.backlog.push(<string>ret.normalizedPath);\r\n        this.seenlog.add(<string>ret.normalizedPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        if (!this.seenlog.has(ret.normalizedPath)) {\r\n          this.backlog.push(ret.normalizedPath);\r\n          this.seenlog.add(ret.normalizedPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.QUESTION:   // optional parameter\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","const indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/**\r\n * @file Definition builders for WebIDL and TypeScript.\r\n */\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Function,\r\n  Class,\r\n  Namespace,\r\n  FunctionPrototype,\r\n  ClassPrototype,\r\n  ConstantValueKind,\r\n  Interface\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util/text\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program) {\r\n    this.program = program;\r\n  }\r\n\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) {\r\n      this.visitElement(element);\r\n    }\r\n  }\r\n\r\n  visitElement(element: Element): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitEnum(<Enum>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitFunction(<Function>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitClass(<Class>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\r\n          this.visitNamespace(<Namespace>element);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) {\r\n            sb.push(\"const \");\r\n          } else {\r\n            sb.push(\"readonly \");\r\n          }\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) {\r\n          this.visitElement(member);\r\n        }\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          this.seen.add(member);\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) {\r\n        this.visitNamespace(element);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"function \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    sb.push(\"): \");\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    members = element.members; // instance\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\r\n","import {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","//////////////////////// Low-level C-Like Compiler API /////////////////////////\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) {\r\n    parser = new Parser();\r\n    isEntry = true;\r\n  }\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","import {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  Expression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  Global,\r\n  FunctionPrototype,\r\n  Local,\r\n  Class,\r\n  ElementKind\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(\r\n  compiler: Compiler,\r\n  global: Global,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (global.internalName) {\r\n    case \"NaN\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(NaN);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(NaN);\r\n      }\r\n    }\r\n    case \"Infinity\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(Infinity);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(Infinity);\r\n      }\r\n    }\r\n    case \"HEAP_BASE\": { // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  var tempLocal0: Local,\r\n      tempLocal1: Local;\r\n\r\n  var type: Type,\r\n      offset: i32;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // math\r\n\r\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createBinary(BinaryOp.NeF32,\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createBinary(BinaryOp.NeF64,\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF32,\r\n              module.createUnary(UnaryOp.AbsF32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              module.createF32(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32),\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF64,\r\n              module.createUnary(UnaryOp.AbsF64,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              module.createF64(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64),\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        ret = compiler.options.isWasm64\r\n          ? module.createI64(typeArguments[0].byteSize, 0)\r\n          : module.createI32(typeArguments[0].byteSize);\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], type = compiler.currentType);\r\n      arg2 = compiler.compileExpression(operands[2], Type.bool);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal0.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal0.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  cls: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(cls.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var prototype = program.elementsLookup.get(options.allocateImpl);\r\n  if (!prototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, options.allocateImpl\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (prototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, prototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var instance = (<FunctionPrototype>prototype).resolve(); // reports\r\n  if (!(instance && compiler.compileFunction(instance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = cls.type;\r\n  return module.createCall(\r\n    instance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(cls.currentMemoryOffset)\r\n        : module.createI32(cls.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(\"abort\"); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","var globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n","import \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\n"],"sourceRoot":""}